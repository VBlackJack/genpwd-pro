{
  "root": "/workspace/genpwd-pro",
  "patterns": {
    "legacy_vault_repository": {
      "description": "References to the Room-backed VaultRepository",
      "tags": [
        "legacy",
        "room"
      ]
    },
    "room_database_builder": {
      "description": "Direct references to androidx.room APIs",
      "tags": [
        "room",
        "database"
      ]
    },
    "room_imports": {
      "description": "Import statements for Room classes",
      "tags": [
        "imports",
        "room"
      ]
    },
    "room_annotations": {
      "description": "Usage of Room annotations (Entity, Dao, Query, Database)",
      "tags": [
        "room",
        "annotations"
      ]
    },
    "app_database_singletons": {
      "description": "References to AppDatabase (Room concrete DB)",
      "tags": [
        "room",
        "database"
      ]
    },
    "flow_vault_entities": {
      "description": "Flow emissions of Room entities",
      "tags": [
        "reactive",
        "room"
      ]
    },
    "coroutine_dao_calls": {
      "description": "Coroutine calls to DAO methods",
      "tags": [
        "coroutines",
        "room"
      ]
    }
  },
  "files": {
    "android/app/src/test/java/com/julien/genpwdpro/data/repository/FileVaultRepositoryTest.kt": {
      "legacy_vault_repository": [
        {
          "line": 31,
          "content": "private lateinit var legacyVaultRepository: VaultRepository"
        }
      ]
    },
    "android/app/src/test/java/com/julien/genpwdpro/data/sync/VaultSyncManagerTest.kt": {
      "room_imports": [
        {
          "line": 5,
          "content": "import com.julien.genpwdpro.data.local.entity.VaultEntity"
        }
      ],
      "legacy_vault_repository": [
        {
          "line": 6,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository"
        },
        {
          "line": 25,
          "content": "private lateinit var mockVaultRepository: VaultRepository"
        },
        {
          "line": 45,
          "content": "// Mock VaultRepository"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/di/DatabaseModule.kt": {
      "app_database_singletons": [
        {
          "line": 11,
          "content": "import com.julien.genpwdpro.data.local.database.AppDatabase"
        },
        {
          "line": 34,
          "content": "): AppDatabase {"
        },
        {
          "line": 37,
          "content": "AppDatabase::class.java,"
        },
        {
          "line": 38,
          "content": "AppDatabase.DATABASE_NAME"
        },
        {
          "line": 41,
          "content": "AppDatabase.MIGRATION_1_2,"
        },
        {
          "line": 42,
          "content": "AppDatabase.MIGRATION_2_3,"
        },
        {
          "line": 43,
          "content": "AppDatabase.MIGRATION_3_4,"
        },
        {
          "line": 44,
          "content": "AppDatabase.MIGRATION_4_5,"
        },
        {
          "line": 45,
          "content": "AppDatabase.MIGRATION_5_6,"
        },
        {
          "line": 46,
          "content": "AppDatabase.MIGRATION_6_7,"
        },
        {
          "line": 47,
          "content": "AppDatabase.MIGRATION_7_8"
        },
        {
          "line": 56,
          "content": "database: AppDatabase"
        },
        {
          "line": 89,
          "content": "database: AppDatabase"
        },
        {
          "line": 97,
          "content": "database: AppDatabase"
        },
        {
          "line": 105,
          "content": "database: AppDatabase"
        },
        {
          "line": 113,
          "content": "database: AppDatabase"
        },
        {
          "line": 121,
          "content": "database: AppDatabase"
        },
        {
          "line": 129,
          "content": "database: AppDatabase"
        }
      ],
      "legacy_vault_repository": [
        {
          "line": 14,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository"
        },
        {
          "line": 156,
          "content": "): VaultRepository {"
        },
        {
          "line": 157,
          "content": "return VaultRepository(vaultDao, entryDao, folderDao, tagDao, presetDao, cryptoManager, keystoreManager)"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/repository/VaultRepository.kt": {
      "legacy_vault_repository": [
        {
          "line": 29,
          "content": "class VaultRepository @Inject constructor("
        },
        {
          "line": 252,
          "content": "Log.e(\"VaultRepository\", \"Error saving biometric password\", e)"
        },
        {
          "line": 269,
          "content": "Log.w(\"VaultRepository\", \"No biometric data for vault $vaultId\")"
        },
        {
          "line": 285,
          "content": "Log.e(\"VaultRepository\", \"Error getting biometric password\", e)"
        },
        {
          "line": 312,
          "content": "Log.e(\"VaultRepository\", \"Error clearing biometric password\", e)"
        },
        {
          "line": 1101,
          "content": "Log.e(\"VaultRepository\", \"Error exporting vault\", e)"
        },
        {
          "line": 1146,
          "content": "Log.d(\"VaultRepository\", \"Vault already exists, updating...\")"
        },
        {
          "line": 1249,
          "content": "Log.e(\"VaultRepository\", \"Error importing vault\", e)"
        },
        {
          "line": 1341,
          "content": "Log.w(\"VaultRepository\", \"Cannot create preset: limit of 3 per mode reached\")"
        },
        {
          "line": 1426,
          "content": "Log.w(\"VaultRepository\", \"Attempted to get presets for locked vault: $vaultId\")"
        },
        {
          "line": 1471,
          "content": "Log.w(\"VaultRepository\", \"Cannot delete system preset\")"
        },
        {
          "line": 1503,
          "content": "Log.d(\"VaultRepository\", \"Default preset already exists for vault $vaultId\")"
        },
        {
          "line": 1531,
          "content": "Log.d(\"VaultRepository\", \"Default preset initialized for vault $vaultId\")"
        }
      ],
      "flow_vault_entities": [
        {
          "line": 327,
          "content": "fun getAllVaults(): Flow<List<VaultEntity>> {"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/repository/FileVaultRepository.kt": {
      "legacy_vault_repository": [
        {
          "line": 37,
          "content": "* Note : Cette classe remplace l'ancien VaultRepository (Room-based)"
        },
        {
          "line": 44,
          "content": "private val legacyVaultRepository: VaultRepository,"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/repository/ImportExportRepository.kt": {
      "room_imports": [
        {
          "line": 8,
          "content": "import com.julien.genpwdpro.data.local.dao.VaultDao"
        },
        {
          "line": 11,
          "content": "import com.julien.genpwdpro.data.local.entity.VaultEntity"
        }
      ],
      "legacy_vault_repository": [
        {
          "line": 41,
          "content": "private val vaultRepository: VaultRepository"
        },
        {
          "line": 177,
          "content": "// Créer l'entrée via VaultRepository"
        },
        {
          "line": 178,
          "content": "val decryptedEntry = VaultRepository.DecryptedEntry("
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/sync/VaultSyncManager.kt": {
      "legacy_vault_repository": [
        {
          "line": 6,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository"
        },
        {
          "line": 29,
          "content": "* 1. Exporter vault → Données chiffrées (VaultRepository)"
        },
        {
          "line": 32,
          "content": "* 4. Importer vault → Déchiffrement (VaultRepository)"
        },
        {
          "line": 37,
          "content": "private val vaultRepository: VaultRepository,"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/dao/VaultDao.kt": {
      "room_imports": [
        {
          "line": 4,
          "content": "import com.julien.genpwdpro.data.local.entity.VaultEntity"
        }
      ],
      "room_annotations": [
        {
          "line": 10,
          "content": "@Dao"
        },
        {
          "line": 16,
          "content": "@Query(\"SELECT * FROM vaults ORDER BY lastAccessedAt DESC\")"
        },
        {
          "line": 22,
          "content": "@Query(\"SELECT * FROM vaults WHERE id = :id\")"
        },
        {
          "line": 28,
          "content": "@Query(\"SELECT * FROM vaults WHERE id = :id\")"
        },
        {
          "line": 34,
          "content": "@Query(\"SELECT * FROM vaults WHERE isDefault = 1 LIMIT 1\")"
        },
        {
          "line": 40,
          "content": "@Query(\"SELECT * FROM vaults WHERE isDefault = 1 LIMIT 1\")"
        },
        {
          "line": 46,
          "content": "@Query(\"SELECT * FROM vaults WHERE name LIKE '%' || :query || '%' ORDER BY lastAccessedAt DESC\")"
        },
        {
          "line": 70,
          "content": "@Query(\"DELETE FROM vaults WHERE id = :id\")"
        },
        {
          "line": 76,
          "content": "@Query(\"UPDATE vaults SET lastAccessedAt = :timestamp WHERE id = :id\")"
        },
        {
          "line": 82,
          "content": "@Query(\"UPDATE vaults SET entryCount = :count WHERE id = :id\")"
        },
        {
          "line": 97,
          "content": "@Query(\"UPDATE vaults SET isDefault = 0\")"
        },
        {
          "line": 103,
          "content": "@Query(\"UPDATE vaults SET isDefault = 1 WHERE id = :id\")"
        },
        {
          "line": 109,
          "content": "@Query(\"UPDATE vaults SET biometricUnlockEnabled = :enabled WHERE id = :id\")"
        },
        {
          "line": 115,
          "content": "@Query(\"UPDATE vaults SET autoLockTimeout = :timeout WHERE id = :id\")"
        },
        {
          "line": 121,
          "content": "@Query(\"SELECT COUNT(*) FROM vaults\")"
        },
        {
          "line": 127,
          "content": "@Query(\"SELECT COUNT(*) FROM vaults WHERE name = :name AND id != :excludeId\")"
        }
      ],
      "flow_vault_entities": [
        {
          "line": 17,
          "content": "fun getAllVaults(): Flow<List<VaultEntity>>"
        },
        {
          "line": 29,
          "content": "fun getByIdFlow(id: String): Flow<VaultEntity?>"
        },
        {
          "line": 41,
          "content": "fun getDefaultVaultFlow(): Flow<VaultEntity?>"
        },
        {
          "line": 47,
          "content": "fun searchVaults(query: String): Flow<List<VaultEntity>>"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/dao/VaultEntryDao.kt": {
      "room_annotations": [
        {
          "line": 10,
          "content": "@Dao"
        },
        {
          "line": 16,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE vaultId = :vaultId ORDER BY modifiedAt DESC\")"
        },
        {
          "line": 22,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE vaultId = :vaultId AND folderId = :folderId ORDER BY modifiedAt DESC\")"
        },
        {
          "line": 28,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE vaultId = :vaultId AND folderId IS NULL ORDER BY modifiedAt DESC\")"
        },
        {
          "line": 34,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE vaultId = :vaultId AND isFavorite = 1 ORDER BY modifiedAt DESC\")"
        },
        {
          "line": 40,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE id = :id\")"
        },
        {
          "line": 46,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE id = :id\")"
        },
        {
          "line": 52,
          "content": "@Query(\"\"\""
        },
        {
          "line": 66,
          "content": "@Query(\"\"\""
        },
        {
          "line": 96,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE vaultId = :vaultId AND hasTOTP = 1 ORDER BY totpIssuer ASC\")"
        },
        {
          "line": 102,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE vaultId = :vaultId AND hasPasskey = 1 ORDER BY passkeyRpName ASC\")"
        },
        {
          "line": 108,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE vaultId = :vaultId AND requiresPasswordChange = 1 ORDER BY modifiedAt DESC\")"
        },
        {
          "line": 114,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE vaultId = :vaultId AND passwordExpiresAt > 0 AND passwordExpiresAt < :now ORDER BY passwordExpiresAt ASC\")"
        },
        {
          "line": 120,
          "content": "@Query(\"SELECT * FROM vault_entries WHERE vaultId = :vaultId AND passwordStrength < :threshold ORDER BY passwordStrength ASC\")"
        },
        {
          "line": 150,
          "content": "@Query(\"DELETE FROM vault_entries WHERE id = :id\")"
        },
        {
          "line": 156,
          "content": "@Query(\"DELETE FROM vault_entries WHERE vaultId = :vaultId\")"
        },
        {
          "line": 162,
          "content": "@Query(\"UPDATE vault_entries SET isFavorite = :isFavorite WHERE id = :id\")"
        },
        {
          "line": 168,
          "content": "@Query(\"UPDATE vault_entries SET lastAccessedAt = :timestamp, usageCount = usageCount + 1 WHERE id = :id\")"
        },
        {
          "line": 174,
          "content": "@Query(\"UPDATE vault_entries SET modifiedAt = :timestamp WHERE id = :id\")"
        },
        {
          "line": 180,
          "content": "@Query(\"UPDATE vault_entries SET folderId = :folderId, modifiedAt = :timestamp WHERE id = :id\")"
        },
        {
          "line": 186,
          "content": "@Query(\"SELECT COUNT(*) FROM vault_entries WHERE vaultId = :vaultId\")"
        },
        {
          "line": 192,
          "content": "@Query(\"SELECT COUNT(*) FROM vault_entries WHERE vaultId = :vaultId AND isFavorite = 1\")"
        },
        {
          "line": 198,
          "content": "@Query(\"SELECT COUNT(*) FROM vault_entries WHERE folderId = :folderId\")"
        },
        {
          "line": 204,
          "content": "@Query(\"\"\""
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/dao/PresetDao.kt": {
      "room_annotations": [
        {
          "line": 10,
          "content": "@Dao"
        },
        {
          "line": 15,
          "content": "@Query(\"SELECT * FROM presets WHERE vaultId = :vaultId ORDER BY isDefault DESC, lastUsedAt DESC, createdAt DESC\")"
        },
        {
          "line": 21,
          "content": "@Query(\"SELECT * FROM presets WHERE vaultId = :vaultId AND isDefault = 1 LIMIT 1\")"
        },
        {
          "line": 27,
          "content": "@Query(\"SELECT * FROM presets WHERE vaultId = :vaultId AND generationMode = :mode ORDER BY createdAt DESC\")"
        },
        {
          "line": 33,
          "content": "@Query(\"SELECT COUNT(*) FROM presets WHERE vaultId = :vaultId AND generationMode = :mode AND isSystemPreset = 0\")"
        },
        {
          "line": 39,
          "content": "@Query(\"SELECT * FROM presets WHERE id = :id\")"
        },
        {
          "line": 63,
          "content": "@Query(\"DELETE FROM presets WHERE id = :id AND isSystemPreset = 0\")"
        },
        {
          "line": 69,
          "content": "@Query(\"UPDATE presets SET isDefault = 0 WHERE vaultId = :vaultId\")"
        },
        {
          "line": 75,
          "content": "@Query(\"UPDATE presets SET lastUsedAt = :timestamp, usageCount = usageCount + 1 WHERE id = :id\")"
        },
        {
          "line": 81,
          "content": "@Query(\"DELETE FROM presets WHERE vaultId = :vaultId\")"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/dao/PasswordHistoryDao.kt": {
      "room_annotations": [
        {
          "line": 10,
          "content": "@Dao"
        },
        {
          "line": 16,
          "content": "@Query(\"SELECT * FROM password_history ORDER BY timestamp DESC\")"
        },
        {
          "line": 22,
          "content": "@Query(\"SELECT * FROM password_history ORDER BY timestamp DESC LIMIT :limit\")"
        },
        {
          "line": 28,
          "content": "@Query(\"SELECT * FROM password_history WHERE id = :id\")"
        },
        {
          "line": 34,
          "content": "@Query(\"SELECT * FROM password_history WHERE password LIKE '%' || :query || '%' ORDER BY timestamp DESC\")"
        },
        {
          "line": 58,
          "content": "@Query(\"DELETE FROM password_history WHERE id = :id\")"
        },
        {
          "line": 64,
          "content": "@Query(\"DELETE FROM password_history\")"
        },
        {
          "line": 70,
          "content": "@Query(\"SELECT COUNT(*) FROM password_history\")"
        },
        {
          "line": 76,
          "content": "@Query(\"DELETE FROM password_history WHERE id IN (SELECT id FROM password_history ORDER BY timestamp ASC LIMIT :count)\")"
        },
        {
          "line": 82,
          "content": "@Query(\"SELECT * FROM password_history WHERE isFavorite = 1 ORDER BY timestamp DESC\")"
        },
        {
          "line": 88,
          "content": "@Query(\"UPDATE password_history SET isFavorite = :isFavorite WHERE id = :id\")"
        },
        {
          "line": 94,
          "content": "@Query(\"UPDATE password_history SET note = :note WHERE id = :id\")"
        },
        {
          "line": 100,
          "content": "@Query(\"\"\""
        },
        {
          "line": 119,
          "content": "@Query(\"SELECT COUNT(*) FROM password_history WHERE isFavorite = 1\")"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/dao/FolderDao.kt": {
      "room_annotations": [
        {
          "line": 10,
          "content": "@Dao"
        },
        {
          "line": 16,
          "content": "@Query(\"SELECT * FROM folders WHERE vaultId = :vaultId ORDER BY sortOrder ASC, name ASC\")"
        },
        {
          "line": 22,
          "content": "@Query(\"SELECT * FROM folders WHERE vaultId = :vaultId AND parentFolderId IS NULL ORDER BY sortOrder ASC, name ASC\")"
        },
        {
          "line": 28,
          "content": "@Query(\"SELECT * FROM folders WHERE parentFolderId = :parentId ORDER BY sortOrder ASC, name ASC\")"
        },
        {
          "line": 34,
          "content": "@Query(\"SELECT * FROM folders WHERE id = :id\")"
        },
        {
          "line": 40,
          "content": "@Query(\"SELECT * FROM folders WHERE id = :id\")"
        },
        {
          "line": 46,
          "content": "@Query(\"SELECT * FROM folders WHERE vaultId = :vaultId AND name LIKE '%' || :query || '%' ORDER BY name ASC\")"
        },
        {
          "line": 76,
          "content": "@Query(\"DELETE FROM folders WHERE id = :id\")"
        },
        {
          "line": 82,
          "content": "@Query(\"DELETE FROM folders WHERE vaultId = :vaultId\")"
        },
        {
          "line": 88,
          "content": "@Query(\"UPDATE folders SET parentFolderId = :parentId, modifiedAt = :timestamp WHERE id = :id\")"
        },
        {
          "line": 94,
          "content": "@Query(\"UPDATE folders SET sortOrder = :order WHERE id = :id\")"
        },
        {
          "line": 100,
          "content": "@Query(\"SELECT COUNT(*) FROM folders WHERE vaultId = :vaultId\")"
        },
        {
          "line": 106,
          "content": "@Query(\"SELECT COUNT(*) FROM folders WHERE parentFolderId = :parentId\")"
        },
        {
          "line": 112,
          "content": "@Query(\"\"\""
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/dao/TagDao.kt": {
      "room_annotations": [
        {
          "line": 12,
          "content": "@Dao"
        },
        {
          "line": 18,
          "content": "@Query(\"SELECT * FROM tags WHERE vaultId = :vaultId ORDER BY name ASC\")"
        },
        {
          "line": 24,
          "content": "@Query(\"SELECT * FROM tags WHERE id = :id\")"
        },
        {
          "line": 30,
          "content": "@Query(\"SELECT * FROM tags WHERE vaultId = :vaultId AND name = :name\")"
        },
        {
          "line": 36,
          "content": "@Query(\"SELECT * FROM tags WHERE vaultId = :vaultId AND name LIKE '%' || :query || '%' ORDER BY name ASC\")"
        },
        {
          "line": 42,
          "content": "@Query(\"\"\""
        },
        {
          "line": 53,
          "content": "@Query(\"\"\""
        },
        {
          "line": 64,
          "content": "@Query(\"\"\""
        },
        {
          "line": 102,
          "content": "@Query(\"DELETE FROM tags WHERE id = :id\")"
        },
        {
          "line": 108,
          "content": "@Query(\"DELETE FROM tags WHERE vaultId = :vaultId\")"
        },
        {
          "line": 126,
          "content": "@Query(\"DELETE FROM entry_tag_cross_ref WHERE entryId = :entryId\")"
        },
        {
          "line": 132,
          "content": "@Query(\"DELETE FROM entry_tag_cross_ref WHERE tagId = :tagId\")"
        },
        {
          "line": 138,
          "content": "@Query(\"SELECT COUNT(*) FROM tags WHERE vaultId = :vaultId\")"
        },
        {
          "line": 144,
          "content": "@Query(\"SELECT COUNT(*) FROM entry_tag_cross_ref WHERE tagId = :tagId\")"
        },
        {
          "line": 150,
          "content": "@Query(\"SELECT COUNT(*) FROM entry_tag_cross_ref WHERE entryId = :entryId\")"
        },
        {
          "line": 156,
          "content": "@Query(\"SELECT COUNT(*) FROM tags WHERE vaultId = :vaultId AND name = :name AND id != :excludeId\")"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/dao/VaultRegistryDao.kt": {
      "room_annotations": [
        {
          "line": 10,
          "content": "@Dao"
        },
        {
          "line": 16,
          "content": "@Query(\"SELECT * FROM vault_registry ORDER BY isDefault DESC, name ASC\")"
        },
        {
          "line": 22,
          "content": "@Query(\"SELECT * FROM vault_registry WHERE id = :vaultId\")"
        },
        {
          "line": 28,
          "content": "@Query(\"SELECT * FROM vault_registry WHERE isDefault = 1 LIMIT 1\")"
        },
        {
          "line": 34,
          "content": "@Query(\"SELECT * FROM vault_registry WHERE isDefault = 1 LIMIT 1\")"
        },
        {
          "line": 40,
          "content": "@Query(\"SELECT * FROM vault_registry WHERE isLoaded = 1\")"
        },
        {
          "line": 64,
          "content": "@Query(\"DELETE FROM vault_registry WHERE id = :vaultId\")"
        },
        {
          "line": 79,
          "content": "@Query(\"UPDATE vault_registry SET isDefault = 0\")"
        },
        {
          "line": 82,
          "content": "@Query(\"UPDATE vault_registry SET isDefault = :isDefault WHERE id = :vaultId\")"
        },
        {
          "line": 88,
          "content": "@Query(\"UPDATE vault_registry SET isLoaded = :isLoaded WHERE id = :vaultId\")"
        },
        {
          "line": 94,
          "content": "@Query(\"UPDATE vault_registry SET lastAccessed = :timestamp WHERE id = :vaultId\")"
        },
        {
          "line": 100,
          "content": "@Query(\"UPDATE vault_registry SET fileSize = :size, lastModified = :timestamp WHERE id = :vaultId\")"
        },
        {
          "line": 106,
          "content": "@Query(\"SELECT COUNT(*) FROM vault_registry\")"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/entity/TagEntity.kt": {
      "room_annotations": [
        {
          "line": 12,
          "content": "@Entity("
        },
        {
          "line": 47,
          "content": "@Entity("
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/entity/VaultEntryEntity.kt": {
      "room_annotations": [
        {
          "line": 13,
          "content": "@Entity("
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/entity/VaultRegistryEntry.kt": {
      "room_annotations": [
        {
          "line": 18,
          "content": "@Entity("
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/entity/PasswordHistoryEntity.kt": {
      "room_annotations": [
        {
          "line": 10,
          "content": "@Entity(tableName = \"password_history\")"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/entity/FolderEntity.kt": {
      "room_annotations": [
        {
          "line": 13,
          "content": "@Entity("
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/entity/VaultEntity.kt": {
      "room_annotations": [
        {
          "line": 11,
          "content": "@Entity(tableName = \"vaults\")"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/entity/PresetEntity.kt": {
      "room_annotations": [
        {
          "line": 19,
          "content": "@Entity("
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/local/database/AppDatabase.kt": {
      "room_annotations": [
        {
          "line": 13,
          "content": "@Database("
        },
        {
          "line": 283,
          "content": "* @Entity annotation, otherwise schema validation fails."
        }
      ],
      "app_database_singletons": [
        {
          "line": 27,
          "content": "abstract class AppDatabase : RoomDatabase() {"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/data/sync/providers/PCloudProvider.kt": {
      "room_annotations": [
        {
          "line": 84,
          "content": "@Query(\"client_id\") clientId: String,"
        },
        {
          "line": 85,
          "content": "@Query(\"client_secret\") clientSecret: String,"
        },
        {
          "line": 86,
          "content": "@Query(\"code\") code: String"
        },
        {
          "line": 90,
          "content": "suspend fun getUserInfo(@Query(\"access_token\") token: String): PCloudUserResponse"
        },
        {
          "line": 95,
          "content": "@Query(\"access_token\") token: String,"
        },
        {
          "line": 96,
          "content": "@Query(\"folderid\") folderId: Long = 0,"
        },
        {
          "line": 97,
          "content": "@Query(\"recursive\") recursive: Int = 0"
        },
        {
          "line": 102,
          "content": "@Query(\"access_token\") token: String,"
        },
        {
          "line": 103,
          "content": "@Query(\"path\") path: String"
        },
        {
          "line": 110,
          "content": "@Query(\"access_token\") token: String,"
        },
        {
          "line": 111,
          "content": "@Query(\"folderid\") folderId: Long,"
        },
        {
          "line": 112,
          "content": "@Query(\"filename\") filename: String,"
        },
        {
          "line": 118,
          "content": "@Query(\"access_token\") token: String,"
        },
        {
          "line": 119,
          "content": "@Query(\"fileid\") fileId: Long"
        },
        {
          "line": 124,
          "content": "@Query(\"access_token\") token: String,"
        },
        {
          "line": 125,
          "content": "@Query(\"fileid\") fileId: Long"
        },
        {
          "line": 130,
          "content": "@Query(\"access_token\") token: String,"
        },
        {
          "line": 131,
          "content": "@Query(\"fileid\") fileId: Long"
        },
        {
          "line": 137,
          "content": "@Query(\"access_token\") token: String,"
        },
        {
          "line": 138,
          "content": "@Query(\"path\") path: String"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/presentation/analysis/PasswordHealthViewModel.kt": {
      "legacy_vault_repository": [
        {
          "line": 6,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository"
        },
        {
          "line": 26,
          "content": "private val vaultRepository: VaultRepository"
        },
        {
          "line": 49,
          "content": "val passwordMap = mutableMapOf<String, MutableList<VaultRepository.DecryptedEntry>>()"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/presentation/screens/GeneratorViewModel.kt": {
      "legacy_vault_repository": [
        {
          "line": 25,
          "content": "private val vaultRepository: com.julien.genpwdpro.data.repository.VaultRepository"
        },
        {
          "line": 31,
          "content": "private val _currentPreset = MutableStateFlow<com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset?>(null)"
        },
        {
          "line": 32,
          "content": "val currentPreset: StateFlow<com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset?> = _currentPreset.asStateFlow()"
        },
        {
          "line": 34,
          "content": "private val _presets = MutableStateFlow<List<com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset>>(emptyList())"
        },
        {
          "line": 35,
          "content": "val presets: StateFlow<List<com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset>> = _presets.asStateFlow()"
        },
        {
          "line": 75,
          "content": "fun selectPreset(preset: com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset) {"
        },
        {
          "line": 108,
          "content": "val preset = com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset("
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/presentation/vault/VaultSelectorScreen.kt": {
      "room_imports": [
        {
          "line": 15,
          "content": "import com.julien.genpwdpro.data.local.entity.VaultEntity"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/presentation/vault/VaultViewModel.kt": {
      "room_imports": [
        {
          "line": 5,
          "content": "import com.julien.genpwdpro.data.local.entity.VaultEntity"
        }
      ],
      "legacy_vault_repository": [
        {
          "line": 6,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository"
        },
        {
          "line": 18,
          "content": "private val vaultRepository: VaultRepository,"
        }
      ],
      "flow_vault_entities": [
        {
          "line": 25,
          "content": "private val _selectedVault = MutableStateFlow<VaultEntity?>(null)"
        },
        {
          "line": 26,
          "content": "val selectedVault: StateFlow<VaultEntity?> = _selectedVault.asStateFlow()"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/presentation/preset/PresetSelector.kt": {
      "legacy_vault_repository": [
        {
          "line": 15,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/presentation/preset/PresetViewModel.kt": {
      "legacy_vault_repository": [
        {
          "line": 7,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository"
        },
        {
          "line": 8,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset"
        },
        {
          "line": 20,
          "content": "private val vaultRepository: VaultRepository"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/presentation/preset/PresetListScreen.kt": {
      "legacy_vault_repository": [
        {
          "line": 17,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset"
        }
      ]
    },
    "android/app/src/main/java/com/julien/genpwdpro/domain/model/SecureNote.kt": {
      "legacy_vault_repository": [
        {
          "line": 4,
          "content": "import com.julien.genpwdpro.data.repository.VaultRepository"
        },
        {
          "line": 51,
          "content": "fun toDecryptedEntry(): VaultRepository.DecryptedEntry {"
        },
        {
          "line": 52,
          "content": "return VaultRepository.DecryptedEntry("
        },
        {
          "line": 95,
          "content": "fun fromDecryptedEntry(entry: VaultRepository.DecryptedEntry): SecureNote? {"
        },
        {
          "line": 139,
          "content": "fun toDecryptedEntry(): VaultRepository.DecryptedEntry {"
        },
        {
          "line": 140,
          "content": "return VaultRepository.DecryptedEntry("
        },
        {
          "line": 215,
          "content": "fun toDecryptedEntry(): VaultRepository.DecryptedEntry {"
        },
        {
          "line": 227,
          "content": "return VaultRepository.DecryptedEntry("
        }
      ]
    }
  },
  "totals": {
    "legacy_vault_repository": 54,
    "room_database_builder": 0,
    "room_imports": 6,
    "room_annotations": 137,
    "app_database_singletons": 19,
    "flow_vault_entities": 7,
    "coroutine_dao_calls": 0
  }
}
