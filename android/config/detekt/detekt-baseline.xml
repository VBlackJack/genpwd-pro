<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ArgumentListWrapping:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$("CREATE INDEX IF NOT EXISTS index_entry_tag_cross_ref_entryId ON entry_tag_cross_ref(entryId)")</ID>
    <ID>ArgumentListWrapping:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$("CREATE INDEX IF NOT EXISTS index_entry_tag_cross_ref_tagId ON entry_tag_cross_ref(tagId)")</ID>
    <ID>ArgumentListWrapping:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$("CREATE INDEX IF NOT EXISTS index_vault_entries_isFavorite ON vault_entries(isFavorite)")</ID>
    <ID>ArgumentListWrapping:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$("CREATE INDEX IF NOT EXISTS index_vault_entries_modifiedAt ON vault_entries(modifiedAt)")</ID>
    <ID>ArgumentListWrapping:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$("CREATE INDEX IF NOT EXISTS index_vault_registry_isDefault ON vault_registry(isDefault)")</ID>
    <ID>ArgumentListWrapping:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$("CREATE INDEX IF NOT EXISTS index_vault_registry_storageStrategy ON vault_registry(storageStrategy)")</ID>
    <ID>ArgumentListWrapping:ApplyCasingUseCaseTest.kt$ApplyCasingUseCaseTest$("First part should be uppercase", firstPart == firstPart.uppercase())</ID>
    <ID>ArgumentListWrapping:ApplyCasingUseCaseTest.kt$ApplyCasingUseCaseTest$("Results should be consistent for mode $mode", result1, result2)</ID>
    <ID>ArgumentListWrapping:EntropyCalculatorTest.kt$EntropyCalculatorTest$("Entropy should increase with length", entropies[i] &lt; entropies[i + 1])</ID>
    <ID>ArgumentListWrapping:EntropyCalculatorTest.kt$EntropyCalculatorTest$("Longer password should have higher entropy", longEntropy &gt; shortEntropy)</ID>
    <ID>ArgumentListWrapping:EntropyCalculatorTest.kt$EntropyCalculatorTest$("More words should increase entropy", entropy4 &lt; entropy6 &amp;&amp; entropy6 &lt; entropy8)</ID>
    <ID>ArgumentListWrapping:EntropyCalculatorTest.kt$EntropyCalculatorTest$("Strong password should have &gt; 100 bits entropy", entropy &gt; 100.0)</ID>
    <ID>ArgumentListWrapping:GeneratorViewModel.kt$GeneratorViewModel$(emptyList())</ID>
    <ID>ArgumentListWrapping:GeneratorViewModel.kt$GeneratorViewModel$(null)</ID>
    <ID>ArgumentListWrapping:GoogleDriveProvider.kt$GoogleDriveProvider$(Dispatchers.IO)</ID>
    <ID>ArgumentListWrapping:HistoryScreen.kt$("Cette action supprimera tous les mots de passe de l'historique. Cette action est irréversible.")</ID>
    <ID>ArgumentListWrapping:LeetSpeakGeneratorTest.kt$LeetSpeakGeneratorTest$("First characters should vary", firstChars.size &gt;= 5)</ID>
    <ID>ArgumentListWrapping:LeetSpeakGeneratorTest.kt$LeetSpeakGeneratorTest$("Generated passwords should be mostly unique", passwords.size &gt;= 90)</ID>
    <ID>ArgumentListWrapping:LeetSpeakGeneratorTest.kt$LeetSpeakGeneratorTest$("Leet substitution rate should be reasonable (10-80%)", leetRate in 0.1..0.8)</ID>
    <ID>ArgumentListWrapping:LeetSpeakGeneratorTest.kt$LeetSpeakGeneratorTest$("Should contain common leet substitutions", foundLeetChars.size &gt;= 3)</ID>
    <ID>ArgumentListWrapping:LeetSpeakGeneratorTest.kt$LeetSpeakGeneratorTest$("Should maintain some letters for readability", letterRate &gt;= 0.2)</ID>
    <ID>ArgumentListWrapping:PassphraseGeneratorTest.kt$PassphraseGeneratorTest$("All words should be lowercase", result, result.lowercase())</ID>
    <ID>ArgumentListWrapping:PassphraseGeneratorTest.kt$PassphraseGeneratorTest$("Character should be letter or space", char.isLetter() || char == ' ')</ID>
    <ID>ArgumentListWrapping:PassphraseGeneratorTest.kt$PassphraseGeneratorTest$("Failed for dictionary $dictionary", wordCount, words.size)</ID>
    <ID>ArgumentListWrapping:PassphraseGeneratorTest.kt$PassphraseGeneratorTest$("Generated passphrases should be mostly unique", passphrases.size &gt;= 45)</ID>
    <ID>ArgumentListWrapping:PassphraseGeneratorTest.kt$PassphraseGeneratorTest$("Separator count should be word count - 1", wordCount - 1, result.count { it == ' ' })</ID>
    <ID>ArgumentListWrapping:PassphraseGeneratorTest.kt$PassphraseGeneratorTest$("Single word should not contain spaces", result.contains(" "))</ID>
    <ID>ArgumentListWrapping:PasswordAnalyzer.kt$PasswordAnalyzer$(entropy, length, uniqueChars, sequentialPatterns.isNotEmpty(), commonWords.isNotEmpty())</ID>
    <ID>ArgumentListWrapping:PasswordHistoryDao.kt$PasswordHistoryDao$("DELETE FROM password_history WHERE id IN (SELECT id FROM password_history ORDER BY timestamp ASC LIMIT :count)")</ID>
    <ID>ArgumentListWrapping:SecuritySettingsScreen.kt$("Êtes-vous sûr de vouloir supprimer toutes les clés de chiffrement ? Cette action est irréversible.")</ID>
    <ID>ArgumentListWrapping:SyllablesGeneratorTest.kt$SyllablesGeneratorTest$("Character $char should be in allowed sets", char.lowercaseChar() in allChars)</ID>
    <ID>ArgumentListWrapping:SyllablesGeneratorTest.kt$SyllablesGeneratorTest$("Consonant/vowel ratio should be balanced", ratio in 0.5..3.0)</ID>
    <ID>ArgumentListWrapping:SyllablesGeneratorTest.kt$SyllablesGeneratorTest$("Generated passwords should be mostly unique", passwords.size &gt;= 90)</ID>
    <ID>ArgumentListWrapping:SyncInitializer.kt$SyncInitializer$(TAG, "Loaded sync config: enabled=${config.enabled}, provider=${config.providerType}, autoSync=${config.autoSync}")</ID>
    <ID>ArgumentListWrapping:SyncSettingsScreen.kt$SyncSettingsViewModel$("SyncSettingsViewModel", "Enabling auto-sync with interval: ${_uiState.value.config.syncInterval}")</ID>
    <ID>ArgumentListWrapping:VaultEntryDao.kt$VaultEntryDao$("SELECT * FROM vault_entries WHERE vaultId = :vaultId AND passwordExpiresAt &gt; 0 AND passwordExpiresAt &lt; :now ORDER BY passwordExpiresAt ASC")</ID>
    <ID>ArgumentListWrapping:VaultEntryDao.kt$VaultEntryDao$("SELECT * FROM vault_entries WHERE vaultId = :vaultId AND passwordStrength &lt; :threshold ORDER BY passwordStrength ASC")</ID>
    <ID>ArgumentListWrapping:VaultEntryDao.kt$VaultEntryDao$("SELECT * FROM vault_entries WHERE vaultId = :vaultId AND requiresPasswordChange = 1 ORDER BY modifiedAt DESC")</ID>
    <ID>ArgumentListWrapping:VaultFileManager.kt$VaultFileManager$("Use createVaultFileToUri for custom paths - this returns Uri, not File")</ID>
    <ID>ArgumentListWrapping:VaultManagerScreen.kt$("Are you sure you want to delete \"$vaultName\"? This action cannot be undone and all data will be permanently lost.")</ID>
    <ID>ArgumentListWrapping:VaultManagerScreen.kt$("Your vaults will be migrated to the new file-based storage system. This is a one-time operation and may take a few moments.")</ID>
    <ID>ArgumentListWrapping:VaultManagerViewModel.kt$VaultManagerViewModel$("VaultManagerVM", "❌ Failed to save biometric for vault $vaultId: ${error.message}", error)</ID>
    <ID>BlockCommentInitialStarAlignment:NavGraph.kt$/* composable(Screen.CreateVault.route) { CreateVaultScreen( onVaultCreated = { vaultId -&gt; // Après création, aller directement à la liste (vault déjà déverrouillé) navController.navigate(Screen.VaultList.createRoute(vaultId)) { // Nettoyer le backstack popUpTo(Screen.VaultSelector.route) { inclusive = false } } }, onBackClick = { navController.popBackStack() } ) } */</ID>
    <ID>BlockCommentInitialStarAlignment:NavGraph.kt$/* composable(Screen.VaultSelector.route) { VaultSelectorScreen( onVaultSelected = { vault -&gt; navController.navigate(Screen.UnlockVault.createRoute(vault.id)) }, onCreateVault = { navController.navigate(Screen.CreateVault.route) }, onNavigateToGenerator = { navController.navigate(Screen.Generator.route) } ) } */</ID>
    <ID>BlockCommentInitialStarAlignment:OneDriveProvider.kt$OneDriveProvider$/* suspendCancellableCoroutine { continuation -&gt; authCallback = { success -&gt; if (continuation.isActive) { continuation.resume(success) } } // Créer MSAL configuration val msalConfig = PublicClientApplication.create( context, R.raw.msal_config // Fichier de configuration MSAL ) // Acquérir le token msalConfig.acquireToken( activity, SCOPES, object : AuthenticationCallback { override fun onSuccess(authenticationResult: IAuthenticationResult) { accessToken = authenticationResult.accessToken Log.d(TAG, "Authentication successful") // Initialiser le dossier viewModelScope.launch { ensureFolder() authCallback?.invoke(true) } } override fun onError(exception: MsalException?) { Log.e(TAG, "Authentication failed", exception) authCallback?.invoke(false) } override fun onCancel() { Log.d(TAG, "Authentication cancelled") authCallback?.invoke(false) } } ) } */</ID>
    <ID>BlockCommentInitialStarAlignment:PCloudProvider.kt$PCloudProvider$/* ORIGINAL CODE - Disabled temporarily // Enregistrer le callback OAuth auprès du gestionnaire global OAuthCallbackManager.registerCallback(CloudProviderType.PCLOUD) { uri -&gt; handleOAuthCallback(uri) } suspendCancellableCoroutine { continuation -&gt; authCallback = { success -&gt; if (continuation.isActive) { // Désenregistrer le callback après utilisation OAuthCallbackManager.unregisterCallback(CloudProviderType.PCLOUD) continuation.resume(success) } } // Construire l'URL d'autorisation val authUrl = Uri.parse(region.authUrl).buildUpon() .appendQueryParameter("client_id", appKey) .appendQueryParameter("response_type", "code") .appendQueryParameter("redirect_uri", REDIRECT_URI) .build() Log.d(TAG, "Opening OAuth URL: $authUrl") // Ouvrir le navigateur pour OAuth val intent = Intent(Intent.ACTION_VIEW, authUrl) activity.startActivity(intent) // Le callback sera appelé depuis handleOAuthCallback() via OAuthCallbackManager } */</ID>
    <ID>BlockCommentInitialStarAlignment:ProtonDriveProvider.kt$ProtonDriveProvider$/* ORIGINAL CODE - Disabled temporarily // Enregistrer le callback OAuth auprès du gestionnaire global OAuthCallbackManager.registerCallback(CloudProviderType.PROTON_DRIVE) { uri -&gt; handleOAuthCallback(uri) } suspendCancellableCoroutine { continuation -&gt; authCallback = { success -&gt; if (continuation.isActive) { // Désenregistrer le callback après utilisation OAuthCallbackManager.unregisterCallback(CloudProviderType.PROTON_DRIVE) continuation.resume(success) } } // Générer PKCE challenge generatePKCE() // Construire l'URL d'autorisation avec PKCE val authUrl = Uri.parse("$AUTH_BASE_URL/oauth/authorize").buildUpon() .appendQueryParameter("client_id", clientId) .appendQueryParameter("response_type", "code") .appendQueryParameter("redirect_uri", REDIRECT_URI) .appendQueryParameter("scope", SCOPE) .appendQueryParameter("code_challenge", codeChallenge) .appendQueryParameter("code_challenge_method", "S256") .build() Log.d(TAG, "Opening OAuth URL with PKCE: $authUrl") // Ouvrir le navigateur pour OAuth val intent = Intent(Intent.ACTION_VIEW, authUrl) activity.startActivity(intent) // Le callback sera appelé depuis handleOAuthCallback() via OAuthCallbackManager } */</ID>
    <ID>ComplexCondition:PasswordHealthScreen.kt$state.weakPasswords.isEmpty() &amp;&amp; state.reusedPasswords.isEmpty() &amp;&amp; state.compromisedPasswords.isEmpty() &amp;&amp; state.oldPasswords.isEmpty()</ID>
    <ID>ConstructorParameterNaming:VaultSessionManager.kt$VaultSessionManager.VaultSession$private val _vaultData: MutableStateFlow&lt;VaultData&gt;</ID>
    <ID>CyclomaticComplexMethod:BiometricManager.kt$BiometricManager$fun getErrorMessage(errorCode: Int): String</ID>
    <ID>CyclomaticComplexMethod:CreateVaultScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun CreateVaultScreen( onVaultCreated: (String) -&gt; Unit, onBackClick: () -&gt; Unit, viewModel: VaultViewModel = hiltViewModel() )</ID>
    <ID>CyclomaticComplexMethod:EntropyCalculator.kt$EntropyCalculator$private fun detectCharset(password: String): Set&lt;Char&gt;</ID>
    <ID>CyclomaticComplexMethod:EntryEditScreen.kt$@Composable private fun PasswordGeneratorDialog( onDismiss: () -&gt; Unit, onPasswordGenerated: (String) -&gt; Unit, viewModel: EntryViewModel )</ID>
    <ID>CyclomaticComplexMethod:EntryEditScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun EntryEditScreen( vaultId: String, entryId: String? = null, entryType: EntryType = EntryType.LOGIN, initialPassword: String? = null, onSaved: () -&gt; Unit, onBackClick: () -&gt; Unit, viewModel: EntryViewModel = hiltViewModel() )</ID>
    <ID>CyclomaticComplexMethod:EntryViewModel.kt$EntryViewModel$fun saveEntry()</ID>
    <ID>CyclomaticComplexMethod:GeneratorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun GeneratorScreen( onNavigateToHistory: () -&gt; Unit = {}, onNavigateToAnalyzer: () -&gt; Unit = {}, onNavigateToCustomPhrase: () -&gt; Unit = {}, onNavigateToSyncSettings: () -&gt; Unit = {}, onNavigateToSecurity: () -&gt; Unit = {}, onSaveToVault: ((String) -&gt; Unit)? = null, onNavigateToPresetManager: () -&gt; Unit = {}, vaultId: String? = null, viewModel: GeneratorViewModel = hiltViewModel(), initialMode: String? = null, autoGenerate: Boolean = false )</ID>
    <ID>CyclomaticComplexMethod:ImportExportRepository.kt$ImportExportRepository$suspend fun importFromCsv( vaultId: String, vaultKey: SecretKey, uri: Uri ): Result&lt;Int&gt;</ID>
    <ID>CyclomaticComplexMethod:SyncHistoryScreen.kt$@Composable private fun SyncHistoryEntryCard(entry: SyncHistoryEntry)</ID>
    <ID>CyclomaticComplexMethod:SyncSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SyncSettingsScreen( onNavigateBack: () -&gt; Unit, onNavigateToHistory: () -&gt; Unit = {}, onNavigateToAutofill: () -&gt; Unit = {}, onNavigateToSecurity: () -&gt; Unit = {}, viewModel: SyncSettingsViewModel = hiltViewModel() )</ID>
    <ID>CyclomaticComplexMethod:UnlockVaultScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun UnlockVaultScreen( vaultId: String, onVaultUnlocked: () -&gt; Unit, onBackClick: () -&gt; Unit, viewModel: UnlockVaultViewModel = hiltViewModel() )</ID>
    <ID>CyclomaticComplexMethod:VaultListScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun VaultListScreen( vaultId: String, onEntryClick: (String) -&gt; Unit, onAddEntry: (EntryType) -&gt; Unit, onSettingsClick: () -&gt; Unit, onLockClick: () -&gt; Unit, viewModel: VaultListViewModel = hiltViewModel() )</ID>
    <ID>CyclomaticComplexMethod:VaultManagerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun CreateVaultDialog( viewModel: VaultManagerViewModel, uiState: VaultManagerUiState, onDismiss: () -&gt; Unit, onCreate: (String, String, StorageStrategy, String?, Boolean, Boolean) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:VaultRegistryEntry.kt$VaultRegistryEntry$override fun equals(other: Any?): Boolean</ID>
    <ID>CyclomaticComplexMethod:VaultSessionManager.kt$VaultSessionManager$suspend fun unlockVault(vaultId: String, masterPassword: String): Result&lt;Unit&gt;</ID>
    <ID>CyclomaticComplexMethod:WebDAVConfigDialog.kt$@Composable fun WebDAVConfigDialog( onDismiss: () -&gt; Unit, onSave: (serverUrl: String, username: String, password: String, validateSSL: Boolean) -&gt; Unit, onTestConnection: (serverUrl: String, username: String, password: String, validateSSL: Boolean) -&gt; Unit, isTestingConnection: Boolean = false, testConnectionResult: TestConnectionResult? = null )</ID>
    <ID>EmptyFunctionBlock:CloudSyncRepository.kt$NoOpCloudSyncRepository${}</ID>
    <ID>EmptyFunctionBlock:WebDAVProvider.kt$WebDAVProvider.&lt;no name provided&gt;${}</ID>
    <ID>Filename:ShortcutManager.kt$com.julien.genpwdpro.presentation.shortcuts.ShortcutManager.kt</ID>
    <ID>ForbiddenPublicDataClass:AnalyzerScreen.kt$AnalyzerUiState</ID>
    <ID>ForbiddenPublicDataClass:AppLockManager.kt$LockTimeout</ID>
    <ID>ForbiddenPublicDataClass:AutofillSettingsScreen.kt$AutofillSettingsUiState</ID>
    <ID>ForbiddenPublicDataClass:BiometricManager.kt$BiometricResult$Error : BiometricResult</ID>
    <ID>ForbiddenPublicDataClass:BiometricManager.kt$BiometricResult$Success : BiometricResult</ID>
    <ID>ForbiddenPublicDataClass:CharacterSets.kt$CharacterSets$CharSets</ID>
    <ID>ForbiddenPublicDataClass:CloudProviderConfigDialog.kt$CloudProviderConfig$OneDrive : CloudProviderConfig</ID>
    <ID>ForbiddenPublicDataClass:CloudProviderConfigDialog.kt$CloudProviderConfig$PCloud : CloudProviderConfig</ID>
    <ID>ForbiddenPublicDataClass:CloudProviderConfigDialog.kt$CloudProviderConfig$ProtonDrive : CloudProviderConfig</ID>
    <ID>ForbiddenPublicDataClass:CloudProviderFactory.kt$ProviderConfig</ID>
    <ID>ForbiddenPublicDataClass:CloudProviderFactory.kt$ProviderInfo</ID>
    <ID>ForbiddenPublicDataClass:CustomPhraseGenerator.kt$WordListValidation</ID>
    <ID>ForbiddenPublicDataClass:CustomPhraseScreen.kt$CustomPhraseUiState</ID>
    <ID>ForbiddenPublicDataClass:DashboardViewModel.kt$DashboardUiState</ID>
    <ID>ForbiddenPublicDataClass:EncryptionManager.kt$EncryptedData</ID>
    <ID>ForbiddenPublicDataClass:EncryptionManager.kt$EncryptedDataEncoded</ID>
    <ID>ForbiddenPublicDataClass:EncryptionManager.kt$EncryptionMetadata</ID>
    <ID>ForbiddenPublicDataClass:EncryptionManager.kt$EncryptionMetadata$KdfMetadata</ID>
    <ID>ForbiddenPublicDataClass:EntryViewModel.kt$EntryUiState$Error : EntryUiState</ID>
    <ID>ForbiddenPublicDataClass:ExportImportUtils.kt$ExportData</ID>
    <ID>ForbiddenPublicDataClass:ExportImportUtils.kt$ExportPasswordData</ID>
    <ID>ForbiddenPublicDataClass:FolderEntity.kt$FolderEntity</ID>
    <ID>ForbiddenPublicDataClass:FolderManagementViewModel.kt$FolderNode</ID>
    <ID>ForbiddenPublicDataClass:FolderManagementViewModel.kt$FolderUiState$Error : FolderUiState</ID>
    <ID>ForbiddenPublicDataClass:FolderManagementViewModel.kt$FolderUiState$Success : FolderUiState</ID>
    <ID>ForbiddenPublicDataClass:GenPwdAutofillService.kt$AutofillCredentials</ID>
    <ID>ForbiddenPublicDataClass:GenPwdAutofillService.kt$AutofillFieldMetadata</ID>
    <ID>ForbiddenPublicDataClass:GenPwdAutofillService.kt$AutofillFieldsMetadata</ID>
    <ID>ForbiddenPublicDataClass:GeneratorViewModel.kt$GeneratorUiState</ID>
    <ID>ForbiddenPublicDataClass:ImportExportRepository.kt$ImportExportRepository$VaultExportData</ID>
    <ID>ForbiddenPublicDataClass:KeystoreManager.kt$EncryptedKeystoreData</ID>
    <ID>ForbiddenPublicDataClass:MainScreen.kt$DrawerNavItem</ID>
    <ID>ForbiddenPublicDataClass:OtpModels.kt$OtpConfig : Parcelable</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudBaseResponse</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudChecksumResponse</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudContent</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudFileMetadata</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudFileResponse</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudFolderMetadata</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudFolderResponse</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudStatResponse</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudTokenResponse</ID>
    <ID>ForbiddenPublicDataClass:PCloudProvider.kt$PCloudProvider$PCloudUserResponse</ID>
    <ID>ForbiddenPublicDataClass:PasswordAnalyzer.kt$PasswordAnalysis</ID>
    <ID>ForbiddenPublicDataClass:PasswordHealthViewModel.kt$CompromisedPasswordEntry</ID>
    <ID>ForbiddenPublicDataClass:PasswordHealthViewModel.kt$HealthStatistics</ID>
    <ID>ForbiddenPublicDataClass:PasswordHealthViewModel.kt$HealthUiState$Error : HealthUiState</ID>
    <ID>ForbiddenPublicDataClass:PasswordHealthViewModel.kt$HealthUiState$Success : HealthUiState</ID>
    <ID>ForbiddenPublicDataClass:PasswordHealthViewModel.kt$OldPasswordEntry</ID>
    <ID>ForbiddenPublicDataClass:PasswordHealthViewModel.kt$PasswordReference</ID>
    <ID>ForbiddenPublicDataClass:PasswordHealthViewModel.kt$ReusedPasswordGroup</ID>
    <ID>ForbiddenPublicDataClass:PasswordHealthViewModel.kt$WeakPasswordEntry</ID>
    <ID>ForbiddenPublicDataClass:PasswordHistoryEntity.kt$PasswordHistoryEntity</ID>
    <ID>ForbiddenPublicDataClass:PasswordResult.kt$PasswordResult</ID>
    <ID>ForbiddenPublicDataClass:PresetEntity.kt$PresetEntity</ID>
    <ID>ForbiddenPublicDataClass:PresetViewModel.kt$PresetUiState</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonBaseResponse</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonCreateShareRequest</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonDownloadUrlResponse</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonFile</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonFileResponse</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonFilesResponse</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonShare</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonShareResponse</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonSharesResponse</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonTokenResponse</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonUser</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonUserResponse</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonVolume</ID>
    <ID>ForbiddenPublicDataClass:ProtonDriveProvider.kt$ProtonDriveProvider$ProtonVolumesResponse</ID>
    <ID>ForbiddenPublicDataClass:ProviderCredentialManager.kt$OneDriveConfig</ID>
    <ID>ForbiddenPublicDataClass:ProviderCredentialManager.kt$PCloudConfig</ID>
    <ID>ForbiddenPublicDataClass:ProviderCredentialManager.kt$ProtonDriveConfig</ID>
    <ID>ForbiddenPublicDataClass:ProviderCredentialManager.kt$WebDAVConfig</ID>
    <ID>ForbiddenPublicDataClass:SecureNote.kt$SecureCard</ID>
    <ID>ForbiddenPublicDataClass:SecureNote.kt$SecureIdentity</ID>
    <ID>ForbiddenPublicDataClass:SecureNote.kt$SecureNote</ID>
    <ID>ForbiddenPublicDataClass:SecuritySettingsScreen.kt$SecuritySettingsUiState</ID>
    <ID>ForbiddenPublicDataClass:SessionManager.kt$SessionManager$SessionInfo</ID>
    <ID>ForbiddenPublicDataClass:Settings.kt$Settings</ID>
    <ID>ForbiddenPublicDataClass:SyncConfigDataStore.kt$SyncConfigDataStore$SyncConfigData</ID>
    <ID>ForbiddenPublicDataClass:SyncHistoryScreen.kt$SyncHistoryEntry</ID>
    <ID>ForbiddenPublicDataClass:SyncModels.kt$LocalSyncMetadata</ID>
    <ID>ForbiddenPublicDataClass:SyncModels.kt$SyncData</ID>
    <ID>ForbiddenPublicDataClass:SyncModels.kt$SyncEvent$ConflictDetected : SyncEvent</ID>
    <ID>ForbiddenPublicDataClass:SyncModels.kt$SyncEvent$Failed : SyncEvent</ID>
    <ID>ForbiddenPublicDataClass:SyncModels.kt$SyncEvent$ItemSynced : SyncEvent</ID>
    <ID>ForbiddenPublicDataClass:SyncModels.kt$SyncEvent$Progress : SyncEvent</ID>
    <ID>ForbiddenPublicDataClass:SyncModels.kt$SyncResult$Conflict : SyncResult</ID>
    <ID>ForbiddenPublicDataClass:SyncModels.kt$SyncResult$Error : SyncResult</ID>
    <ID>ForbiddenPublicDataClass:SyncPreferencesManager.kt$SyncStatistics</ID>
    <ID>ForbiddenPublicDataClass:SyncPreferencesManager.kt$WebDAVCredentials</ID>
    <ID>ForbiddenPublicDataClass:SyncProgressIndicator.kt$SyncProgressState$Downloading : SyncProgressState</ID>
    <ID>ForbiddenPublicDataClass:SyncProgressIndicator.kt$SyncProgressState$Error : SyncProgressState</ID>
    <ID>ForbiddenPublicDataClass:SyncProgressIndicator.kt$SyncProgressState$Success : SyncProgressState</ID>
    <ID>ForbiddenPublicDataClass:SyncProgressIndicator.kt$SyncProgressState$Uploading : SyncProgressState</ID>
    <ID>ForbiddenPublicDataClass:SyncSettingsScreen.kt$AuthenticationResult$Failure : AuthenticationResult</ID>
    <ID>ForbiddenPublicDataClass:SyncSettingsScreen.kt$AuthenticationResult$Success : AuthenticationResult</ID>
    <ID>ForbiddenPublicDataClass:SyncSettingsScreen.kt$SyncSettingsUiState</ID>
    <ID>ForbiddenPublicDataClass:SyncSettingsScreen.kt$UiSyncConfig</ID>
    <ID>ForbiddenPublicDataClass:SyncStatus.kt$CloudFileMetadata</ID>
    <ID>ForbiddenPublicDataClass:SyncStatus.kt$StorageQuota</ID>
    <ID>ForbiddenPublicDataClass:SyncStatus.kt$SyncConfig</ID>
    <ID>ForbiddenPublicDataClass:SyncStatus.kt$SyncMetadata</ID>
    <ID>ForbiddenPublicDataClass:SyncStatus.kt$SyncResult$Conflict : SyncResult</ID>
    <ID>ForbiddenPublicDataClass:SyncStatus.kt$SyncResult$Error : SyncResult</ID>
    <ID>ForbiddenPublicDataClass:SyncStatus.kt$VaultSyncData</ID>
    <ID>ForbiddenPublicDataClass:TagEntity.kt$EntryTagCrossRef</ID>
    <ID>ForbiddenPublicDataClass:TagEntity.kt$TagEntity</ID>
    <ID>ForbiddenPublicDataClass:TagManagementViewModel.kt$TagStatistic</ID>
    <ID>ForbiddenPublicDataClass:TagManagementViewModel.kt$TagUiState$Error : TagUiState</ID>
    <ID>ForbiddenPublicDataClass:TagManagementViewModel.kt$TagUiState$Success : TagUiState</ID>
    <ID>ForbiddenPublicDataClass:TagManagementViewModel.kt$TagUiState$SuccessWithStats : TagUiState</ID>
    <ID>ForbiddenPublicDataClass:TotpGenerator.kt$TotpGenerator$TotpConfig</ID>
    <ID>ForbiddenPublicDataClass:TotpGenerator.kt$TotpGenerator$TotpResult</ID>
    <ID>ForbiddenPublicDataClass:UnlockVaultViewModel.kt$UnlockVaultUiState$Error : UnlockVaultUiState</ID>
    <ID>ForbiddenPublicDataClass:UnlockVaultViewModel.kt$UnlockVaultUiState$Unlocked : UnlockVaultUiState</ID>
    <ID>ForbiddenPublicDataClass:VaultCryptoManager.kt$VaultCryptoManager$Argon2Params</ID>
    <ID>ForbiddenPublicDataClass:VaultCryptoManager.kt$VaultCryptoManager$VaultCreationResult</ID>
    <ID>ForbiddenPublicDataClass:VaultData.kt$VaultData</ID>
    <ID>ForbiddenPublicDataClass:VaultData.kt$VaultFile</ID>
    <ID>ForbiddenPublicDataClass:VaultData.kt$VaultMetadata</ID>
    <ID>ForbiddenPublicDataClass:VaultData.kt$VaultStatistics</ID>
    <ID>ForbiddenPublicDataClass:VaultEntity.kt$VaultEntity</ID>
    <ID>ForbiddenPublicDataClass:VaultEntryDao.kt$PasswordStrengthStats</ID>
    <ID>ForbiddenPublicDataClass:VaultEntryEntity.kt$VaultEntryEntity</ID>
    <ID>ForbiddenPublicDataClass:VaultFileHeader.kt$VaultFileHeader</ID>
    <ID>ForbiddenPublicDataClass:VaultListViewModel.kt$VaultListUiState$Error : VaultListUiState</ID>
    <ID>ForbiddenPublicDataClass:VaultListViewModel.kt$VaultListUiState$Success : VaultListUiState</ID>
    <ID>ForbiddenPublicDataClass:VaultManagerViewModel.kt$VaultManagerUiState</ID>
    <ID>ForbiddenPublicDataClass:VaultMigrationManager.kt$VaultMigrationManager$MigrationProgress</ID>
    <ID>ForbiddenPublicDataClass:VaultMigrationManager.kt$VaultMigrationManager.MigrationResult$Error : MigrationResult</ID>
    <ID>ForbiddenPublicDataClass:VaultMigrationManager.kt$VaultMigrationManager.MigrationResult$Success : MigrationResult</ID>
    <ID>ForbiddenPublicDataClass:VaultRegistryEntry.kt$VaultRegistryEntry</ID>
    <ID>ForbiddenPublicDataClass:VaultRepository.kt$VaultRepository$DecryptedEntry</ID>
    <ID>ForbiddenPublicDataClass:VaultRepository.kt$VaultRepository$DecryptedPreset</ID>
    <ID>ForbiddenPublicDataClass:VaultRepository.kt$VaultRepository$VaultStatistics</ID>
    <ID>ForbiddenPublicDataClass:VaultSessionManager.kt$VaultSessionManager$VaultSession</ID>
    <ID>ForbiddenPublicDataClass:VaultStartupLocker.kt$VaultStartupLocker$StartupLockResult</ID>
    <ID>ForbiddenPublicDataClass:VaultStatistics.kt$VaultStatistics</ID>
    <ID>ForbiddenPublicDataClass:VaultSyncViewModel.kt$ConflictData</ID>
    <ID>ForbiddenPublicDataClass:VaultSyncViewModel.kt$VaultSyncUiState</ID>
    <ID>ForbiddenPublicDataClass:VaultViewModel.kt$VaultUiState$Error : VaultUiState</ID>
    <ID>ForbiddenPublicDataClass:VaultViewModel.kt$VaultUiState$Success : VaultUiState</ID>
    <ID>ForbiddenPublicDataClass:VaultViewModel.kt$VaultUiState$VaultCreated : VaultUiState</ID>
    <ID>ForbiddenPublicDataClass:VaultViewModel.kt$VaultUiState$VaultUnlocked : VaultUiState</ID>
    <ID>ForbiddenPublicDataClass:WebDAVConfigDialog.kt$TestConnectionResult$Failure : TestConnectionResult</ID>
    <ID>ForbiddenPublicDataClass:WebDAVConfigDialog.kt$TestConnectionResult$Success : TestConnectionResult</ID>
    <ID>ForbiddenPublicDataClass:WindowSizeUtils.kt$ScreenConfig</ID>
    <ID>FunctionOnlyReturningConstant:AutofillRepository.kt$AutofillRepository$suspend fun isAutofillEnabled(): Boolean</ID>
    <ID>FunctionOnlyReturningConstant:IntentSanitizer.kt$IntentSanitizer$fun redact(value: String?): String</ID>
    <ID>ImplicitDefaultLocale:SyncHistoryScreen.kt$String.format("%.2f MB", bytes / (1024.0 * 1024.0))</ID>
    <ID>ImplicitDefaultLocale:VaultManagerScreen.kt$String.format("%.1f MB", bytes / (1024.0 * 1024.0))</ID>
    <ID>ImplicitDefaultLocale:VaultSyncViewModel.kt$VaultSyncViewModel$String.format("%.2f GB", bytes / (1024.0 * 1024.0 * 1024.0))</ID>
    <ID>ImportOrdering:AnalyzerScreen.kt$import androidx.compose.foundation.background import androidx.compose.foundation.layout.* import androidx.compose.foundation.rememberScrollState import androidx.compose.foundation.shape.RoundedCornerShape import androidx.compose.foundation.text.KeyboardActions import androidx.compose.foundation.text.KeyboardOptions import androidx.compose.foundation.verticalScroll import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.* import androidx.compose.material3.* import androidx.compose.runtime.* import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.text.font.FontWeight import androidx.compose.ui.text.input.ImeAction import androidx.compose.ui.text.input.PasswordVisualTransformation import androidx.compose.ui.text.input.VisualTransformation import androidx.compose.ui.unit.dp import androidx.hilt.navigation.compose.hiltViewModel import androidx.lifecycle.ViewModel import androidx.lifecycle.viewModelScope import com.julien.genpwdpro.domain.analyzer.PasswordAnalysis import com.julien.genpwdpro.domain.analyzer.PasswordAnalyzer import com.julien.genpwdpro.domain.analyzer.PasswordAnalysisStrength import dagger.hilt.android.lifecycle.HiltViewModel import kotlinx.coroutines.flow.MutableStateFlow import kotlinx.coroutines.flow.StateFlow import kotlinx.coroutines.flow.asStateFlow import kotlinx.coroutines.flow.update import kotlinx.coroutines.launch import javax.inject.Inject</ID>
    <ID>ImportOrdering:AutofillRepository.kt$import android.app.PendingIntent import android.content.Context import android.content.Intent import android.os.Build import android.service.autofill.Dataset import android.service.autofill.FillResponse import android.view.autofill.AutofillValue import android.widget.RemoteViews import androidx.annotation.RequiresApi import com.julien.genpwdpro.R import com.julien.genpwdpro.core.ipc.IntentSanitizer import com.julien.genpwdpro.data.local.entity.VaultRegistryEntry import com.julien.genpwdpro.data.local.preferences.SettingsDataStore import com.julien.genpwdpro.data.local.entity.VaultEntryEntity import com.julien.genpwdpro.data.local.entity.password import com.julien.genpwdpro.data.local.entity.title import com.julien.genpwdpro.data.local.entity.url import com.julien.genpwdpro.data.local.entity.username import com.julien.genpwdpro.data.models.GenerationMode import com.julien.genpwdpro.data.models.PasswordResult import com.julien.genpwdpro.data.models.Settings import com.julien.genpwdpro.data.repository.PasswordHistoryRepository import com.julien.genpwdpro.domain.session.VaultSessionManager import com.julien.genpwdpro.presentation.MainActivity import dagger.hilt.android.qualifiers.ApplicationContext import kotlinx.coroutines.flow.Flow import kotlinx.coroutines.flow.first import kotlinx.coroutines.flow.map import javax.inject.Inject import javax.inject.Singleton</ID>
    <ID>ImportOrdering:ClipboardUtils.kt$import android.content.Context import android.os.Handler import android.os.Looper import androidx.annotation.VisibleForTesting import com.julien.genpwdpro.core.clipboard.ClipboardSanitizer import com.julien.genpwdpro.R import com.julien.genpwdpro.core.crypto.SecretUtils import com.julien.genpwdpro.data.secure.SensitiveActionPreferences</ID>
    <ID>ImportOrdering:DashboardScreen.kt$import androidx.compose.animation.ExperimentalAnimationApi import androidx.compose.animation.AnimatedContent import androidx.compose.animation.fadeIn import androidx.compose.animation.fadeOut import androidx.compose.animation.with import androidx.compose.animation.core.Spring import androidx.compose.animation.core.spring import androidx.compose.foundation.layout.* import androidx.compose.foundation.lazy.LazyColumn import androidx.compose.foundation.lazy.items import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.Add import androidx.compose.material.icons.filled.Build import androidx.compose.material.icons.filled.CheckCircle import androidx.compose.material.icons.filled.ContentCopy import androidx.compose.material.icons.filled.Home import androidx.compose.material.icons.filled.History import androidx.compose.material.icons.filled.Key import androidx.compose.material.icons.filled.Lock import androidx.compose.material.icons.filled.Refresh import androidx.compose.material.icons.filled.Security import androidx.compose.material.icons.filled.Storage import androidx.compose.material3.* import androidx.compose.runtime.* import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.platform.LocalContext import androidx.compose.ui.text.font.FontWeight import androidx.compose.ui.unit.dp import androidx.fragment.app.FragmentActivity import androidx.hilt.navigation.compose.hiltViewModel import com.julien.genpwdpro.R import com.julien.genpwdpro.data.local.entity.VaultRegistryEntry import com.julien.genpwdpro.presentation.security.BiometricGate import com.julien.genpwdpro.presentation.util.ClipboardUtils import kotlinx.coroutines.launch import kotlin.math.max</ID>
    <ID>ImportOrdering:DatabaseOpenHelperFactoryProvider.kt$import android.content.Context import android.os.Handler import android.os.Looper import android.util.Base64 import android.util.Log import android.widget.Toast import androidx.sqlite.db.SupportSQLiteOpenHelper import com.julien.genpwdpro.R import com.julien.genpwdpro.data.secure.SecurePrefs import com.julien.genpwdpro.security.EncryptedKeystoreData import com.julien.genpwdpro.security.KeystoreManager import com.julien.genpwdpro.security.KeystoreAlias import dagger.hilt.android.qualifiers.ApplicationContext import java.security.SecureRandom import javax.inject.Inject import javax.inject.Singleton import net.sqlcipher.database.SQLiteDatabase import net.sqlcipher.database.SQLiteDatabaseHook import net.sqlcipher.database.SupportFactory</ID>
    <ID>ImportOrdering:EncryptionManager.kt$import android.util.Base64 import java.security.SecureRandom import javax.crypto.Cipher import javax.crypto.KeyGenerator import javax.crypto.SecretKey import javax.crypto.spec.GCMParameterSpec import javax.crypto.spec.SecretKeySpec import javax.inject.Inject import com.julien.genpwdpro.core.crypto.SecretUtils</ID>
    <ID>ImportOrdering:EncryptionManagerTest.kt$import java.security.SecureRandom import javax.crypto.AEADBadTagException import kotlin.test.assertContentEquals import kotlin.test.assertFailsWith import org.junit.Test</ID>
    <ID>ImportOrdering:FileVaultRepository.kt$import com.julien.genpwdpro.core.log.SafeLog import androidx.fragment.app.FragmentActivity import com.julien.genpwdpro.data.local.dao.VaultRegistryDao import com.julien.genpwdpro.data.local.entity.* import com.julien.genpwdpro.domain.model.VaultStatistics import com.julien.genpwdpro.domain.session.VaultSessionManager import com.julien.genpwdpro.security.BiometricVaultManager import kotlinx.coroutines.flow.Flow import kotlinx.coroutines.flow.combine import kotlinx.coroutines.flow.map import javax.inject.Inject import javax.inject.Named import javax.inject.Singleton</ID>
    <ID>ImportOrdering:GeneratorScreen.kt$import androidx.compose.foundation.layout.* import androidx.compose.foundation.lazy.LazyColumn import androidx.compose.foundation.lazy.items import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.* import androidx.compose.material3.* import androidx.compose.runtime.* import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.platform.LocalContext import androidx.compose.ui.text.font.FontWeight import androidx.compose.ui.unit.dp import androidx.hilt.navigation.compose.hiltViewModel import androidx.fragment.app.FragmentActivity import com.julien.genpwdpro.R import com.julien.genpwdpro.data.models.GenerationMode import com.julien.genpwdpro.presentation.components.* import com.julien.genpwdpro.presentation.security.BiometricGate import com.julien.genpwdpro.presentation.util.ClipboardUtils import kotlinx.coroutines.launch</ID>
    <ID>ImportOrdering:GeneratorViewModel.kt$import androidx.lifecycle.ViewModel import androidx.lifecycle.viewModelScope import com.julien.genpwdpro.data.models.* import com.julien.genpwdpro.data.repository.PasswordHistoryRepository import com.julien.genpwdpro.data.local.preferences.SettingsDataStore import com.julien.genpwdpro.data.secure.SensitiveActionPreferences import com.julien.genpwdpro.domain.usecases.GeneratePasswordUseCase import dagger.hilt.android.lifecycle.HiltViewModel import kotlinx.coroutines.flow.MutableStateFlow import kotlinx.coroutines.flow.StateFlow import kotlinx.coroutines.flow.asStateFlow import kotlinx.coroutines.flow.update import kotlinx.coroutines.launch import javax.inject.Inject</ID>
    <ID>ImportOrdering:HistoryScreen.kt$import androidx.compose.foundation.layout.* import androidx.compose.foundation.lazy.LazyColumn import androidx.compose.foundation.lazy.items import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.* import androidx.compose.material3.* import androidx.compose.runtime.* import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.platform.LocalContext import androidx.compose.ui.text.font.FontWeight import androidx.compose.ui.unit.dp import androidx.hilt.navigation.compose.hiltViewModel import com.julien.genpwdpro.presentation.components.PasswordCard import com.julien.genpwdpro.presentation.util.ClipboardUtils import com.julien.genpwdpro.presentation.security.BiometricGate import androidx.fragment.app.FragmentActivity import kotlinx.coroutines.launch import com.julien.genpwdpro.R</ID>
    <ID>ImportOrdering:MainActivity.kt$import android.content.Intent import android.net.Uri import android.os.Bundle import android.util.Log import android.view.View import androidx.activity.compose.setContent import androidx.compose.foundation.layout.fillMaxSize import androidx.compose.material3.MaterialTheme import androidx.compose.material3.Surface import androidx.compose.runtime.DisposableEffect import androidx.compose.ui.Modifier import androidx.fragment.app.FragmentActivity import androidx.lifecycle.lifecycleScope import androidx.navigation.NavController import androidx.navigation.compose.rememberNavController import androidx.core.view.ViewCompat import androidx.core.view.WindowCompat import com.julien.genpwdpro.core.ipc.IntentSanitizer import com.julien.genpwdpro.data.sync.oauth.OAuthCallbackManager import com.julien.genpwdpro.domain.session.AppLifecycleObserver import com.julien.genpwdpro.domain.session.SessionManager import com.julien.genpwdpro.domain.session.VaultSessionManager import com.julien.genpwdpro.domain.session.VaultStartupLocker import com.julien.genpwdpro.presentation.extensions.setSecureScreen import com.julien.genpwdpro.presentation.navigation.Screen import com.julien.genpwdpro.presentation.navigation.SecureRoutes import com.julien.genpwdpro.presentation.theme.GenPwdProTheme import dagger.hilt.android.AndroidEntryPoint import kotlinx.coroutines.launch import kotlinx.coroutines.runBlocking import javax.inject.Inject</ID>
    <ID>ImportOrdering:MainScreen.kt$import androidx.compose.foundation.layout.* import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.* import androidx.compose.material3.* import androidx.compose.runtime.* import androidx.compose.ui.Modifier import androidx.compose.ui.platform.LocalContext import androidx.compose.ui.unit.dp import androidx.hilt.navigation.compose.hiltViewModel import androidx.navigation.NavDestination.Companion.hierarchy import androidx.navigation.NavGraph.Companion.findStartDestination import androidx.navigation.compose.currentBackStackEntryAsState import androidx.navigation.NavHostController import com.julien.genpwdpro.presentation.navigation.AppNavGraph import com.julien.genpwdpro.presentation.navigation.Screen import com.julien.genpwdpro.domain.session.SessionManager import com.julien.genpwdpro.domain.session.VaultSessionManager import dagger.hilt.android.EntryPointAccessors import kotlinx.coroutines.launch</ID>
    <ID>ImportOrdering:NavGraph.kt$import androidx.compose.runtime.Composable import androidx.navigation.NavHostController import androidx.navigation.NavType import androidx.navigation.compose.NavHost import androidx.navigation.compose.composable import androidx.navigation.navArgument import com.julien.genpwdpro.data.local.entity.EntryType import com.julien.genpwdpro.presentation.screens.GeneratorScreen import com.julien.genpwdpro.presentation.screens.analyzer.AnalyzerScreen import com.julien.genpwdpro.presentation.screens.customphrase.CustomPhraseScreen import com.julien.genpwdpro.presentation.screens.history.HistoryScreen import com.julien.genpwdpro.presentation.screens.sync.SyncSettingsScreen import com.julien.genpwdpro.presentation.vault.* import com.julien.genpwdpro.presentation.dashboard.DashboardScreen</ID>
    <ID>ImportOrdering:Navigation.kt$import androidx.compose.runtime.Composable import androidx.compose.runtime.collectAsState import androidx.compose.runtime.getValue import androidx.hilt.navigation.compose.hiltViewModel import androidx.lifecycle.ViewModel import androidx.lifecycle.viewModelScope import androidx.navigation.NavHostController import androidx.navigation.compose.NavHost import androidx.navigation.compose.composable import androidx.navigation.compose.rememberNavController import com.julien.genpwdpro.data.local.preferences.SettingsDataStore import com.julien.genpwdpro.presentation.onboarding.OnboardingScreen import com.julien.genpwdpro.presentation.screens.GeneratorScreen import com.julien.genpwdpro.presentation.screens.analyzer.AnalyzerScreen import com.julien.genpwdpro.presentation.screens.autofill.AutofillSettingsScreen import com.julien.genpwdpro.presentation.screens.customphrase.CustomPhraseScreen import com.julien.genpwdpro.presentation.screens.history.HistoryScreen import com.julien.genpwdpro.presentation.screens.security.SecuritySettingsScreen import com.julien.genpwdpro.presentation.screens.sync.SyncSettingsScreen import com.julien.genpwdpro.presentation.screens.sync.SyncHistoryScreen import dagger.hilt.android.lifecycle.HiltViewModel import kotlinx.coroutines.flow.SharingStarted import kotlinx.coroutines.flow.stateIn import kotlinx.coroutines.launch import javax.inject.Inject</ID>
    <ID>ImportOrdering:OtpUriParser.kt$import android.net.Uri import java.net.URLDecoder import java.nio.charset.StandardCharsets import java.util.Locale import org.apache.commons.codec.binary.Base32</ID>
    <ID>ImportOrdering:PCloudProvider.kt$import android.app.Activity import android.content.Intent import android.net.Uri import android.util.Log import com.google.gson.annotations.SerializedName import com.julien.genpwdpro.data.sync.CloudProvider import com.julien.genpwdpro.data.sync.models.CloudFileMetadata import com.julien.genpwdpro.data.sync.models.CloudProviderType import com.julien.genpwdpro.data.sync.models.StorageQuota import com.julien.genpwdpro.data.sync.models.VaultSyncData // Temporarily disabled due to OAuthCallbackManager compilation error // import com.julien.genpwdpro.data.sync.oauth.OAuthCallbackManager import kotlinx.coroutines.Dispatchers import kotlinx.coroutines.suspendCancellableCoroutine import kotlinx.coroutines.withContext import okhttp3.MediaType.Companion.toMediaType import okhttp3.MultipartBody import okhttp3.OkHttpClient import okhttp3.RequestBody.Companion.asRequestBody import okhttp3.ResponseBody import okhttp3.logging.HttpLoggingInterceptor import retrofit2.Response import retrofit2.Retrofit import retrofit2.converter.gson.GsonConverterFactory import retrofit2.http.* import java.io.File import java.util.concurrent.TimeUnit import kotlin.coroutines.resume</ID>
    <ID>ImportOrdering:PasswordWidget.kt$import android.app.KeyguardManager import android.app.PendingIntent import android.appwidget.AppWidgetManager import android.appwidget.AppWidgetProvider import android.content.ComponentName import android.content.Context import android.content.Intent import android.content.SharedPreferences import android.os.Build import android.os.UserManager import com.julien.genpwdpro.core.log.SafeLog import android.view.View import android.widget.RemoteViews import android.widget.Toast import androidx.core.content.getSystemService import androidx.security.crypto.EncryptedSharedPreferences import androidx.security.crypto.MasterKey import com.julien.genpwdpro.R import com.julien.genpwdpro.core.ipc.IntentSanitizer import com.julien.genpwdpro.data.secure.SecurePrefs import com.julien.genpwdpro.data.secure.SensitiveActionPreferences import com.julien.genpwdpro.data.models.GenerationMode import com.julien.genpwdpro.data.models.Settings import com.julien.genpwdpro.domain.generators.SyllablesGenerator import com.julien.genpwdpro.domain.usecases.ApplyCasingUseCase import com.julien.genpwdpro.domain.usecases.PlaceCharactersUseCase import com.julien.genpwdpro.presentation.util.ClipboardUtils import com.julien.genpwdpro.presentation.widget.storage.WidgetDeviceStorage import kotlinx.coroutines.CoroutineScope import kotlinx.coroutines.Dispatchers import kotlinx.coroutines.launch</ID>
    <ID>ImportOrdering:ProtonDriveProvider.kt$import android.app.Activity import android.content.Intent import android.net.Uri import android.util.Base64 import android.util.Log import com.google.gson.JsonObject import com.google.gson.JsonParser import com.google.gson.annotations.SerializedName import com.julien.genpwdpro.data.sync.CloudProvider import com.julien.genpwdpro.data.sync.models.CloudFileMetadata import com.julien.genpwdpro.data.sync.models.CloudProviderType import com.julien.genpwdpro.data.sync.models.StorageQuota import com.julien.genpwdpro.data.sync.models.VaultSyncData // Temporarily disabled due to OAuthCallbackManager compilation error // import com.julien.genpwdpro.data.sync.oauth.OAuthCallbackManager import kotlinx.coroutines.Dispatchers import kotlinx.coroutines.suspendCancellableCoroutine import kotlinx.coroutines.withContext import okhttp3.MediaType.Companion.toMediaType import okhttp3.MultipartBody import okhttp3.OkHttpClient import okhttp3.Request import okhttp3.RequestBody.Companion.asRequestBody import okhttp3.RequestBody.Companion.toRequestBody import okhttp3.logging.HttpLoggingInterceptor import retrofit2.Retrofit import retrofit2.converter.gson.GsonConverterFactory import retrofit2.http.* import java.io.File import java.security.MessageDigest import java.security.SecureRandom import java.util.concurrent.TimeUnit import kotlin.coroutines.resume</ID>
    <ID>ImportOrdering:ProviderCredentialManager.kt$import com.google.gson.Gson import com.julien.genpwdpro.data.sync.models.CloudProviderType import com.julien.genpwdpro.data.sync.providers.PCloudProvider import com.julien.genpwdpro.data.secure.SecurePrefs import com.julien.genpwdpro.core.log.SafeLog import javax.inject.Inject import javax.inject.Singleton</ID>
    <ID>ImportOrdering:SecuritySettingsScreen.kt$import android.content.Context import androidx.compose.foundation.layout.* import androidx.compose.foundation.layout.ExperimentalLayoutApi import androidx.compose.foundation.rememberScrollState import androidx.compose.foundation.verticalScroll import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.* import androidx.compose.material3.* import androidx.compose.runtime.* import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.platform.LocalContext import androidx.compose.ui.res.stringResource import androidx.compose.ui.text.font.FontWeight import androidx.compose.ui.unit.dp import androidx.fragment.app.FragmentActivity import androidx.hilt.navigation.compose.hiltViewModel import androidx.lifecycle.ViewModel import androidx.lifecycle.viewModelScope import com.julien.genpwdpro.security.* import com.julien.genpwdpro.data.secure.SensitiveActionPreferences import com.julien.genpwdpro.R import dagger.hilt.android.lifecycle.HiltViewModel import kotlinx.coroutines.flow.* import kotlinx.coroutines.launch import javax.inject.Inject</ID>
    <ID>ImportOrdering:SyncPreferencesManager.kt$import android.content.Context import android.content.SharedPreferences import com.julien.genpwdpro.data.sync.models.CloudProviderType import com.julien.genpwdpro.data.sync.models.ConflictResolutionStrategy import com.julien.genpwdpro.data.sync.models.SyncInterval import com.julien.genpwdpro.data.secure.SecurePrefs import dagger.hilt.android.qualifiers.ApplicationContext import kotlinx.coroutines.Dispatchers import kotlinx.coroutines.withContext import javax.inject.Inject import javax.inject.Singleton</ID>
    <ID>ImportOrdering:SyncSettingsScreen.kt$import androidx.compose.animation.* import androidx.compose.foundation.background import androidx.compose.foundation.clickable import androidx.compose.foundation.layout.* import androidx.compose.foundation.rememberScrollState import androidx.compose.foundation.shape.CircleShape import androidx.compose.foundation.shape.RoundedCornerShape import androidx.compose.foundation.verticalScroll import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.* import androidx.compose.material3.* import androidx.compose.runtime.* import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.draw.clip import androidx.compose.ui.graphics.Color import androidx.compose.ui.platform.LocalContext import androidx.compose.ui.text.font.FontWeight import androidx.compose.ui.unit.dp import androidx.hilt.navigation.compose.hiltViewModel import androidx.lifecycle.ViewModel import androidx.lifecycle.viewModelScope import com.julien.genpwdpro.data.models.Settings import com.julien.genpwdpro.data.sync.* import android.app.Activity import android.content.Context import android.util.Log import com.julien.genpwdpro.data.local.preferences.SettingsDataStore import com.julien.genpwdpro.data.local.preferences.SyncConfigDataStore import com.julien.genpwdpro.data.sync.CloudProviderSyncRepository import com.julien.genpwdpro.data.sync.models.CloudProviderType import com.julien.genpwdpro.data.sync.models.SyncStatus import com.julien.genpwdpro.data.sync.models.SyncInterval import com.julien.genpwdpro.data.sync.providers.CloudProviderFactory import com.julien.genpwdpro.data.sync.providers.ProviderInfo import com.julien.genpwdpro.workers.CloudSyncWorker import dagger.hilt.android.lifecycle.HiltViewModel import dagger.hilt.android.qualifiers.ApplicationContext import kotlinx.coroutines.flow.MutableStateFlow import kotlinx.coroutines.flow.StateFlow import kotlinx.coroutines.flow.asStateFlow import kotlinx.coroutines.flow.first import kotlinx.coroutines.flow.update import kotlinx.coroutines.launch import java.text.SimpleDateFormat import java.util.Date import java.util.Locale import javax.inject.Inject</ID>
    <ID>ImportOrdering:SyncWorker.kt$import android.content.Context import androidx.hilt.work.HiltWorker import androidx.work.CoroutineWorker import androidx.work.WorkerParameters import com.julien.genpwdpro.data.sync.VaultSyncManager import com.julien.genpwdpro.core.log.SafeLog import dagger.assisted.Assisted import dagger.assisted.AssistedInject</ID>
    <ID>ImportOrdering:TotpGenerator.kt$import org.apache.commons.codec.binary.Base32 import java.nio.ByteBuffer import javax.crypto.Mac import javax.crypto.spec.SecretKeySpec import javax.inject.Inject import javax.inject.Singleton import kotlin.math.pow import com.julien.genpwdpro.core.crypto.SecretUtils</ID>
    <ID>ImportOrdering:UnlockVaultScreen.kt$import androidx.fragment.app.FragmentActivity import androidx.compose.foundation.layout.* import androidx.compose.foundation.text.KeyboardActions import androidx.compose.foundation.text.KeyboardOptions import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.* import androidx.compose.material3.* import androidx.compose.runtime.* import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.platform.LocalContext import androidx.compose.ui.platform.LocalFocusManager import androidx.compose.ui.text.input.ImeAction import androidx.compose.ui.text.input.KeyboardType import androidx.compose.ui.text.input.PasswordVisualTransformation import androidx.compose.ui.text.input.VisualTransformation import androidx.compose.ui.text.style.TextAlign import androidx.compose.ui.unit.dp import androidx.hilt.navigation.compose.hiltViewModel import com.julien.genpwdpro.data.local.entity.VaultRegistryEntry import com.julien.genpwdpro.presentation.utils.SecureWindow</ID>
    <ID>ImportOrdering:UnlockVaultViewModel.kt$import androidx.fragment.app.FragmentActivity import androidx.lifecycle.ViewModel import androidx.lifecycle.viewModelScope import com.julien.genpwdpro.data.local.dao.VaultRegistryDao import com.julien.genpwdpro.data.local.entity.VaultRegistryEntry import com.julien.genpwdpro.data.repository.FileVaultRepository import com.julien.genpwdpro.core.log.SafeLog import dagger.hilt.android.lifecycle.HiltViewModel import kotlinx.coroutines.flow.MutableStateFlow import kotlinx.coroutines.flow.StateFlow import kotlinx.coroutines.flow.asStateFlow import kotlinx.coroutines.launch import javax.inject.Inject</ID>
    <ID>ImportOrdering:VaultListViewModel.kt$import androidx.lifecycle.ViewModel import androidx.lifecycle.viewModelScope import com.julien.genpwdpro.data.crypto.TotpGenerator import com.julien.genpwdpro.data.local.entity.* import com.julien.genpwdpro.data.secure.SensitiveActionPreferences import com.julien.genpwdpro.data.repository.FileVaultRepository import com.julien.genpwdpro.domain.model.VaultStatistics import dagger.hilt.android.lifecycle.HiltViewModel import kotlinx.coroutines.flow.* import kotlinx.coroutines.launch import javax.inject.Inject</ID>
    <ID>ImportOrdering:VaultRepository.kt$import android.util.Log import com.julien.genpwdpro.data.crypto.VaultCryptoManager import com.julien.genpwdpro.data.local.dao.* import com.julien.genpwdpro.data.local.entity.* import com.julien.genpwdpro.data.models.GenerationMode import com.julien.genpwdpro.data.models.Settings import com.julien.genpwdpro.data.models.CaseMode import com.julien.genpwdpro.data.models.CharPolicy import com.julien.genpwdpro.security.KeystoreManager import kotlinx.coroutines.flow.Flow import kotlinx.coroutines.flow.map import java.util.UUID import javax.crypto.SecretKey import javax.inject.Inject import javax.inject.Singleton</ID>
    <ID>ImportOrdering:VaultSessionManager.kt$import android.net.Uri import com.julien.genpwdpro.core.log.SafeLog import com.julien.genpwdpro.data.local.dao.VaultRegistryDao import com.julien.genpwdpro.data.local.entity.* import com.julien.genpwdpro.data.models.vault.StorageStrategy import com.julien.genpwdpro.data.models.vault.VaultData import com.julien.genpwdpro.data.models.vault.VaultStatistics import com.julien.genpwdpro.data.vault.VaultFileManager import com.julien.genpwdpro.domain.exceptions.VaultException import com.julien.genpwdpro.data.local.dao.updateById import kotlinx.coroutines.* import kotlinx.coroutines.flow.* import java.io.IOException import java.util.UUID import javax.crypto.SecretKey import javax.inject.Inject import javax.inject.Singleton</ID>
    <ID>ImportOrdering:VaultSyncManager.kt$import android.app.Activity import android.content.Context import com.julien.genpwdpro.data.repository.VaultRepository import com.julien.genpwdpro.data.sync.models.* import com.julien.genpwdpro.data.sync.credentials.ProviderCredentialManager import com.julien.genpwdpro.data.sync.SyncPreferencesManager import com.julien.genpwdpro.data.sync.AutoSyncScheduler import com.julien.genpwdpro.core.log.SafeLog import dagger.hilt.android.qualifiers.ApplicationContext import kotlinx.coroutines.flow.Flow import kotlinx.coroutines.flow.MutableStateFlow import kotlinx.coroutines.flow.asStateFlow import java.security.MessageDigest import java.util.UUID import javax.inject.Inject import javax.inject.Singleton import com.julien.genpwdpro.data.sync.models.SyncResult as VaultSyncResult import com.julien.genpwdpro.data.sync.models.ConflictResolutionStrategy as VaultConflictResolutionStrategy</ID>
    <ID>ImportOrdering:VaultSyncManagerTest.kt$import android.content.Context import android.content.SharedPreferences import com.julien.genpwdpro.data.local.entity.VaultEntity import com.julien.genpwdpro.data.repository.VaultRepository import com.julien.genpwdpro.data.sync.models.* import com.julien.genpwdpro.data.sync.credentials.ProviderCredentialManager import com.julien.genpwdpro.data.sync.SyncPreferencesManager import com.julien.genpwdpro.data.sync.AutoSyncScheduler import io.mockk.* import kotlinx.coroutines.ExperimentalCoroutinesApi import kotlinx.coroutines.flow.first import kotlinx.coroutines.test.runTest import org.junit.After import org.junit.Assert.* import org.junit.Before import org.junit.Test</ID>
    <ID>ImportOrdering:VaultSyncViewModel.kt$import android.app.Activity import androidx.lifecycle.ViewModel import androidx.lifecycle.viewModelScope import com.julien.genpwdpro.data.sync.AutoSyncScheduler import com.julien.genpwdpro.data.sync.VaultSyncManager import com.julien.genpwdpro.data.sync.SyncPreferencesManager import com.julien.genpwdpro.data.sync.models.* import com.julien.genpwdpro.data.sync.providers.GoogleDriveProvider import com.julien.genpwdpro.data.sync.providers.OneDriveProvider import com.julien.genpwdpro.data.sync.providers.WebDAVProvider import dagger.hilt.android.lifecycle.HiltViewModel import kotlinx.coroutines.flow.* import kotlinx.coroutines.launch import javax.inject.Inject</ID>
    <ID>Indentation:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$ </ID>
    <ID>Indentation:AutofillSettingsScreen.kt$AutofillSettingsViewModel$ </ID>
    <ID>Indentation:BiometricHelper.kt$BiometricHelper$ </ID>
    <ID>Indentation:BiometricVaultManager.kt$BiometricVaultManager.Companion$ </ID>
    <ID>Indentation:CreateVaultScreen.kt$ </ID>
    <ID>Indentation:DashboardScreen.kt$ </ID>
    <ID>Indentation:FileVaultRepository.kt$FileVaultRepository$ </ID>
    <ID>Indentation:GenPwdAutofillService.kt$AutofillParser$ </ID>
    <ID>Indentation:HistoryScreen.kt$ </ID>
    <ID>Indentation:ImportExportRepository.kt$ImportExportRepository$ </ID>
    <ID>Indentation:SyncSettingsScreen.kt$ </ID>
    <ID>Indentation:VaultManagerScreen.kt$ </ID>
    <ID>InvalidPackageDeclaration:GeneratorViewModelTest.kt$package com.julien.genpwd</ID>
    <ID>InvalidPackageDeclaration:PasswordHistoryRepositoryTest.kt$package com.julien.genpwd</ID>
    <ID>LargeClass:VaultRepository.kt$VaultRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ActivityExtensions.kt$fun Activity.setSecureScreen(enabled: Boolean)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AnalyzerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun AnalyzerScreen( onNavigateBack: () -&gt; Unit, viewModel: AnalyzerViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AnalyzerScreen.kt$AnalyzerUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AnalyzerScreen.kt$AnalyzerViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AnimatedPasswordCard.kt$@Composable fun AnimatedPasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, modifier: Modifier = Modifier, showPulse: Boolean = false )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AnimatedPasswordCard.kt$@Composable fun FlippablePasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AnimatedPasswordCard.kt$@Composable fun GlowingPasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AnimatedPasswordCard.kt$@Composable fun ShakeablePasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, shouldShake: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AnimatedPasswordCard.kt$@OptIn(ExperimentalAnimationApi::class) @Composable fun ExpandablePasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, expanded: Boolean, onExpandToggle: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AnimatedPasswordCard.kt$@OptIn(ExperimentalAnimationApi::class) @Composable fun SlideInPasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, modifier: Modifier = Modifier, delayMillis: Int = 0 )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AppDatabase.kt$AppDatabase : RoomDatabase</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AppLifecycleObserver.kt$AppLifecycleObserver : DefaultLifecycleObserver</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AppLifecycleObserverTest.kt$AppLifecycleObserverTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AppLockManager.kt$AppLockManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AppLockManager.kt$LockTimeout</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ApplyCasingUseCase.kt$ApplyCasingUseCase</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ApplyCasingUseCaseTest.kt$ApplyCasingUseCaseTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AutoSyncScheduler.kt$AutoSyncScheduler</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AutofillRepository.kt$AutofillRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AutofillSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun AutofillSettingsScreen( onNavigateBack: () -&gt; Unit, viewModel: AutofillSettingsViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AutofillSettingsScreen.kt$AutofillSettingsUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AutofillSettingsScreen.kt$AutofillSettingsViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BiometricHelper.kt$BiometricHelper</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BiometricHelper.kt$fun Context.findActivity(): FragmentActivity?</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BiometricHelper.kt$fun Context.getBiometricHelper(): BiometricHelper?</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BiometricManager.kt$BiometricAvailability</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BiometricManager.kt$BiometricManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BiometricManager.kt$BiometricResult</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BiometricVaultManager.kt$BiometricVaultManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BlocksEditor.kt$@Composable fun BlocksEditor( blocks: List&lt;CaseBlock&gt;, onBlocksChange: (List&lt;CaseBlock&gt;) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CasingSection.kt$@Composable fun CasingSection( settings: Settings, onSettingsChange: (Settings) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CharacterSets.kt$CharacterSets$CharSets</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CharactersSection.kt$@Composable fun CharactersSection( settings: Settings, onSettingsChange: (Settings) -&gt; Unit, onOpenPlacementSheet: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ClipboardUtils.kt$ClipboardUtils$ClearScheduler</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ClipboardUtils.kt$ClipboardUtils$ClipboardDelegate</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ClipboardUtilsTest.kt$ClipboardUtilsTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudProvider.kt$CloudProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudProviderConfigDialog.kt$@Composable fun CloudProviderConfigDialog( providerInfo: ProviderInfo, onDismiss: () -&gt; Unit, onAuthenticate: (CloudProviderConfig) -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudProviderConfigDialog.kt$CloudProviderConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudProviderFactory.kt$CloudProviderFactory</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudProviderFactory.kt$ImplementationStatus</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudProviderFactory.kt$PrivacyLevel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudProviderFactory.kt$ProviderConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudProviderFactory.kt$ProviderInfo</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudProviderSyncRepository.kt$CloudProviderSyncRepository : CloudSyncRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudSyncRepository.kt$CloudSyncRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudSyncRepository.kt$NoOpCloudSyncRepository : CloudSyncRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CloudSyncWorker.kt$CloudSyncWorker : CoroutineWorker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ConflictResolutionDialog.kt$@Composable fun ConflictResolutionDialog( localVersion: VaultSyncData, remoteVersion: VaultSyncData, onResolve: (ConflictResolutionStrategy) -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ConflictResolver.kt$ConflictResolver</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ConflictResolverTest.kt$ConflictResolverTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CreateVaultScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun CreateVaultScreen( onVaultCreated: (String) -&gt; Unit, onBackClick: () -&gt; Unit, viewModel: VaultViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CustomPhraseGenerator.kt$CustomPhraseFormat</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CustomPhraseGenerator.kt$CustomPhraseGenerator : PasswordGenerator</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CustomPhraseGenerator.kt$WordListValidation</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CustomPhraseScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun CustomPhraseScreen( onNavigateBack: () -&gt; Unit, onSaveAndGenerate: (List&lt;String&gt;, CustomPhraseFormat, Int, String) -&gt; Unit, viewModel: CustomPhraseViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CustomPhraseScreen.kt$CustomPhraseUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CustomPhraseScreen.kt$CustomPhraseViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DashboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalAnimationApi::class) @Composable fun DashboardScreen( onNavigateToVault: (String) -&gt; Unit, onNavigateToVaultList: (String) -&gt; Unit, onNavigateToVaultManager: () -&gt; Unit, onNavigateToHistory: () -&gt; Unit, onNavigateToAnalyzer: () -&gt; Unit, onNavigateToCustomPhrase: () -&gt; Unit, onNavigateToPresetManager: (String) -&gt; Unit, viewModel: DashboardViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DashboardViewModel.kt$DashboardUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DashboardViewModel.kt$DashboardViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DatabaseOpenHelperFactoryProvider.kt$DatabaseOpenHelperFactoryProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DatabaseOpenHelperFactoryProvider.kt$SqlCipherDatabaseOpenHelperFactoryProvider : DatabaseOpenHelperFactoryProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DatabaseOpenHelperFactoryProvider.kt$SqlCipherPassphraseProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DictionaryManager.kt$DictionaryManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EncryptionManager.kt$EncryptedData</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EncryptionManager.kt$EncryptedDataEncoded</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EncryptionManager.kt$EncryptionManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EncryptionManager.kt$EncryptionMetadata</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EncryptionManagerTest.kt$EncryptionManagerTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EntropyCalculatorTest.kt$EntropyCalculatorTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EntryEditScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun EntryEditScreen( vaultId: String, entryId: String? = null, entryType: EntryType = EntryType.LOGIN, initialPassword: String? = null, onSaved: () -&gt; Unit, onBackClick: () -&gt; Unit, viewModel: EntryViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EntryTypeSelectionScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun EntryTypeSelectionScreen( vaultId: String, initialPassword: String? = null, onTypeSelected: (EntryType) -&gt; Unit, onBackClick: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EntryViewModel.kt$EntryUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EntryViewModel.kt$EntryViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ExpandableSection.kt$@Composable fun ExpandableSection( title: String, badge: String? = null, expanded: Boolean, onToggle: () -&gt; Unit, modifier: Modifier = Modifier, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ExportImportUtils.kt$ExportData</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ExportImportUtils.kt$ExportPasswordData</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FileVaultRepository.kt$FileVaultRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FileVaultRepositoryTest.kt$FileVaultRepositoryTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderDao.kt$FolderDao</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderEntity.kt$FolderEntity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderManagementViewModel.kt$FolderManagementViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderManagementViewModel.kt$FolderNode</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderManagementViewModel.kt$FolderUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenPwdAutofillService.kt$AutofillCredentials</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenPwdAutofillService.kt$AutofillFieldMetadata</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenPwdAutofillService.kt$AutofillFieldsMetadata</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenPwdAutofillService.kt$AutofillParser</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenPwdAutofillService.kt$GenPwdAutofillService : AutofillService</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenPwdProApplication.kt$GenPwdProApplication : ApplicationProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GeneratePasswordUseCase.kt$GeneratePasswordUseCase</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GeneratePasswordUseCaseTest.kt$GeneratePasswordUseCaseTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenerationMode.kt$CaseBlock</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenerationMode.kt$CaseMode</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenerationMode.kt$CharPolicy</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenerationMode.kt$DictionaryType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenerationMode.kt$GenerationMode</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GenerationMode.kt$Placement</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GeneratorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun GeneratorScreen( onNavigateToHistory: () -&gt; Unit = {}, onNavigateToAnalyzer: () -&gt; Unit = {}, onNavigateToCustomPhrase: () -&gt; Unit = {}, onNavigateToSyncSettings: () -&gt; Unit = {}, onNavigateToSecurity: () -&gt; Unit = {}, onSaveToVault: ((String) -&gt; Unit)? = null, onNavigateToPresetManager: () -&gt; Unit = {}, vaultId: String? = null, viewModel: GeneratorViewModel = hiltViewModel(), initialMode: String? = null, autoGenerate: Boolean = false )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GeneratorViewModel.kt$GeneratorUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GeneratorViewModel.kt$GeneratorViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GeneratorViewModel.kt$Section</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GeneratorViewModelTest.kt$GeneratorViewModelTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GoogleDriveProvider.kt$GoogleDriveProvider : CloudProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HapticUtils.kt$@Composable fun rememberHapticFeedback(): HapticFeedbackHelper</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HapticUtils.kt$@Composable fun rememberHapticFeedbackPerformer(): (HapticFeedbackType) -&gt; Unit</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HapticUtils.kt$HapticFeedbackHelper</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HapticUtils.kt$HapticFeedbackType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HapticUtils.kt$fun View.performSystemHapticFeedback(type: HapticFeedbackType)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HistoryScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun HistoryScreen( onNavigateBack: () -&gt; Unit, viewModel: HistoryViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HistoryViewModel.kt$HistoryViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ImportExportRepository.kt$ImportExportRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:KeystoreManager.kt$EncryptedKeystoreData</ID>
    <ID>LibraryEntitiesShouldNotBePublic:KeystoreManager.kt$KeystoreAlias</ID>
    <ID>LibraryEntitiesShouldNotBePublic:KeystoreManager.kt$KeystoreManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:LeetSpeakGenerator.kt$LeetSpeakGenerator : PasswordGenerator</ID>
    <ID>LibraryEntitiesShouldNotBePublic:LeetSpeakGeneratorTest.kt$LeetSpeakGeneratorTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainActivity.kt$MainActivity : FragmentActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainOptionsSection.kt$@Composable fun MainOptionsSection( settings: Settings, onSettingsChange: (Settings) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainScreen.kt$@Composable fun DrawerHeader()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun MainScreen( navController: NavHostController, sessionManager: SessionManager, vaultSessionManager: VaultSessionManager, startDestination: String = Screen.Dashboard.route // Destination de départ )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainScreen.kt$DrawerNavItem</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainScreen.kt$fun getCurrentScreenTitle(route: String?): String</ID>
    <ID>LibraryEntitiesShouldNotBePublic:NavGraph.kt$@Composable fun AppNavGraph( navController: NavHostController, startDestination: String = Screen.Dashboard.route, sessionManager: com.julien.genpwdpro.domain.session.SessionManager, vaultSessionManager: com.julien.genpwdpro.domain.session.VaultSessionManager )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:NavGraph.kt$Screen</ID>
    <ID>LibraryEntitiesShouldNotBePublic:NavGraph.kt$fun NavHostController.navigateToCreateEntry(vaultId: String, type: EntryType = EntryType.LOGIN)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:NavGraph.kt$fun NavHostController.navigateToEditEntry(vaultId: String, entryId: String)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:NavGraph.kt$fun NavHostController.navigateToVaultList(vaultId: String)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Navigation.kt$@Composable fun AppNavigation( navController: NavHostController = rememberNavController(), generationMode: String? = null, quickGenerate: Boolean = false, viewModel: NavigationViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Navigation.kt$NavigationViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OnboardingScreen.kt$@OptIn(ExperimentalPagerApi::class, ExperimentalMaterial3Api::class) @Composable fun OnboardingScreen( onComplete: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OneDriveProvider.kt$OneDriveProvider : CloudProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OtpImportActivity.kt$OtpImportActivity : AppCompatActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OtpModels.kt$OtpAlgorithm</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OtpModels.kt$OtpConfig : Parcelable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OtpModels.kt$OtpType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OtpQrScannerActivity.kt$OtpQrScannerActivity : AppCompatActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OtpUriParser.kt$OtpUriParser</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OtpUriParserException.kt$OtpUriMigrationNotSupportedException : OtpUriParserException</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OtpUriParserException.kt$OtpUriParserException : Exception</ID>
    <ID>LibraryEntitiesShouldNotBePublic:OtpUriParserTest.kt$OtpUriParserTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PCloudProvider.kt$PCloudProvider : CloudProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PassphraseGenerator.kt$PassphraseGenerator : PasswordGenerator</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PassphraseGeneratorTest.kt$PassphraseGeneratorTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordAnalyzer.kt$PasswordAnalysis</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordAnalyzer.kt$PasswordAnalysisStrength</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordAnalyzer.kt$PasswordAnalyzer</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordCard.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun PasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, modifier: Modifier = Modifier, onSave: (() -&gt; Unit)? = null, onShare: (() -&gt; Unit)? = null )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordGenerator.kt$PasswordGenerator</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHealthScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PasswordHealthScreen( vaultId: String, onBackClick: () -&gt; Unit, onEntryClick: (String) -&gt; Unit, viewModel: PasswordHealthViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHealthViewModel.kt$CompromisedPasswordEntry</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHealthViewModel.kt$HealthStatistics</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHealthViewModel.kt$HealthUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHealthViewModel.kt$OldPasswordEntry</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHealthViewModel.kt$PasswordHealthViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHealthViewModel.kt$PasswordReference</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHealthViewModel.kt$ReusedPasswordGroup</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHealthViewModel.kt$WeakPasswordEntry</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHistoryDao.kt$PasswordHistoryDao</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHistoryEntity.kt$PasswordHistoryEntity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHistoryEntity.kt$fun String.toGenerationMode(): GenerationMode</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHistoryRepository.kt$PasswordHistoryRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordHistoryRepositoryTest.kt$PasswordHistoryRepositoryTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordResult.kt$PasswordResult</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordResult.kt$PasswordStrength</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordStrengthIndicator.kt$@Composable fun PasswordStrengthBadge( strength: PasswordStrength, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordStrengthIndicator.kt$@Composable fun PasswordStrengthDetails( entropy: Double, strength: PasswordStrength, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordStrengthIndicator.kt$@Composable fun PasswordStrengthIcon( strength: PasswordStrength, modifier: Modifier = Modifier, size: Int = 16 )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordStrengthIndicator.kt$@Composable fun PasswordStrengthIndicator( entropy: Double, strength: PasswordStrength, modifier: Modifier = Modifier, showEntropyValue: Boolean = true )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasswordWidget.kt$PasswordWidget : AppWidgetProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PlaceCharactersUseCase.kt$PlaceCharactersUseCase</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PlaceCharactersUseCaseTest.kt$PlaceCharactersUseCaseTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PlacementBottomSheet.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PlacementBottomSheet( digitsPosition: Int, specialsPosition: Int, onDigitsPositionChange: (Int) -&gt; Unit, onSpecialsPositionChange: (Int) -&gt; Unit, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PresetDao.kt$PresetDao</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PresetEntity.kt$PresetEntity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PresetListScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PresetListScreen( vaultId: String, onNavigateBack: () -&gt; Unit, viewModel: PresetViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PresetSelector.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PresetSelector( currentPreset: DecryptedPreset?, presets: List&lt;DecryptedPreset&gt;, onPresetSelected: (DecryptedPreset) -&gt; Unit, onCreatePreset: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PresetViewModel.kt$PresetUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PresetViewModel.kt$PresetViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProtonDriveProvider.kt$ProtonDriveProvider : CloudProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProviderCredentialManager.kt$OneDriveConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProviderCredentialManager.kt$PCloudConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProviderCredentialManager.kt$ProtonDriveConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProviderCredentialManager.kt$ProviderCredentialManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProviderCredentialManager.kt$WebDAVConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:QrScannerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun QrScannerScreen( onQrCodeScanned: (String) -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ScannerOverlayView.kt$ScannerOverlayView : View</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecretUtilsTest.kt$SecretUtilsTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecureNote.kt$SecureCard</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecureNote.kt$SecureIdentity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecureNote.kt$SecureNote</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecurePrefs.kt$SecurePrefs</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecureRoutesTest.kt$SecureRoutesTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecureWindowEffect.kt$@Composable fun SecureWindow(enabled: Boolean = true)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecuritySettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SecuritySettingsScreen( onNavigateBack: () -&gt; Unit, viewModel: SecuritySettingsViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecuritySettingsScreen.kt$SecuritySettingsUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SecuritySettingsScreen.kt$SecuritySettingsViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SensitiveActionPreferences.kt$SensitiveActionPreferences</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SensitiveActionPreferencesTest.kt$SensitiveActionPreferencesTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SessionManager.kt$SessionManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Settings.kt$Settings</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SettingsDataStore.kt$SettingsDataStore</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SettingsSlider.kt$@Composable fun SettingsSlider( label: String, value: Int, valueRange: IntRange, onValueChange: (Int) -&gt; Unit, modifier: Modifier = Modifier, valueDisplay: String = value.toString() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StorageStrategy.kt$StorageStrategy</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SwipeablePasswordCard.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun BiDirectionalSwipeableCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, onDelete: () -&gt; Unit, onFavorite: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SwipeablePasswordCard.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun DismissiblePasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SwipeablePasswordCard.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun SwipeablePasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, onDelete: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SwipeablePasswordCard.kt$SwipeDirection</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyllablesGenerator.kt$SyllablesGenerator : PasswordGenerator</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyllablesGeneratorTest.kt$SyllablesGeneratorTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncConfigDataStore.kt$SyncConfigDataStore</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncHistoryScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SyncHistoryScreen( onNavigateBack: () -&gt; Unit, viewModel: VaultSyncViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncHistoryScreen.kt$SyncHistoryEntry</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncHistoryScreen.kt$SyncHistoryStatus</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncInitializer.kt$SyncInitializer</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncManager.kt$SyncManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncModels.kt$ConflictResolutionStrategy</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncModels.kt$LocalSyncMetadata</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncModels.kt$SyncData</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncModels.kt$SyncDataType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncModels.kt$SyncEvent</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncModels.kt$SyncResult</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncModule.kt$SyncModule</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncPreferencesManager.kt$SyncPreferencesManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncPreferencesManager.kt$SyncStatistics</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncPreferencesManager.kt$WebDAVCredentials</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncProgressIndicator.kt$@Composable fun MiniSyncIndicator( isSyncing: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncProgressIndicator.kt$@Composable fun SyncProgressIndicator( state: SyncProgressState, modifier: Modifier = Modifier, onDismiss: (() -&gt; Unit)? = null )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncProgressIndicator.kt$@Composable fun SyncSnackbar( message: String, isError: Boolean = false, onDismiss: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncProgressIndicator.kt$SyncProgressState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SyncSettingsScreen( onNavigateBack: () -&gt; Unit, onNavigateToHistory: () -&gt; Unit = {}, onNavigateToAutofill: () -&gt; Unit = {}, onNavigateToSecurity: () -&gt; Unit = {}, viewModel: SyncSettingsViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncSettingsScreen.kt$AuthenticationResult</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncSettingsScreen.kt$SyncSettingsUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncSettingsScreen.kt$SyncSettingsViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncSettingsScreen.kt$UiSyncConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$CloudFileMetadata</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$CloudProviderType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$ConflictResolutionStrategy</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$StorageQuota</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$SyncConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$SyncInterval</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$SyncMetadata</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$SyncResult</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$SyncStatus</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncStatus.kt$VaultSyncData</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SyncWorker.kt$SyncWorker : CoroutineWorker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TagDao.kt$TagDao</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TagEntity.kt$EntryTagCrossRef</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TagEntity.kt$TagEntity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TagManagementViewModel.kt$TagManagementViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TagManagementViewModel.kt$TagStatistic</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TagManagementViewModel.kt$TagUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Theme.kt$@Composable fun GenPwdProTheme( darkTheme: Boolean = isSystemInDarkTheme(), dynamicColor: Boolean = true, // Material You activé par défaut content: @Composable () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ThemeToggle.kt$@Composable fun ThemeToggle( isDarkTheme: Boolean, onToggle: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ThemeToggle.kt$@Composable fun ThemeToggleWithLabel( isDarkTheme: Boolean, onToggle: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TotpGenerator.kt$TotpGenerator</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnlockVaultScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun UnlockVaultScreen( vaultId: String, onVaultUnlocked: () -&gt; Unit, onBackClick: () -&gt; Unit, viewModel: UnlockVaultViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnlockVaultViewModel.kt$UnlockVaultUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnlockVaultViewModel.kt$UnlockVaultViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UserUnlockedReceiver.kt$UserUnlockedReceiver : BroadcastReceiver</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultCryptoManager.kt$VaultCryptoManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultCryptoManagerTest.kt$VaultCryptoManagerTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultDao.kt$VaultDao</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultData.kt$VaultData</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultData.kt$VaultFile</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultData.kt$VaultMetadata</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultData.kt$VaultStatistics</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultEntity.kt$VaultEntity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultEntryDao.kt$PasswordStrengthStats</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultEntryDao.kt$VaultEntryDao</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultEntryEntity.kt$EntryType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultEntryEntity.kt$VaultEntryEntity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultEntryEntity.kt$fun String.toEntryType(): EntryType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultEntryEntityExt.kt$fun VaultEntryEntity.hasTOTP(): Boolean</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultEntryEntityExt.kt$fun createVaultEntry( id: String = java.util.UUID.randomUUID().toString(), vaultId: String, folderId: String? = null, title: String, username: String = "", password: String = "", url: String = "", notes: String = "", customFields: String = "", entryType: EntryType = EntryType.LOGIN, isFavorite: Boolean = false, passwordStrength: Int = 0, passwordEntropy: Double = 0.0, generationMode: String? = null, createdAt: Long = System.currentTimeMillis(), modifiedAt: Long = System.currentTimeMillis(), lastAccessedAt: Long = System.currentTimeMillis(), passwordExpiresAt: Long = 0, requiresPasswordChange: Boolean = false, usageCount: Int = 0, icon: String? = null, color: String? = null, hasTOTP: Boolean = false, totpSecret: String = "", totpPeriod: Int = 30, totpDigits: Int = 6, totpAlgorithm: String = "SHA1", totpIssuer: String = "", hasPasskey: Boolean = false, passkeyData: String = "", passkeyRpId: String = "", passkeyRpName: String = "", passkeyUserHandle: String = "", passkeyCreatedAt: Long = 0, passkeyLastUsedAt: Long = 0 ): VaultEntryEntity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultException.kt$VaultException : Exception</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultFileHeader.kt$VaultFileHeader</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultFileManager.kt$VaultFileManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultListScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun VaultListScreen( vaultId: String, onEntryClick: (String) -&gt; Unit, onAddEntry: (EntryType) -&gt; Unit, onSettingsClick: () -&gt; Unit, onLockClick: () -&gt; Unit, viewModel: VaultListViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultListViewModel.kt$VaultListUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultListViewModel.kt$VaultListViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultManagerScreen.kt$@Composable fun ConfirmDeleteDialog( vaultName: String, onConfirm: () -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultManagerScreen.kt$@Composable fun DetailRow(label: String, value: String)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultManagerScreen.kt$@Composable fun InfoChip(icon: androidx.compose.ui.graphics.vector.ImageVector, label: String)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultManagerScreen.kt$@Composable fun MigrationDialog( isActive: Boolean, progress: com.julien.genpwdpro.data.vault.VaultMigrationManager.MigrationProgress?, onDismiss: () -&gt; Unit, onConfirm: (Map&lt;String, String&gt;) -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultManagerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun CreateVaultDialog( viewModel: VaultManagerViewModel, uiState: VaultManagerUiState, onDismiss: () -&gt; Unit, onCreate: (String, String, StorageStrategy, String?, Boolean, Boolean) -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultManagerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun VaultCard( vault: VaultRegistryEntry, isDefault: Boolean, isLoaded: Boolean, onSetDefault: () -&gt; Unit, onLoad: () -&gt; Unit, onUnload: () -&gt; Unit, onDelete: () -&gt; Unit, onOpen: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultManagerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun VaultManagerScreen( viewModel: VaultManagerViewModel = hiltViewModel(), onNavigateBack: () -&gt; Unit, onNavigateToVault: (String) -&gt; Unit = {} )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultManagerViewModel.kt$VaultManagerUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultManagerViewModel.kt$VaultManagerViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultMigrationManager.kt$VaultMigrationManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultRegistryDao.kt$VaultRegistryDao</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultRegistryDao.kt$suspend fun VaultRegistryDao.updateById( vaultId: String, block: (VaultRegistryEntry) -&gt; VaultRegistryEntry )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultRegistryEntry.kt$VaultRegistryEntry</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultRepository.kt$VaultRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultSelectorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun VaultSelectorScreen( onVaultSelected: (VaultEntity) -&gt; Unit, onCreateVault: () -&gt; Unit, onNavigateToGenerator: () -&gt; Unit, viewModel: VaultViewModel = hiltViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultSessionManager.kt$VaultSessionManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultStartupLocker.kt$VaultStartupLocker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultStartupLockerTest.kt$VaultStartupLockerTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultStatistics.kt$VaultStatistics</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultSyncManager.kt$VaultSyncManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultSyncManagerTest.kt$VaultSyncManagerTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultSyncViewModel.kt$ConflictData</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultSyncViewModel.kt$VaultSyncUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultSyncViewModel.kt$VaultSyncViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultViewModel.kt$VaultUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VaultViewModel.kt$VaultViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDAVConfigDialog.kt$@Composable fun WebDAVConfigDialog( onDismiss: () -&gt; Unit, onSave: (serverUrl: String, username: String, password: String, validateSSL: Boolean) -&gt; Unit, onTestConnection: (serverUrl: String, username: String, password: String, validateSSL: Boolean) -&gt; Unit, isTestingConnection: Boolean = false, testConnectionResult: TestConnectionResult? = null )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDAVConfigDialog.kt$TestConnectionResult</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDAVProvider.kt$WebDAVProvider : CloudProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$@Composable fun isCompactScreen(): Boolean</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$@Composable fun isTablet(): Boolean</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$@Composable fun rememberAdaptivePadding(): Dp</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$@Composable fun rememberContentMaxWidth(): Dp</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$@Composable fun rememberGridColumnCount( minColumnWidth: Dp = 300.dp ): Int</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$@Composable fun rememberScreenConfig(): ScreenConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$@Composable fun shouldUseTwoColumnLayout(): Boolean</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$DeviceOrientation</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$DeviceType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$ScreenConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WindowSizeUtils.kt$fun WindowWidthSizeClass.toDeviceType(): DeviceType</ID>
    <ID>LongMethod:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$override fun migrate(database: SupportSQLiteDatabase)</ID>
    <ID>LongMethod:BlocksEditor.kt$@Composable fun BlocksEditor( blocks: List&lt;CaseBlock&gt;, onBlocksChange: (List&lt;CaseBlock&gt;) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:CloudProviderConfigDialog.kt$@Composable private fun GoogleDriveConfigDialog( onDismiss: () -&gt; Unit, onAuthenticate: () -&gt; Unit )</ID>
    <ID>LongMethod:CloudProviderConfigDialog.kt$@Composable private fun OneDriveConfigDialog( onDismiss: () -&gt; Unit, onAuthenticate: (String) -&gt; Unit )</ID>
    <ID>LongMethod:CloudProviderConfigDialog.kt$@Composable private fun PCloudConfigDialog( onDismiss: () -&gt; Unit, onAuthenticate: (String, String, PCloudProvider.PCloudRegion) -&gt; Unit )</ID>
    <ID>LongMethod:CloudProviderConfigDialog.kt$@Composable private fun ProtonDriveConfigDialog( onDismiss: () -&gt; Unit, onAuthenticate: (String, String) -&gt; Unit )</ID>
    <ID>LongMethod:CloudProviderFactory.kt$CloudProviderFactory$fun getProviderInfo(type: CloudProviderType): ProviderInfo</ID>
    <ID>LongMethod:ConflictResolutionDialog.kt$@Composable fun ConflictResolutionDialog( localVersion: VaultSyncData, remoteVersion: VaultSyncData, onResolve: (ConflictResolutionStrategy) -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:ConflictResolutionDialog.kt$@Composable private fun StrategyDescription(strategy: ConflictResolutionStrategy)</ID>
    <ID>LongMethod:CreateVaultScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun CreateVaultScreen( onVaultCreated: (String) -&gt; Unit, onBackClick: () -&gt; Unit, viewModel: VaultViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:CustomPhraseScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun CustomPhraseScreen( onNavigateBack: () -&gt; Unit, onSaveAndGenerate: (List&lt;String&gt;, CustomPhraseFormat, Int, String) -&gt; Unit, viewModel: CustomPhraseViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:DashboardScreen.kt$@Composable private fun QuickGeneratorCard( password: String?, isGenerating: Boolean, onGenerate: () -&gt; Unit, onCopy: () -&gt; Unit )</ID>
    <ID>LongMethod:DashboardScreen.kt$@Composable private fun VaultOverviewCard( vault: VaultRegistryEntry, isDefault: Boolean, isActive: Boolean, onOpen: () -&gt; Unit, onManage: () -&gt; Unit )</ID>
    <ID>LongMethod:DashboardScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalAnimationApi::class) @Composable fun DashboardScreen( onNavigateToVault: (String) -&gt; Unit, onNavigateToVaultList: (String) -&gt; Unit, onNavigateToVaultManager: () -&gt; Unit, onNavigateToHistory: () -&gt; Unit, onNavigateToAnalyzer: () -&gt; Unit, onNavigateToCustomPhrase: () -&gt; Unit, onNavigateToPresetManager: (String) -&gt; Unit, viewModel: DashboardViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:EntryEditScreen.kt$@Composable private fun PasswordGeneratorDialog( onDismiss: () -&gt; Unit, onPasswordGenerated: (String) -&gt; Unit, viewModel: EntryViewModel )</ID>
    <ID>LongMethod:EntryEditScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun EntryEditScreen( vaultId: String, entryId: String? = null, entryType: EntryType = EntryType.LOGIN, initialPassword: String? = null, onSaved: () -&gt; Unit, onBackClick: () -&gt; Unit, viewModel: EntryViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:EntryViewModel.kt$EntryViewModel$fun saveEntry()</ID>
    <ID>LongMethod:ExpandableSection.kt$@Composable fun ExpandableSection( title: String, badge: String? = null, expanded: Boolean, onToggle: () -&gt; Unit, modifier: Modifier = Modifier, content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>LongMethod:GenPwdAutofillService.kt$GenPwdAutofillService$override fun onFillRequest( request: FillRequest, cancellationSignal: CancellationSignal, callback: FillCallback )</ID>
    <ID>LongMethod:GeneratorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun GeneratorScreen( onNavigateToHistory: () -&gt; Unit = {}, onNavigateToAnalyzer: () -&gt; Unit = {}, onNavigateToCustomPhrase: () -&gt; Unit = {}, onNavigateToSyncSettings: () -&gt; Unit = {}, onNavigateToSecurity: () -&gt; Unit = {}, onSaveToVault: ((String) -&gt; Unit)? = null, onNavigateToPresetManager: () -&gt; Unit = {}, vaultId: String? = null, viewModel: GeneratorViewModel = hiltViewModel(), initialMode: String? = null, autoGenerate: Boolean = false )</ID>
    <ID>LongMethod:GeneratorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun SavePresetDialog( currentMode: GenerationMode, onDismiss: () -&gt; Unit, onSave: (name: String, icon: String, setAsDefault: Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:HistoryScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun HistoryScreen( onNavigateBack: () -&gt; Unit, viewModel: HistoryViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:ImportExportRepository.kt$ImportExportRepository$suspend fun exportToCsv( vaultId: String, vaultKey: SecretKey, uri: Uri ): Result&lt;Int&gt;</ID>
    <ID>LongMethod:ImportExportRepository.kt$ImportExportRepository$suspend fun importFromCsv( vaultId: String, vaultKey: SecretKey, uri: Uri ): Result&lt;Int&gt;</ID>
    <ID>LongMethod:MainScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun MainScreen( navController: NavHostController, sessionManager: SessionManager, vaultSessionManager: VaultSessionManager, startDestination: String = Screen.Dashboard.route // Destination de départ )</ID>
    <ID>LongMethod:NavGraph.kt$@Composable fun AppNavGraph( navController: NavHostController, startDestination: String = Screen.Dashboard.route, sessionManager: com.julien.genpwdpro.domain.session.SessionManager, vaultSessionManager: com.julien.genpwdpro.domain.session.VaultSessionManager )</ID>
    <ID>LongMethod:Navigation.kt$@Composable fun AppNavigation( navController: NavHostController = rememberNavController(), generationMode: String? = null, quickGenerate: Boolean = false, viewModel: NavigationViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:PasswordAnalyzer.kt$PasswordAnalyzer$fun analyze(password: String): PasswordAnalysis</ID>
    <ID>LongMethod:PasswordCard.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun PasswordCard( result: PasswordResult, onCopy: () -&gt; Unit, onToggleMask: () -&gt; Unit, modifier: Modifier = Modifier, onSave: (() -&gt; Unit)? = null, onShare: (() -&gt; Unit)? = null )</ID>
    <ID>LongMethod:PasswordHealthScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PasswordHealthScreen( vaultId: String, onBackClick: () -&gt; Unit, onEntryClick: (String) -&gt; Unit, viewModel: PasswordHealthViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:PasswordHealthViewModel.kt$PasswordHealthViewModel$fun analyzeVaultHealth(vaultId: String)</ID>
    <ID>LongMethod:PresetListScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun PresetListScreen( vaultId: String, onNavigateBack: () -&gt; Unit, viewModel: PresetViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:PresetListScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun PresetManagementCard( preset: DecryptedPreset, onSetDefault: () -&gt; Unit, onEdit: () -&gt; Unit, onDelete: () -&gt; Unit )</ID>
    <ID>LongMethod:PresetSelector.kt$@Composable private fun PresetListContent( presets: List&lt;DecryptedPreset&gt;, currentPresetId: String?, onPresetSelected: (DecryptedPreset) -&gt; Unit, onCreatePreset: () -&gt; Unit )</ID>
    <ID>LongMethod:PresetSelector.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun PresetItem( preset: DecryptedPreset, isSelected: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:QrScannerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun QrScannerScreen( onQrCodeScanned: (String) -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:SecuritySettingsScreen.kt$@OptIn(ExperimentalLayoutApi::class) @Composable private fun SensitiveActionsCard( isEnabled: Boolean, clipboardTtlMs: Long, onToggle: (Boolean) -&gt; Unit, onClipboardTtlChange: (Long) -&gt; Unit )</ID>
    <ID>LongMethod:SecuritySettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SecuritySettingsScreen( onNavigateBack: () -&gt; Unit, viewModel: SecuritySettingsViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:SyncHistoryScreen.kt$@Composable private fun SyncHistoryEntryCard(entry: SyncHistoryEntry)</ID>
    <ID>LongMethod:SyncHistoryScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SyncHistoryScreen( onNavigateBack: () -&gt; Unit, viewModel: VaultSyncViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:SyncProgressIndicator.kt$@Composable private fun DownloadingIndicator( progress: Float, fileName: String? )</ID>
    <ID>LongMethod:SyncProgressIndicator.kt$@Composable private fun UploadingIndicator( progress: Float, fileName: String? )</ID>
    <ID>LongMethod:SyncProgressIndicator.kt$@Composable private fun VerifyingIndicator()</ID>
    <ID>LongMethod:SyncSettingsScreen.kt$@Composable private fun ConflictResolutionDialog( conflict: SyncResult.Conflict, onResolve: (ConflictResolutionStrategy) -&gt; Unit, onDismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:SyncSettingsScreen.kt$@Composable private fun ProviderOption( provider: ProviderInfo, isSelected: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:SyncSettingsScreen.kt$@Composable private fun SyncStatusCard( status: SyncStatus, lastSyncTimestamp: Long, metadata: LocalSyncMetadata )</ID>
    <ID>LongMethod:SyncSettingsScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun SyncSettingsScreen( onNavigateBack: () -&gt; Unit, onNavigateToHistory: () -&gt; Unit = {}, onNavigateToAutofill: () -&gt; Unit = {}, onNavigateToSecurity: () -&gt; Unit = {}, viewModel: SyncSettingsViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:SyncSettingsScreen.kt$SyncSettingsViewModel$fun authenticateProvider( activity: Activity, providerType: CloudProviderType, config: CloudProviderConfig )</ID>
    <ID>LongMethod:ThemeToggle.kt$@Composable fun ThemeToggle( isDarkTheme: Boolean, onToggle: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:UnlockVaultScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun UnlockVaultScreen( vaultId: String, onVaultUnlocked: () -&gt; Unit, onBackClick: () -&gt; Unit, viewModel: UnlockVaultViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:VaultListScreen.kt$@Composable private fun TotpCodeDisplay( entry: VaultEntryEntity, viewModel: VaultListViewModel )</ID>
    <ID>LongMethod:VaultListScreen.kt$@Composable private fun VaultStatisticsCard( statistics: VaultStatistics, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:VaultListScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun VaultListScreen( vaultId: String, onEntryClick: (String) -&gt; Unit, onAddEntry: (EntryType) -&gt; Unit, onSettingsClick: () -&gt; Unit, onLockClick: () -&gt; Unit, viewModel: VaultListViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:VaultManagerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun CreateVaultDialog( viewModel: VaultManagerViewModel, uiState: VaultManagerUiState, onDismiss: () -&gt; Unit, onCreate: (String, String, StorageStrategy, String?, Boolean, Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:VaultManagerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun VaultCard( vault: VaultRegistryEntry, isDefault: Boolean, isLoaded: Boolean, onSetDefault: () -&gt; Unit, onLoad: () -&gt; Unit, onUnload: () -&gt; Unit, onDelete: () -&gt; Unit, onOpen: () -&gt; Unit )</ID>
    <ID>LongMethod:VaultManagerScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun VaultManagerScreen( viewModel: VaultManagerViewModel = hiltViewModel(), onNavigateBack: () -&gt; Unit, onNavigateToVault: (String) -&gt; Unit = {} )</ID>
    <ID>LongMethod:VaultManagerViewModel.kt$VaultManagerViewModel$fun createVault( activity: androidx.fragment.app.FragmentActivity?, name: String, masterPassword: String, strategy: StorageStrategy, description: String? = null, setAsDefault: Boolean = false, enableBiometric: Boolean = false )</ID>
    <ID>LongMethod:VaultRepository.kt$VaultRepository$private fun decryptEntry(entity: VaultEntryEntity, vaultKey: SecretKey): DecryptedEntry</ID>
    <ID>LongMethod:VaultRepository.kt$VaultRepository$suspend fun createEntry( vaultId: String, entry: DecryptedEntry ): String</ID>
    <ID>LongMethod:VaultRepository.kt$VaultRepository$suspend fun exportVault(vaultId: String, masterPassword: String): ByteArray?</ID>
    <ID>LongMethod:VaultRepository.kt$VaultRepository$suspend fun importVault(encryptedData: ByteArray, masterPassword: String): Boolean</ID>
    <ID>LongMethod:VaultSelectorScreen.kt$@Composable private fun NoVaultsEmptyState( modifier: Modifier = Modifier, onCreateVault: () -&gt; Unit, onUseSimpleGenerator: () -&gt; Unit )</ID>
    <ID>LongMethod:VaultSelectorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun VaultSelectorScreen( onVaultSelected: (VaultEntity) -&gt; Unit, onCreateVault: () -&gt; Unit, onNavigateToGenerator: () -&gt; Unit, viewModel: VaultViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:VaultSelectorScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun VaultCard( vault: VaultEntity, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:VaultSessionManager.kt$VaultSessionManager$suspend fun unlockVault(vaultId: String, masterPassword: String): Result&lt;Unit&gt;</ID>
    <ID>LongMethod:WebDAVConfigDialog.kt$@Composable fun WebDAVConfigDialog( onDismiss: () -&gt; Unit, onSave: (serverUrl: String, username: String, password: String, validateSSL: Boolean) -&gt; Unit, onTestConnection: (serverUrl: String, username: String, password: String, validateSSL: Boolean) -&gt; Unit, isTestingConnection: Boolean = false, testConnectionResult: TestConnectionResult? = null )</ID>
    <ID>LongParameterList:AppModule.kt$AppModule$( syllablesGenerator: SyllablesGenerator, passphraseGenerator: PassphraseGenerator, leetSpeakGenerator: LeetSpeakGenerator, customPhraseGenerator: CustomPhraseGenerator, applyCasingUseCase: ApplyCasingUseCase, placeCharactersUseCase: PlaceCharactersUseCase )</ID>
    <ID>LongParameterList:ConflictResolutionDialog.kt$( strategy: ConflictResolutionStrategy, title: String, icon: androidx.compose.ui.graphics.vector.ImageVector, iconColor: Color, isSelected: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:DashboardScreen.kt$( onNavigateToVault: (String) -&gt; Unit, onNavigateToVaultList: (String) -&gt; Unit, onNavigateToVaultManager: () -&gt; Unit, onNavigateToHistory: () -&gt; Unit, onNavigateToAnalyzer: () -&gt; Unit, onNavigateToCustomPhrase: () -&gt; Unit, onNavigateToPresetManager: (String) -&gt; Unit, viewModel: DashboardViewModel = hiltViewModel() )</ID>
    <ID>LongParameterList:DatabaseModule.kt$DatabaseModule$( vaultDao: VaultDao, entryDao: VaultEntryDao, folderDao: FolderDao, tagDao: TagDao, presetDao: PresetDao, cryptoManager: VaultCryptoManager, keystoreManager: com.julien.genpwdpro.security.KeystoreManager )</ID>
    <ID>LongParameterList:MainOptionsSection.kt$( wordCount: Int, separator: String, dictionary: DictionaryType, onWordCountChange: (Int) -&gt; Unit, onSeparatorChange: (String) -&gt; Unit, onDictionaryChange: (DictionaryType) -&gt; Unit )</ID>
    <ID>LongParameterList:PasswordAnalyzer.kt$PasswordAnalyzer$( length: Int, hasLowercase: Boolean, hasUppercase: Boolean, hasDigits: Boolean, hasSpecials: Boolean, uniqueChars: Int, repeatedChars: List&lt;String&gt;, sequentialPatterns: List&lt;String&gt;, commonWords: List&lt;String&gt; )</ID>
    <ID>LongParameterList:VaultManagerScreen.kt$( vault: VaultRegistryEntry, isDefault: Boolean, isLoaded: Boolean, onSetDefault: () -&gt; Unit, onLoad: () -&gt; Unit, onUnload: () -&gt; Unit, onDelete: () -&gt; Unit, onOpen: () -&gt; Unit )</ID>
    <ID>LongParameterList:VaultMigrationManager.kt$VaultMigrationManager$( @ApplicationContext private val context: Context, private val vaultDao: VaultDao, private val vaultEntryDao: VaultEntryDao, private val folderDao: FolderDao, private val tagDao: TagDao, private val presetDao: PresetDao, private val vaultRegistryDao: VaultRegistryDao, private val vaultFileManager: VaultFileManager, private val cryptoManager: VaultCryptoManager )</ID>
    <ID>LongParameterList:VaultRepository.kt$VaultRepository$( private val vaultDao: VaultDao, private val entryDao: VaultEntryDao, private val folderDao: FolderDao, private val tagDao: TagDao, private val presetDao: PresetDao, private val cryptoManager: VaultCryptoManager, private val keystoreManager: KeystoreManager )</ID>
    <ID>LoopWithTooManyJumpStatements:ImportExportRepository.kt$ImportExportRepository$while</ID>
    <ID>LoopWithTooManyJumpStatements:OtpQrScannerActivity.kt$OtpQrScannerActivity$for</ID>
    <ID>LoopWithTooManyJumpStatements:PasswordHealthViewModel.kt$PasswordHealthViewModel$for</ID>
    <ID>LoopWithTooManyJumpStatements:WebDAVProvider.kt$WebDAVProvider$for</ID>
    <ID>LoopWithTooManyJumpStatements:WebDAVProvider.kt$WebDAVProvider$while</ID>
    <ID>MagicNumber:AnalyzerScreen.kt$0xFF10B981</ID>
    <ID>MagicNumber:AnalyzerScreen.kt$0xFFEF4444</ID>
    <ID>MagicNumber:AnalyzerScreen.kt$0xFFFF6B6B</ID>
    <ID>MagicNumber:AnalyzerScreen.kt$100</ID>
    <ID>MagicNumber:AnalyzerScreen.kt$5</ID>
    <ID>MagicNumber:AnimatedPasswordCard.kt$0.5f</ID>
    <ID>MagicNumber:AnimatedPasswordCard.kt$100.0</ID>
    <ID>MagicNumber:AnimatedPasswordCard.kt$10f</ID>
    <ID>MagicNumber:AnimatedPasswordCard.kt$12f</ID>
    <ID>MagicNumber:AnimatedPasswordCard.kt$1500</ID>
    <ID>MagicNumber:AnimatedPasswordCard.kt$50</ID>
    <ID>MagicNumber:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$3</ID>
    <ID>MagicNumber:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$4</ID>
    <ID>MagicNumber:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$5</ID>
    <ID>MagicNumber:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$6</ID>
    <ID>MagicNumber:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$7</ID>
    <ID>MagicNumber:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$8</ID>
    <ID>MagicNumber:AppLifecycleObserver.kt$AppLifecycleObserver$1000</ID>
    <ID>MagicNumber:AppLifecycleObserver.kt$AppLifecycleObserver$60</ID>
    <ID>MagicNumber:AppLockManager.kt$AppLockManager$1000</ID>
    <ID>MagicNumber:AutoSyncScheduler.kt$AutoSyncScheduler$1440L</ID>
    <ID>MagicNumber:AutoSyncScheduler.kt$AutoSyncScheduler$15</ID>
    <ID>MagicNumber:AutoSyncScheduler.kt$AutoSyncScheduler$15L</ID>
    <ID>MagicNumber:AutoSyncScheduler.kt$AutoSyncScheduler$30L</ID>
    <ID>MagicNumber:AutoSyncScheduler.kt$AutoSyncScheduler$60L</ID>
    <ID>MagicNumber:BiometricVaultManager.kt$BiometricVaultManager$256</ID>
    <ID>MagicNumber:BiometricVaultManager.kt$BiometricVaultManager.&lt;no name provided&gt;$12</ID>
    <ID>MagicNumber:ClipboardUtils.kt$ClipboardUtils$1000L</ID>
    <ID>MagicNumber:CloudProviderConfigDialog.kt$0.85f</ID>
    <ID>MagicNumber:CloudProviderConfigDialog.kt$0.9f</ID>
    <ID>MagicNumber:CloudProviderConfigDialog.kt$0xFF0D47A1</ID>
    <ID>MagicNumber:CloudProviderConfigDialog.kt$0xFF1976D2</ID>
    <ID>MagicNumber:CloudProviderConfigDialog.kt$0xFF1B5E20</ID>
    <ID>MagicNumber:CloudProviderConfigDialog.kt$0xFF2E7D32</ID>
    <ID>MagicNumber:CloudProviderConfigDialog.kt$0xFF388E3C</ID>
    <ID>MagicNumber:CloudProviderConfigDialog.kt$0xFFE3F2FD</ID>
    <ID>MagicNumber:CloudProviderConfigDialog.kt$0xFFE8F5E9</ID>
    <ID>MagicNumber:CloudSyncWorker.kt$CloudSyncWorker$3</ID>
    <ID>MagicNumber:CloudSyncWorker.kt$CloudSyncWorker.Companion$15</ID>
    <ID>MagicNumber:CloudSyncWorker.kt$CloudSyncWorker.Companion$5</ID>
    <ID>MagicNumber:CloudSyncWorker.kt$CloudSyncWorker.Companion$60000</ID>
    <ID>MagicNumber:Color.kt$0xFF0891C7</ID>
    <ID>MagicNumber:Color.kt$0xFF0A0E1A</ID>
    <ID>MagicNumber:Color.kt$0xFF0F172A</ID>
    <ID>MagicNumber:Color.kt$0xFF10B981</ID>
    <ID>MagicNumber:Color.kt$0xFF131A34</ID>
    <ID>MagicNumber:Color.kt$0xFF15BEFF</ID>
    <ID>MagicNumber:Color.kt$0xFF1A2240</ID>
    <ID>MagicNumber:Color.kt$0xFF475569</ID>
    <ID>MagicNumber:Color.kt$0xFF5A6390</ID>
    <ID>MagicNumber:Color.kt$0xFF8C94CA</ID>
    <ID>MagicNumber:Color.kt$0xFF94A3B8</ID>
    <ID>MagicNumber:Color.kt$0xFFD6DCFF</ID>
    <ID>MagicNumber:Color.kt$0xFFEF4444</ID>
    <ID>MagicNumber:Color.kt$0xFFF1F5F9</ID>
    <ID>MagicNumber:Color.kt$0xFFF59E0B</ID>
    <ID>MagicNumber:Color.kt$0xFFFBFCFE</ID>
    <ID>MagicNumber:Color.kt$0xFFFFFFFF</ID>
    <ID>MagicNumber:ConflictResolutionDialog.kt$0.9f</ID>
    <ID>MagicNumber:ConflictResolutionDialog.kt$0xFF2196F3</ID>
    <ID>MagicNumber:ConflictResolutionDialog.kt$0xFF4CAF50</ID>
    <ID>MagicNumber:ConflictResolutionDialog.kt$0xFF5D4037</ID>
    <ID>MagicNumber:ConflictResolutionDialog.kt$0xFFF57C00</ID>
    <ID>MagicNumber:ConflictResolutionDialog.kt$0xFFFF9800</ID>
    <ID>MagicNumber:ConflictResolutionDialog.kt$0xFFFFF3E0</ID>
    <ID>MagicNumber:ConflictResolutionDialog.kt$1024</ID>
    <ID>MagicNumber:ConflictResolutionDialog.kt$8</ID>
    <ID>MagicNumber:ConflictResolver.kt$ConflictResolver$100</ID>
    <ID>MagicNumber:ConflictResolver.kt$ConflictResolver$1000</ID>
    <ID>MagicNumber:CreateVaultScreen.kt$0.5</ID>
    <ID>MagicNumber:CreateVaultScreen.kt$10</ID>
    <ID>MagicNumber:CreateVaultScreen.kt$100</ID>
    <ID>MagicNumber:CreateVaultScreen.kt$12</ID>
    <ID>MagicNumber:CreateVaultScreen.kt$15</ID>
    <ID>MagicNumber:CreateVaultScreen.kt$16</ID>
    <ID>MagicNumber:CreateVaultScreen.kt$20</ID>
    <ID>MagicNumber:CreateVaultScreen.kt$30</ID>
    <ID>MagicNumber:CreateVaultScreen.kt$8</ID>
    <ID>MagicNumber:CustomPhraseGenerator.kt$CustomPhraseGenerator$10</ID>
    <ID>MagicNumber:CustomPhraseGenerator.kt$CustomPhraseGenerator$50</ID>
    <ID>MagicNumber:DashboardScreen.kt$24</ID>
    <ID>MagicNumber:DashboardScreen.kt$3</ID>
    <ID>MagicNumber:DashboardScreen.kt$60</ID>
    <ID>MagicNumber:DashboardScreen.kt$60_000L</ID>
    <ID>MagicNumber:DashboardScreen.kt$7</ID>
    <ID>MagicNumber:DatabaseOpenHelperFactoryProvider.kt$SqlCipherPassphraseProvider$3</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$0xFF10B981</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$0xFF15BEFF</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$0xFFEF4444</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$0xFFF59E0B</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$10</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$10.0</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$100</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$12.0</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$26</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$50</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$52</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$62</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$70</ID>
    <ID>MagicNumber:EntropyCalculator.kt$EntropyCalculator$94</ID>
    <ID>MagicNumber:EntryEditScreen.kt$16</ID>
    <ID>MagicNumber:ExpandableSection.kt$300</ID>
    <ID>MagicNumber:FileVaultRepository.kt$FileVaultRepository$8</ID>
    <ID>MagicNumber:GenPwdAutofillService.kt$GenPwdAutofillService$10</ID>
    <ID>MagicNumber:GenPwdAutofillService.kt$GenPwdAutofillService$26</ID>
    <ID>MagicNumber:GenPwdAutofillService.kt$GenPwdAutofillService$32</ID>
    <ID>MagicNumber:GeneratePasswordUseCase.kt$GeneratePasswordUseCase$10</ID>
    <ID>MagicNumber:GeneratorScreen.kt$10</ID>
    <ID>MagicNumber:GeneratorScreen.kt$5</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$10</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$100</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$150</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$20</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$200</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$255</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$3</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$30</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$40</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$5</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$50</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$60</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticFeedbackHelper$80</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticPatterns$100</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticPatterns$30</ID>
    <ID>MagicNumber:HapticUtils.kt$HapticPatterns$50</ID>
    <ID>MagicNumber:HistoryViewModel.kt$HistoryViewModel$300</ID>
    <ID>MagicNumber:HistoryViewModel.kt$HistoryViewModel$5000</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$10</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$100</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$12</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$15</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$16</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$20</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$25</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$3</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$30</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$4</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$5</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$6</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$7</ID>
    <ID>MagicNumber:ImportExportRepository.kt$ImportExportRepository$8</ID>
    <ID>MagicNumber:KeystoreManager.kt$KeystoreManager$30</ID>
    <ID>MagicNumber:Navigation.kt$NavigationViewModel$5000</ID>
    <ID>MagicNumber:OneDriveProvider.kt$OneDriveProvider$1024</ID>
    <ID>MagicNumber:OneDriveProvider.kt$OneDriveProvider$201</ID>
    <ID>MagicNumber:OneDriveProvider.kt$OneDriveProvider$204</ID>
    <ID>MagicNumber:OneDriveProvider.kt$OneDriveProvider$4</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalysisStrength.MEDIUM$0xFFF59E0B</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalysisStrength.STRONG$0xFF10B981</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalysisStrength.VERY_STRONG$0xFF15BEFF</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalysisStrength.VERY_WEAK$0xFFEF4444</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalysisStrength.WEAK$0xFFFF6B6B</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$0.5</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$0.7</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$10</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$10_000_000_000.0</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$12</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$20</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$26</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$2_592_000</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$3</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$30</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$31_536_000</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$31_536_000_000</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$32</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$3600</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$3_153_600_000</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$5</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$50</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$60</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$70</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$8</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$86400</ID>
    <ID>MagicNumber:PasswordAnalyzer.kt$PasswordAnalyzer$90</ID>
    <ID>MagicNumber:PasswordCard.kt$8</ID>
    <ID>MagicNumber:PasswordHealthScreen.kt$0xFFFFA726</ID>
    <ID>MagicNumber:PasswordHealthScreen.kt$40</ID>
    <ID>MagicNumber:PasswordHealthScreen.kt$60</ID>
    <ID>MagicNumber:PasswordHealthScreen.kt$80</ID>
    <ID>MagicNumber:PasswordHealthViewModel.kt$PasswordHealthViewModel$100</ID>
    <ID>MagicNumber:PasswordHealthViewModel.kt$PasswordHealthViewModel$1000</ID>
    <ID>MagicNumber:PasswordHealthViewModel.kt$PasswordHealthViewModel$15</ID>
    <ID>MagicNumber:PasswordHealthViewModel.kt$PasswordHealthViewModel$24</ID>
    <ID>MagicNumber:PasswordHealthViewModel.kt$PasswordHealthViewModel$25</ID>
    <ID>MagicNumber:PasswordHealthViewModel.kt$PasswordHealthViewModel$30</ID>
    <ID>MagicNumber:PasswordHealthViewModel.kt$PasswordHealthViewModel$60</ID>
    <ID>MagicNumber:PasswordHealthViewModel.kt$PasswordHealthViewModel$8</ID>
    <ID>MagicNumber:PasswordHealthViewModel.kt$PasswordHealthViewModel$90</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordResult$100</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordResult$50</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordResult$70</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordStrength.MEDIUM$0.5f</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordStrength.MEDIUM$0xFFF59E0B</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordStrength.STRONG$0.75f</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordStrength.STRONG$0xFF10B981</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordStrength.VERY_STRONG$0xFF15BEFF</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordStrength.WEAK$0.25f</ID>
    <ID>MagicNumber:PasswordResult.kt$PasswordStrength.WEAK$0xFFEF4444</ID>
    <ID>MagicNumber:PasswordStrengthIndicator.kt$0xFF10B981</ID>
    <ID>MagicNumber:PasswordStrengthIndicator.kt$0xFF15BEFF</ID>
    <ID>MagicNumber:PasswordStrengthIndicator.kt$0xFFF59E0B</ID>
    <ID>MagicNumber:PasswordStrengthIndicator.kt$0xFFFF6B6B</ID>
    <ID>MagicNumber:PlaceCharactersUseCase.kt$PlaceCharactersUseCase$100</ID>
    <ID>MagicNumber:PresetListScreen.kt$1000</ID>
    <ID>MagicNumber:PresetListScreen.kt$24</ID>
    <ID>MagicNumber:PresetListScreen.kt$60</ID>
    <ID>MagicNumber:PresetViewModel.kt$PresetUiState$3</ID>
    <ID>MagicNumber:ProtonDriveProvider.kt$ProtonDriveProvider$1000</ID>
    <ID>MagicNumber:ProtonDriveProvider.kt$ProtonDriveProvider$64</ID>
    <ID>MagicNumber:ProviderCredentialManager.kt$ProviderCredentialManager$1000</ID>
    <ID>MagicNumber:ScannerOverlayView.kt$ScannerOverlayView$0.5f</ID>
    <ID>MagicNumber:ScannerOverlayView.kt$ScannerOverlayView$0.75f</ID>
    <ID>MagicNumber:SecureNote.kt$SecureCard$4</ID>
    <ID>MagicNumber:SecuritySettingsScreen.kt$1000</ID>
    <ID>MagicNumber:SecuritySettingsScreen.kt$10_000L</ID>
    <ID>MagicNumber:SecuritySettingsScreen.kt$30_000L</ID>
    <ID>MagicNumber:SecuritySettingsScreen.kt$5_000L</ID>
    <ID>MagicNumber:SecuritySettingsScreen.kt$60_000L</ID>
    <ID>MagicNumber:SessionManager.kt$SessionManager$1000</ID>
    <ID>MagicNumber:SessionManager.kt$SessionManager$60</ID>
    <ID>MagicNumber:Settings.kt$Settings$100</ID>
    <ID>MagicNumber:Settings.kt$Settings$3</ID>
    <ID>MagicNumber:Settings.kt$Settings$8</ID>
    <ID>MagicNumber:SwipeablePasswordCard.kt$0.5f</ID>
    <ID>MagicNumber:SwipeablePasswordCard.kt$0.7f</ID>
    <ID>MagicNumber:SwipeablePasswordCard.kt$0.8f</ID>
    <ID>MagicNumber:SwipeablePasswordCard.kt$200</ID>
    <ID>MagicNumber:SwipeablePasswordCard.kt$300</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$0xFF2196F3</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$0xFF4CAF50</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$0xFFD32F2F</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$0xFFF57C00</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$0xFFFF5252</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$0xFFFF9800</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$1024</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$1024.0</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$70f</ID>
    <ID>MagicNumber:SyncHistoryScreen.kt$90f</ID>
    <ID>MagicNumber:SyncPreferencesManager.kt$SyncStatistics$100f</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$0xFF03A9F4</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$0xFF2196F3</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$0xFF2E7D32</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$0xFF388E3C</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$0xFF4CAF50</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$0xFFC62828</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$0xFFD32F2F</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$0xFFFF5252</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$0xFFFF9800</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$1000</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$300</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$3000</ID>
    <ID>MagicNumber:SyncProgressIndicator.kt$800</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$0xFF10B981</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$0xFF3B82F6</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$0xFF9CA3AF</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$0xFFEF4444</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$0xFFF59E0B</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$1800000L</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$1_000</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$1_000_000</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$1_000_000_000</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$21600000L</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$3</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$3600000</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$3600000L</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$60000</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$604800000</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$7200000L</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$8</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$86400000</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$86400000L</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$900000L</ID>
    <ID>MagicNumber:SyncSettingsScreen.kt$SyncSettingsViewModel$1500</ID>
    <ID>MagicNumber:SyncStatus.kt$StorageQuota$100f</ID>
    <ID>MagicNumber:SyncWorker.kt$SyncWorker$3</ID>
    <ID>MagicNumber:ThemeToggle.kt$0xFF0891C7</ID>
    <ID>MagicNumber:ThemeToggle.kt$0xFF15BEFF</ID>
    <ID>MagicNumber:ThemeToggle.kt$0xFF1A2240</ID>
    <ID>MagicNumber:ThemeToggle.kt$0xFFF1F5F9</ID>
    <ID>MagicNumber:TotpGenerator.kt$TotpGenerator$0x7FFFFFFF</ID>
    <ID>MagicNumber:TotpGenerator.kt$TotpGenerator$1000</ID>
    <ID>MagicNumber:TotpGenerator.kt$TotpGenerator$100f</ID>
    <ID>MagicNumber:TotpGenerator.kt$TotpGenerator$4</ID>
    <ID>MagicNumber:TotpGenerator.kt$TotpGenerator$8</ID>
    <ID>MagicNumber:UnlockVaultScreen.kt$3</ID>
    <ID>MagicNumber:UnlockVaultScreen.kt$3_600_000</ID>
    <ID>MagicNumber:UnlockVaultScreen.kt$604_800_000</ID>
    <ID>MagicNumber:UnlockVaultScreen.kt$60_000</ID>
    <ID>MagicNumber:UnlockVaultScreen.kt$86_400_000</ID>
    <ID>MagicNumber:VaultCryptoManager.kt$VaultCryptoManager$1024L</ID>
    <ID>MagicNumber:VaultCryptoManager.kt$VaultCryptoManager$16</ID>
    <ID>MagicNumber:VaultListScreen.kt$1000</ID>
    <ID>MagicNumber:VaultManagerScreen.kt$1024</ID>
    <ID>MagicNumber:VaultManagerScreen.kt$1024.0</ID>
    <ID>MagicNumber:VaultManagerScreen.kt$8</ID>
    <ID>MagicNumber:VaultManagerViewModel.kt$VaultManagerViewModel$5000</ID>
    <ID>MagicNumber:VaultRepository.kt$VaultRepository$12</ID>
    <ID>MagicNumber:VaultRepository.kt$VaultRepository$3</ID>
    <ID>MagicNumber:VaultRepository.kt$VaultRepository$4</ID>
    <ID>MagicNumber:VaultSelectorScreen.kt$3_600_000</ID>
    <ID>MagicNumber:VaultSelectorScreen.kt$604_800_000</ID>
    <ID>MagicNumber:VaultSelectorScreen.kt$60_000</ID>
    <ID>MagicNumber:VaultSelectorScreen.kt$86_400_000</ID>
    <ID>MagicNumber:VaultSessionManager.kt$VaultSessionManager$1000L</ID>
    <ID>MagicNumber:VaultSessionManager.kt$VaultSessionManager$60</ID>
    <ID>MagicNumber:VaultSyncViewModel.kt$VaultSyncViewModel$1024</ID>
    <ID>MagicNumber:VaultSyncViewModel.kt$VaultSyncViewModel$1024.0</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0.9f</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFF0D47A1</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFF1976D2</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFF1B5E20</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFF2E7D32</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFF388E3C</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFFB71C1C</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFFC62828</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFFD32F2F</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFFE3F2FD</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFFE8F5E9</ID>
    <ID>MagicNumber:WebDAVConfigDialog.kt$0xFFFFEBEE</ID>
    <ID>MagicNumber:WebDAVProvider.kt$WebDAVProvider$15</ID>
    <ID>MagicNumber:WebDAVProvider.kt$WebDAVProvider$200</ID>
    <ID>MagicNumber:WebDAVProvider.kt$WebDAVProvider$201</ID>
    <ID>MagicNumber:WebDAVProvider.kt$WebDAVProvider$204</ID>
    <ID>MagicNumber:WebDAVProvider.kt$WebDAVProvider$207</ID>
    <ID>MagicNumber:WebDAVProvider.kt$WebDAVProvider$404</ID>
    <ID>MagicNumber:WindowSizeUtils.kt$3</ID>
    <ID>MagicNumber:WindowSizeUtils.kt$AdaptiveTextSize$1.1f</ID>
    <ID>MagicNumber:WindowSizeUtils.kt$AdaptiveTextSize$1.2f</ID>
    <ID>MatchingDeclarationName:NavGraph.kt$Screen</ID>
    <ID>MatchingDeclarationName:ShortcutManager.kt$AppShortcutManager</ID>
    <ID>MatchingDeclarationName:SwipeablePasswordCard.kt$SwipeDirection</ID>
    <ID>MaxLineLength:AnalyzerScreen.kt$if</ID>
    <ID>MaxLineLength:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$database.execSQL("CREATE INDEX IF NOT EXISTS index_entry_tag_cross_ref_entryId ON entry_tag_cross_ref(entryId)")</ID>
    <ID>MaxLineLength:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$database.execSQL("CREATE INDEX IF NOT EXISTS index_entry_tag_cross_ref_tagId ON entry_tag_cross_ref(tagId)")</ID>
    <ID>MaxLineLength:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$database.execSQL("CREATE INDEX IF NOT EXISTS index_vault_entries_isFavorite ON vault_entries(isFavorite)")</ID>
    <ID>MaxLineLength:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$database.execSQL("CREATE INDEX IF NOT EXISTS index_vault_entries_modifiedAt ON vault_entries(modifiedAt)")</ID>
    <ID>MaxLineLength:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$database.execSQL("CREATE INDEX IF NOT EXISTS index_vault_registry_isDefault ON vault_registry(isDefault)")</ID>
    <ID>MaxLineLength:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$database.execSQL("CREATE INDEX IF NOT EXISTS index_vault_registry_storageStrategy ON vault_registry(storageStrategy)")</ID>
    <ID>MaxLineLength:CloudProviderConfigDialog.kt$message = "Google Drive utilise OAuth2 pour l'authentification. Vous serez redirigé vers Google pour vous connecter."</ID>
    <ID>MaxLineLength:CloudProviderConfigDialog.kt$message = "OneDrive nécessite un Client ID Azure AD. Suivez le guide OAUTH2_SETUP_GUIDE.md pour obtenir vos identifiants."</ID>
    <ID>MaxLineLength:CloudProviderConfigDialog.kt$message = "Proton Drive offre le plus haut niveau de confidentialité avec chiffrement end-to-end natif et serveurs suisses."</ID>
    <ID>MaxLineLength:ConflictResolutionDialog.kt$"La version cloud remplacera la version locale. Toutes les modifications présentes uniquement localement seront perdues."</ID>
    <ID>MaxLineLength:ConflictResolutionDialog.kt$"La version locale remplacera la version cloud. Toutes les modifications présentes uniquement dans le cloud seront perdues."</ID>
    <ID>MaxLineLength:CreateVaultScreen.kt$strength &lt; 30 -&gt; "Faible - Utilisez au moins 12 caractères avec majuscules, chiffres et symboles"</ID>
    <ID>MaxLineLength:CreateVaultScreen.kt$text = "Attention : Si vous oubliez votre mot de passe maître, vos données seront définitivement perdues. Il n'existe aucun moyen de récupération."</ID>
    <ID>MaxLineLength:CreateVaultScreen.kt$text = "Créez votre coffre-fort sécurisé pour stocker vos mots de passe, notes et informations sensibles."</ID>
    <ID>MaxLineLength:CreateVaultScreen.kt$visualTransformation = if (showConfirmPassword) VisualTransformation.None else PasswordVisualTransformation()</ID>
    <ID>MaxLineLength:CustomPhraseGenerator.kt$CustomPhraseGenerator.Companion$"Animaux" to listOf("chat", "chien", "lion", "tigre", "ours", "loup", "aigle", "dauphin", "éléphant", "girafe")</ID>
    <ID>MaxLineLength:CustomPhraseGenerator.kt$CustomPhraseGenerator.Companion$"Fruits" to listOf("pomme", "banane", "orange", "fraise", "kiwi", "mangue", "ananas", "poire", "raisin", "cerise")</ID>
    <ID>MaxLineLength:CustomPhraseGenerator.kt$CustomPhraseGenerator.Companion$"Métiers" to listOf("docteur", "avocat", "artiste", "chef", "pilote", "professeur", "ingénieur", "designer", "écrivain", "musicien")</ID>
    <ID>MaxLineLength:CustomPhraseGenerator.kt$CustomPhraseGenerator.Companion$"Nature" to listOf("montagne", "océan", "forêt", "désert", "lac", "rivière", "prairie", "volcan", "cascade", "grotte")</ID>
    <ID>MaxLineLength:CustomPhraseGenerator.kt$CustomPhraseGenerator.Companion$"Pays" to listOf("france", "japon", "brésil", "canada", "italie", "espagne", "grèce", "égypte", "mexique", "norvège")</ID>
    <ID>MaxLineLength:EncryptionManager.kt$EncryptionManager$fun</ID>
    <ID>MaxLineLength:EntropyCalculator.kt$EntropyCalculator$charset.contains('a') &amp;&amp; charset.contains('A') &amp;&amp; charset.any { !it.isLetterOrDigit() } &amp;&amp; charset.any { it.isDigit() } -&gt; 94</ID>
    <ID>MaxLineLength:EntryEditScreen.kt$tint = if (hasTOTP) MaterialTheme.colorScheme.onSecondaryContainer else MaterialTheme.colorScheme.onSurface</ID>
    <ID>MaxLineLength:EntryEditScreen.kt$tint = if (isFavorite) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface</ID>
    <ID>MaxLineLength:EntryEditScreen.kt$visualTransformation = if (showPassword) VisualTransformation.None else PasswordVisualTransformation()</ID>
    <ID>MaxLineLength:EntryViewModel.kt$EntryViewModel$_uiState.value = EntryUiState.Error("La gestion des cartes n'est pas encore implémentée dans l'UI")</ID>
    <ID>MaxLineLength:EntryViewModel.kt$EntryViewModel$_uiState.value = EntryUiState.Error("La gestion des identités n'est pas encore implémentée dans l'UI")</ID>
    <ID>MaxLineLength:EntryViewModel.kt$EntryViewModel$fileVaultRepository.getEntryById(currentEntryId!!)?.createdAt ?: System.currentTimeMillis()</ID>
    <ID>MaxLineLength:GeneratorViewModel.kt$GeneratorViewModel$private val _currentPreset = MutableStateFlow&lt;com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset?&gt;(null)</ID>
    <ID>MaxLineLength:GeneratorViewModel.kt$GeneratorViewModel$private val _presets = MutableStateFlow&lt;List&lt;com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset&gt;&gt;(emptyList())</ID>
    <ID>MaxLineLength:GeneratorViewModel.kt$GeneratorViewModel$val currentPreset: StateFlow&lt;com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset?&gt; = _currentPreset.asStateFlow()</ID>
    <ID>MaxLineLength:GeneratorViewModel.kt$GeneratorViewModel$val presets: StateFlow&lt;List&lt;com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset&gt;&gt; = _presets.asStateFlow()</ID>
    <ID>MaxLineLength:GoogleDriveProvider.kt$GoogleDriveProvider$suspend</ID>
    <ID>MaxLineLength:HistoryScreen.kt$text = { Text("Cette action supprimera tous les mots de passe de l'historique. Cette action est irréversible.") }</ID>
    <ID>MaxLineLength:ImportExportRepository.kt$ImportExportRepository$writer.write("title,username,password,url,notes,type,totp_secret,favorite,icon,folder,tags,created_at,updated_at\n")</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$"legacyLocked=${startupResult.legacySessionLocked}, registryReset=${startupResult.registryResetSucceeded}, "</ID>
    <ID>MaxLineLength:OnboardingScreen.kt$description = "Générez des mots de passe sécurisés avec plusieurs modes : syllabes, passphrase, ou leet speak."</ID>
    <ID>MaxLineLength:OnboardingScreen.kt$description = "L'entropie mesure la force de votre mot de passe en bits. Plus c'est élevé, plus c'est sécurisé.\n\n• &lt;40 bits = Faible\n• 60-80 bits = Moyen\n• 80-100 bits = Fort\n• &gt;100 bits = Très fort"</ID>
    <ID>MaxLineLength:OnboardingScreen.kt$description = "• Widget écran d'accueil\n• Raccourcis rapides\n• Copie sécurisée (60s)\n• Historique local\n• 5 langues supportées"</ID>
    <ID>MaxLineLength:OtpModels.kt$OtpConfig$return "OtpConfig(type=$type, issuer=$issuer, label=$label, secret=$maskedSecret, algorithm=${algorithm.value}, digits=$digits, period=$period, $counterLabel)"</ID>
    <ID>MaxLineLength:PasswordAnalyzer.kt$PasswordAnalyzer$val strength = determineStrength(entropy, length, uniqueChars, sequentialPatterns.isNotEmpty(), commonWords.isNotEmpty())</ID>
    <ID>MaxLineLength:PasswordCard.kt$imageVector = if (result.isMasked) Icons.Default.Visibility else Icons.Default.VisibilityOff</ID>
    <ID>MaxLineLength:PasswordHistoryDao.kt$PasswordHistoryDao$@Query("DELETE FROM password_history WHERE id IN (SELECT id FROM password_history ORDER BY timestamp ASC LIMIT :count)")</ID>
    <ID>MaxLineLength:PresetListScreen.kt$text = "Configurez vos paramètres dans le générateur puis sauvegardez-les comme preset pour un accès rapide"</ID>
    <ID>MaxLineLength:PresetListScreen.kt$text = "Syllables: ${uiState.syllablesPresets.size}/3 • Passphrase: ${uiState.passphrasePresets.size}/3"</ID>
    <ID>MaxLineLength:SecuritySettingsScreen.kt$"Vos clés sont stockées dans un environnement d'exécution de confiance (TEE) ou un élément sécurisé (SE). Elles ne peuvent pas être extraites."</ID>
    <ID>MaxLineLength:SecuritySettingsScreen.kt$text = "Configurez une empreinte digitale ou reconnaissance faciale dans les paramètres de votre appareil"</ID>
    <ID>MaxLineLength:SecuritySettingsScreen.kt$text = "⚠️ Cette action supprimera toutes les clés de chiffrement. Les données chiffrées ne pourront plus être déchiffrées."</ID>
    <ID>MaxLineLength:SecuritySettingsScreen.kt$text = { Text("Êtes-vous sûr de vouloir supprimer toutes les clés de chiffrement ? Cette action est irréversible.") }</ID>
    <ID>MaxLineLength:SensitiveActionPreferencesTest.kt$SensitiveActionPreferencesTest$every { securePrefs.getLong(SensitiveActionPreferences.KEY_CLIPBOARD_TTL_MS, SensitiveActionPreferences.DEFAULT_CLIPBOARD_TTL_MS) } returns SensitiveActionPreferences.DEFAULT_CLIPBOARD_TTL_MS</ID>
    <ID>MaxLineLength:Settings.kt$Settings$val customPhraseFormat: com.julien.genpwdpro.domain.generators.CustomPhraseFormat = com.julien.genpwdpro.domain.generators.CustomPhraseFormat.SEPARATED</ID>
    <ID>MaxLineLength:SettingsDataStore.kt$SettingsDataStore$caseBlocks = preferences[PreferencesKeys.CASE_BLOCKS]?.let { parseCaseBlocks(it) } ?: listOf(CaseBlock.T, CaseBlock.L)</ID>
    <ID>MaxLineLength:SettingsDataStore.kt$SettingsDataStore$dictionary = preferences[PreferencesKeys.DICTIONARY]?.let { DictionaryType.valueOf(it) } ?: DictionaryType.FRENCH</ID>
    <ID>MaxLineLength:SettingsDataStore.kt$SettingsDataStore$digitsPlacement = preferences[PreferencesKeys.DIGITS_PLACEMENT]?.let { Placement.valueOf(it) } ?: Placement.RANDOM</ID>
    <ID>MaxLineLength:SettingsDataStore.kt$SettingsDataStore$mode = preferences[PreferencesKeys.MODE]?.let { GenerationMode.valueOf(it) } ?: GenerationMode.SYLLABLES</ID>
    <ID>MaxLineLength:SettingsDataStore.kt$SettingsDataStore$specialsPlacement = preferences[PreferencesKeys.SPECIALS_PLACEMENT]?.let { Placement.valueOf(it) } ?: Placement.RANDOM</ID>
    <ID>MaxLineLength:SyncInitializer.kt$SyncInitializer$Log.d(TAG, "Loaded sync config: enabled=${config.enabled}, provider=${config.providerType}, autoSync=${config.autoSync}")</ID>
    <ID>MaxLineLength:SyncSettingsScreen.kt$SyncSettingsViewModel$Log.d("SyncSettingsViewModel", "Enabling auto-sync with interval: ${_uiState.value.config.syncInterval}")</ID>
    <ID>MaxLineLength:UnlockVaultScreen.kt$text = "Gagnez du temps en activant l'authentification par empreinte digitale ou reconnaissance faciale."</ID>
    <ID>MaxLineLength:VaultEntryDao.kt$VaultEntryDao$@Query("SELECT * FROM vault_entries WHERE vaultId = :vaultId AND passwordExpiresAt &gt; 0 AND passwordExpiresAt &lt; :now ORDER BY passwordExpiresAt ASC")</ID>
    <ID>MaxLineLength:VaultEntryDao.kt$VaultEntryDao$@Query("SELECT * FROM vault_entries WHERE vaultId = :vaultId AND passwordStrength &lt; :threshold ORDER BY passwordStrength ASC")</ID>
    <ID>MaxLineLength:VaultEntryDao.kt$VaultEntryDao$@Query("SELECT * FROM vault_entries WHERE vaultId = :vaultId AND requiresPasswordChange = 1 ORDER BY modifiedAt DESC")</ID>
    <ID>MaxLineLength:VaultEntryDao.kt$VaultEntryDao$fun</ID>
    <ID>MaxLineLength:VaultFileManager.kt$VaultFileManager$throw UnsupportedOperationException("Use createVaultFileToUri for custom paths - this returns Uri, not File")</ID>
    <ID>MaxLineLength:VaultListScreen.kt$tint = if (entry.isFavorite) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant</ID>
    <ID>MaxLineLength:VaultManagerScreen.kt$Text("Are you sure you want to delete \"$vaultName\"? This action cannot be undone and all data will be permanently lost.")</ID>
    <ID>MaxLineLength:VaultManagerScreen.kt$Text("Your vaults will be migrated to the new file-based storage system. This is a one-time operation and may take a few moments.")</ID>
    <ID>MaxLineLength:VaultManagerViewModel.kt$VaultManagerViewModel$android.util.Log.e("VaultManagerVM", "❌ Failed to save biometric for vault $vaultId: ${error.message}", error)</ID>
    <ID>MaxLineLength:VaultSelectorScreen.kt$text = "Créez votre premier coffre-fort sécurisé pour stocker vos mots de passe, notes et informations sensibles."</ID>
    <ID>MaxLineLength:VaultSyncViewModel.kt$VaultSyncViewModel$errorMessage = "${providerInfo.name} n'est pas encore complètement implémenté. Status: ${providerInfo.implementationStatus}"</ID>
    <ID>MaxLineLength:VaultSyncViewModel.kt$VaultSyncViewModel$if</ID>
    <ID>MaxLineLength:WebDAVConfigDialog.kt$message = "Attention: Désactiver la validation SSL expose vos données à des attaques MITM. N'utilisez cette option que pour des certificats auto-signés de confiance."</ID>
    <ID>MaxLineLength:WebDAVConfigDialog.kt$text = "WebDAV vous permet de synchroniser avec votre propre serveur. Compatible avec Nextcloud, ownCloud, Synology, et plus."</ID>
    <ID>MaxLineLength:WebDAVProvider.kt$WebDAVProvider$val available = extractFromXml(xml, "&lt;d:quota-available-bytes&gt;", "&lt;/d:quota-available-bytes&gt;")?.toLongOrNull() ?: -1L</ID>
    <ID>MaximumLineLength:AnalyzerScreen.kt$ </ID>
    <ID>MaximumLineLength:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$ </ID>
    <ID>MaximumLineLength:CloudProviderConfigDialog.kt$ </ID>
    <ID>MaximumLineLength:ConflictResolutionDialog.kt$ </ID>
    <ID>MaximumLineLength:CreateVaultScreen.kt$ </ID>
    <ID>MaximumLineLength:CustomPhraseGenerator.kt$CustomPhraseGenerator.Companion$ </ID>
    <ID>MaximumLineLength:EncryptionManager.kt$EncryptionManager$ </ID>
    <ID>MaximumLineLength:EntropyCalculator.kt$EntropyCalculator$ </ID>
    <ID>MaximumLineLength:EntryEditScreen.kt$ </ID>
    <ID>MaximumLineLength:EntryViewModel.kt$EntryViewModel$ </ID>
    <ID>MaximumLineLength:GeneratorViewModel.kt$GeneratorViewModel$ </ID>
    <ID>MaximumLineLength:GoogleDriveProvider.kt$GoogleDriveProvider$ </ID>
    <ID>MaximumLineLength:HistoryScreen.kt$ </ID>
    <ID>MaximumLineLength:ImportExportRepository.kt$ImportExportRepository$ </ID>
    <ID>MaximumLineLength:MainActivity.kt$MainActivity$ </ID>
    <ID>MaximumLineLength:OnboardingScreen.kt$ </ID>
    <ID>MaximumLineLength:OtpModels.kt$OtpConfig$ </ID>
    <ID>MaximumLineLength:PasswordAnalyzer.kt$PasswordAnalyzer$ </ID>
    <ID>MaximumLineLength:PasswordCard.kt$ </ID>
    <ID>MaximumLineLength:PasswordHistoryDao.kt$PasswordHistoryDao$ </ID>
    <ID>MaximumLineLength:PresetListScreen.kt$ </ID>
    <ID>MaximumLineLength:SecuritySettingsScreen.kt$ </ID>
    <ID>MaximumLineLength:SensitiveActionPreferencesTest.kt$SensitiveActionPreferencesTest$ </ID>
    <ID>MaximumLineLength:Settings.kt$Settings$ </ID>
    <ID>MaximumLineLength:SettingsDataStore.kt$SettingsDataStore$ </ID>
    <ID>MaximumLineLength:SyncInitializer.kt$SyncInitializer$ </ID>
    <ID>MaximumLineLength:SyncSettingsScreen.kt$SyncSettingsViewModel$ </ID>
    <ID>MaximumLineLength:UnlockVaultScreen.kt$ </ID>
    <ID>MaximumLineLength:VaultEntryDao.kt$VaultEntryDao$ </ID>
    <ID>MaximumLineLength:VaultFileManager.kt$VaultFileManager$ </ID>
    <ID>MaximumLineLength:VaultListScreen.kt$ </ID>
    <ID>MaximumLineLength:VaultManagerScreen.kt$ </ID>
    <ID>MaximumLineLength:VaultManagerViewModel.kt$VaultManagerViewModel$ </ID>
    <ID>MaximumLineLength:VaultSelectorScreen.kt$ </ID>
    <ID>MaximumLineLength:VaultSyncViewModel.kt$VaultSyncViewModel$ </ID>
    <ID>MaximumLineLength:WebDAVConfigDialog.kt$ </ID>
    <ID>MaximumLineLength:WebDAVProvider.kt$WebDAVProvider$ </ID>
    <ID>ModifierListSpacing:GeneratorViewModelTest.kt$data</ID>
    <ID>ModifierListSpacing:PasswordHistoryRepositoryTest.kt$data</ID>
    <ID>MultiLineIfElse:AnimatedPasswordCard.kt$0f</ID>
    <ID>MultiLineIfElse:ApplyCasingUseCase.kt$ApplyCasingUseCase$word</ID>
    <ID>MultiLineIfElse:ApplyCasingUseCase.kt$ApplyCasingUseCase$word.first().uppercaseChar() + word.drop(1).lowercase()</ID>
    <ID>MultiLineIfElse:CloudProviderConfigDialog.kt$PasswordVisualTransformation()</ID>
    <ID>MultiLineIfElse:CloudProviderConfigDialog.kt$VisualTransformation.None</ID>
    <ID>MultiLineIfElse:CloudProviderConfigDialog.kt$null</ID>
    <ID>MultiLineIfElse:ConflictResolutionDialog.kt$MaterialTheme.colorScheme.primaryContainer</ID>
    <ID>MultiLineIfElse:ConflictResolutionDialog.kt$MaterialTheme.colorScheme.surface</ID>
    <ID>MultiLineIfElse:ConflictResolutionDialog.kt$androidx.compose.foundation.BorderStroke(2.dp, MaterialTheme.colorScheme.primary)</ID>
    <ID>MultiLineIfElse:ConflictResolutionDialog.kt$null</ID>
    <ID>MultiLineIfElse:CreateVaultScreen.kt$null</ID>
    <ID>MultiLineIfElse:CustomPhraseGenerator.kt$CustomPhraseGenerator$word.lowercase()</ID>
    <ID>MultiLineIfElse:CustomPhraseGenerator.kt$CustomPhraseGenerator$word.replaceFirstChar { c -&gt; c.uppercase() }</ID>
    <ID>MultiLineIfElse:CustomPhraseScreen.kt$MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.3f)</ID>
    <ID>MultiLineIfElse:CustomPhraseScreen.kt$MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)</ID>
    <ID>MultiLineIfElse:CustomPhraseScreen.kt$MaterialTheme.colorScheme.primary</ID>
    <ID>MultiLineIfElse:CustomPhraseScreen.kt$MaterialTheme.colorScheme.primaryContainer</ID>
    <ID>MultiLineIfElse:CustomPhraseScreen.kt$MaterialTheme.colorScheme.surface</ID>
    <ID>MultiLineIfElse:CustomPhraseScreen.kt$MaterialTheme.colorScheme.surfaceVariant</ID>
    <ID>MultiLineIfElse:ImportExportRepository.kt$ImportExportRepository$""</ID>
    <ID>MultiLineIfElse:OnboardingScreen.kt$MaterialTheme.colorScheme.onSurface.copy(alpha = 0.3f)</ID>
    <ID>MultiLineIfElse:OnboardingScreen.kt$MaterialTheme.colorScheme.primary</ID>
    <ID>MultiLineIfElse:SwipeablePasswordCard.kt$0f</ID>
    <ID>MultiLineIfElse:SyncProgressIndicator.kt$Color(0xFF4CAF50)</ID>
    <ID>MultiLineIfElse:SyncProgressIndicator.kt$Color(0xFFFF5252)</ID>
    <ID>MultiLineIfElse:SyncSettingsScreen.kt$MaterialTheme.colorScheme.primaryContainer</ID>
    <ID>MultiLineIfElse:SyncSettingsScreen.kt$MaterialTheme.colorScheme.surface</ID>
    <ID>MultiLineIfElse:VaultManagerScreen.kt$0f</ID>
    <ID>MultiLineIfElse:VaultManagerScreen.kt$null</ID>
    <ID>MultiLineIfElse:VaultRepository.kt$VaultRepository$""</ID>
    <ID>MultiLineIfElse:WebDAVConfigDialog.kt$"Désactivé (certificats auto-signés)"</ID>
    <ID>MultiLineIfElse:WebDAVConfigDialog.kt$"Recommandé pour une sécurité maximale"</ID>
    <ID>MultiLineIfElse:WebDAVConfigDialog.kt$MaterialTheme.colorScheme.error</ID>
    <ID>MultiLineIfElse:WebDAVConfigDialog.kt$MaterialTheme.colorScheme.primary</ID>
    <ID>MultiLineIfElse:WebDAVConfigDialog.kt$PasswordVisualTransformation()</ID>
    <ID>MultiLineIfElse:WebDAVConfigDialog.kt$VisualTransformation.None</ID>
    <ID>NestedBlockDepth:CloudSyncWorker.kt$CloudSyncWorker$override suspend fun doWork(): Result</ID>
    <ID>NestedBlockDepth:IntentSanitizer.kt$IntentSanitizer$fun sanitize(bundle: Bundle, intent: Intent? = null, allowedKeys: Set&lt;String&gt; = emptySet())</ID>
    <ID>NoBlankLineBeforeRbrace:BiometricVaultManager.kt$BiometricVaultManager$ </ID>
    <ID>NoBlankLineBeforeRbrace:ClipboardUtilsTest.kt$ClipboardUtilsTest$ </ID>
    <ID>NoBlankLineBeforeRbrace:GenPwdAutofillService.kt$GenPwdAutofillService$ </ID>
    <ID>NoBlankLineBeforeRbrace:PasswordWidget.kt$PasswordWidget$ </ID>
    <ID>NoBlankLineBeforeRbrace:SyncSettingsScreen.kt$SyncSettingsViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:VaultFileManager.kt$VaultFileManager$ </ID>
    <ID>NoBlankLineBeforeRbrace:VaultManagerViewModel.kt$VaultManagerViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:VaultMigrationManager.kt$VaultMigrationManager$ </ID>
    <ID>NoBlankLineBeforeRbrace:VaultSessionManager.kt$VaultSessionManager$ </ID>
    <ID>NoConsecutiveBlankLines:VaultRegistryEntry.kt$ </ID>
    <ID>NoConsecutiveBlankLines:VaultRepository.kt$VaultRepository$ </ID>
    <ID>NoMultipleSpaces:ApplyCasingUseCaseTest.kt$ApplyCasingUseCaseTest$ </ID>
    <ID>NoMultipleSpaces:BiometricManager.kt$BiometricAvailability.AVAILABLE$ </ID>
    <ID>NoMultipleSpaces:BiometricManager.kt$BiometricAvailability.HARDWARE_UNAVAILABLE$ </ID>
    <ID>NoMultipleSpaces:BiometricManager.kt$BiometricAvailability.NONE_ENROLLED$ </ID>
    <ID>NoMultipleSpaces:BiometricManager.kt$BiometricAvailability.NO_HARDWARE$ </ID>
    <ID>NoMultipleSpaces:BiometricManager.kt$BiometricAvailability.SECURITY_UPDATE_REQUIRED$ </ID>
    <ID>NoMultipleSpaces:BiometricManager.kt$BiometricAvailability.UNKNOWN$ </ID>
    <ID>NoMultipleSpaces:BiometricManager.kt$BiometricAvailability.UNSUPPORTED$ </ID>
    <ID>NoMultipleSpaces:BiometricVaultManager.kt$BiometricVaultManager$ </ID>
    <ID>NoMultipleSpaces:CloudProviderFactory.kt$ImplementationStatus.IN_DEVELOPMENT$ </ID>
    <ID>NoMultipleSpaces:CloudProviderFactory.kt$ImplementationStatus.NOT_APPLICABLE$ </ID>
    <ID>NoMultipleSpaces:CloudProviderFactory.kt$ImplementationStatus.PRODUCTION_READY$ </ID>
    <ID>NoMultipleSpaces:CloudProviderFactory.kt$ImplementationStatus.TEMPLATE$ </ID>
    <ID>NoMultipleSpaces:CloudProviderFactory.kt$PrivacyLevel.CONFIGURABLE$ </ID>
    <ID>NoMultipleSpaces:CloudProviderFactory.kt$PrivacyLevel.HIGH$ </ID>
    <ID>NoMultipleSpaces:CloudProviderFactory.kt$PrivacyLevel.MAXIMUM$ </ID>
    <ID>NoMultipleSpaces:CloudProviderFactory.kt$PrivacyLevel.NOT_APPLICABLE$ </ID>
    <ID>NoMultipleSpaces:CloudProviderFactory.kt$PrivacyLevel.STANDARD$ </ID>
    <ID>NoMultipleSpaces:CustomPhraseGenerator.kt$CustomPhraseFormat.CAMEL_CASE$ </ID>
    <ID>NoMultipleSpaces:CustomPhraseGenerator.kt$CustomPhraseFormat.CAPITALIZED$ </ID>
    <ID>NoMultipleSpaces:CustomPhraseGenerator.kt$CustomPhraseFormat.KEBAB_CASE$ </ID>
    <ID>NoMultipleSpaces:CustomPhraseGenerator.kt$CustomPhraseFormat.SEPARATED$ </ID>
    <ID>NoMultipleSpaces:CustomPhraseGenerator.kt$CustomPhraseFormat.SNAKE_CASE$ </ID>
    <ID>NoMultipleSpaces:CustomPhraseGenerator.kt$WordListValidation$ </ID>
    <ID>NoMultipleSpaces:EntropyCalculator.kt$EntropyCalculator$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CaseBlock.L$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CaseBlock.T$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CaseBlock.U$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CaseMode.BLOCKS$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CaseMode.LOWER$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CaseMode.MIXED$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CaseMode.TITLE$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CaseMode.UPPER$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CharPolicy.ALPHANUMERIC$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CharPolicy.ALPHANUMERIC_LAYOUT$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CharPolicy.STANDARD$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$CharPolicy.STANDARD_LAYOUT$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$Placement.END$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$Placement.MIDDLE$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$Placement.RANDOM$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$Placement.START$ </ID>
    <ID>NoMultipleSpaces:GenerationMode.kt$Placement.VISUAL$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.CLICK$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.CONFIRM$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.ERROR$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.IMPACT_HEAVY$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.IMPACT_LIGHT$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.IMPACT_MEDIUM$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.LONG_PRESS$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.REJECT$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.SELECTION$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.SUCCESS$ </ID>
    <ID>NoMultipleSpaces:HapticUtils.kt$HapticFeedbackType.TICK$ </ID>
    <ID>NoMultipleSpaces:SecureNote.kt$SecureNote$ </ID>
    <ID>NoMultipleSpaces:SyncModels.kt$ConflictResolutionStrategy.LOCAL_WINS$ </ID>
    <ID>NoMultipleSpaces:SyncModels.kt$ConflictResolutionStrategy.MANUAL$ </ID>
    <ID>NoMultipleSpaces:SyncModels.kt$ConflictResolutionStrategy.MERGE$ </ID>
    <ID>NoMultipleSpaces:SyncModels.kt$ConflictResolutionStrategy.NEWEST_WINS$ </ID>
    <ID>NoMultipleSpaces:SyncModels.kt$ConflictResolutionStrategy.REMOTE_WINS$ </ID>
    <ID>NoMultipleSpaces:SyncModels.kt$SyncDataType.CUSTOM_WORDS$ </ID>
    <ID>NoMultipleSpaces:SyncModels.kt$SyncDataType.FAVORITES$ </ID>
    <ID>NoMultipleSpaces:SyncModels.kt$SyncDataType.HISTORY$ </ID>
    <ID>NoMultipleSpaces:SyncModels.kt$SyncDataType.SETTINGS$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$CloudProviderType.WEBDAV$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$ConflictResolutionStrategy.LOCAL_WINS$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$ConflictResolutionStrategy.MANUAL$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$ConflictResolutionStrategy.NEWEST_WINS$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$ConflictResolutionStrategy.REMOTE_WINS$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$ConflictResolutionStrategy.SMART_MERGE$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncInterval.DAILY$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncInterval.EVERY_15_MIN$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncInterval.EVERY_30_MIN$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncInterval.HOURLY$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncInterval.MANUAL$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncInterval.REALTIME$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncMetadata$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncStatus.CONFLICT$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncStatus.ERROR$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncStatus.NEVER_SYNCED$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncStatus.PENDING$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncStatus.SYNCED$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$SyncStatus.SYNCING$ </ID>
    <ID>NoMultipleSpaces:SyncStatus.kt$VaultSyncData$ </ID>
    <ID>NoMultipleSpaces:TotpGenerator.kt$TotpGenerator.TotpConfig$ </ID>
    <ID>NoMultipleSpaces:VaultCryptoManager.kt$VaultCryptoManager$ </ID>
    <ID>NoMultipleSpaces:VaultCryptoManager.kt$VaultCryptoManager.VaultCreationResult$ </ID>
    <ID>NoMultipleSpaces:VaultEntryEntity.kt$EntryType.CARD$ </ID>
    <ID>NoMultipleSpaces:VaultEntryEntity.kt$EntryType.IDENTITY$ </ID>
    <ID>NoMultipleSpaces:VaultEntryEntity.kt$EntryType.LOGIN$ </ID>
    <ID>NoMultipleSpaces:VaultEntryEntity.kt$EntryType.NOTE$ </ID>
    <ID>NoMultipleSpaces:VaultEntryEntity.kt$EntryType.WIFI$ </ID>
    <ID>NoMultipleSpaces:VaultFileHeader.kt$VaultFileHeader$ </ID>
    <ID>NoMultipleSpaces:VaultFileManager.kt$VaultFileManager$ </ID>
    <ID>NoMultipleSpaces:VaultManagerViewModel.kt$VaultManagerUiState$ </ID>
    <ID>NoMultipleSpaces:VaultSyncManagerTest.kt$VaultSyncManagerTest$ </ID>
    <ID>NoMultipleSpaces:WebDAVProvider.kt$WebDAVProvider$ </ID>
    <ID>NoMultipleSpaces:WindowSizeUtils.kt$DeviceType.PHONE$ </ID>
    <ID>NoMultipleSpaces:WindowSizeUtils.kt$DeviceType.TABLET$ </ID>
    <ID>NoTrailingSpaces:MainActivity.kt$MainActivity$ </ID>
    <ID>NoUnusedImports:AnalyzerScreen.kt$com.julien.genpwdpro.presentation.screens.analyzer.AnalyzerScreen.kt</ID>
    <ID>NoUnusedImports:AutofillRepository.kt$com.julien.genpwdpro.autofill.AutofillRepository.kt</ID>
    <ID>NoUnusedImports:BlocksEditor.kt$com.julien.genpwdpro.presentation.components.BlocksEditor.kt</ID>
    <ID>NoUnusedImports:CloudProviderConfigDialog.kt$com.julien.genpwdpro.presentation.screens.sync.CloudProviderConfigDialog.kt</ID>
    <ID>NoUnusedImports:CustomPhraseGenerator.kt$com.julien.genpwdpro.domain.generators.CustomPhraseGenerator.kt</ID>
    <ID>NoUnusedImports:CustomPhraseScreen.kt$com.julien.genpwdpro.presentation.screens.customphrase.CustomPhraseScreen.kt</ID>
    <ID>NoUnusedImports:EntropyCalculatorTest.kt$com.julien.genpwdpro.domain.utils.EntropyCalculatorTest.kt</ID>
    <ID>NoUnusedImports:EntryTypeSelectionScreen.kt$com.julien.genpwdpro.presentation.vault.EntryTypeSelectionScreen.kt</ID>
    <ID>NoUnusedImports:GeneratorViewModelTest.kt$import com.julien.genpwd</ID>
    <ID>NoUnusedImports:MainScreen.kt$com.julien.genpwdpro.presentation.MainScreen.kt</ID>
    <ID>NoUnusedImports:OneDriveProvider.kt$com.julien.genpwdpro.data.sync.providers.OneDriveProvider.kt</ID>
    <ID>NoUnusedImports:PCloudProvider.kt$com.julien.genpwdpro.data.sync.providers.PCloudProvider.kt</ID>
    <ID>NoUnusedImports:PassphraseGenerator.kt$com.julien.genpwdpro.domain.generators.PassphraseGenerator.kt</ID>
    <ID>NoUnusedImports:PasswordHealthScreen.kt$com.julien.genpwdpro.presentation.analysis.PasswordHealthScreen.kt</ID>
    <ID>NoUnusedImports:PasswordHistoryRepositoryTest.kt$import com.julien.genpwd</ID>
    <ID>NoUnusedImports:PresetEntity.kt$com.julien.genpwdpro.data.local.entity.PresetEntity.kt</ID>
    <ID>NoUnusedImports:ProtonDriveProvider.kt$com.julien.genpwdpro.data.sync.providers.ProtonDriveProvider.kt</ID>
    <ID>NoUnusedImports:QrScannerScreen.kt$com.julien.genpwdpro.presentation.vault.QrScannerScreen.kt</ID>
    <ID>NoUnusedImports:ShortcutManager.kt$com.julien.genpwdpro.presentation.shortcuts.ShortcutManager.kt</ID>
    <ID>NoUnusedImports:SwipeablePasswordCard.kt$com.julien.genpwdpro.presentation.components.SwipeablePasswordCard.kt</ID>
    <ID>NoUnusedImports:SyncModels.kt$com.julien.genpwdpro.data.sync.SyncModels.kt</ID>
    <ID>NoUnusedImports:SyncProgressIndicator.kt$com.julien.genpwdpro.presentation.screens.sync.SyncProgressIndicator.kt</ID>
    <ID>NoUnusedImports:SyncSettingsScreen.kt$com.julien.genpwdpro.presentation.screens.sync.SyncSettingsScreen.kt</ID>
    <ID>NoUnusedImports:Type.kt$com.julien.genpwdpro.presentation.theme.Type.kt</ID>
    <ID>NoUnusedImports:UnlockVaultScreen.kt$com.julien.genpwdpro.presentation.vault.UnlockVaultScreen.kt</ID>
    <ID>NoUnusedImports:VaultCryptoManagerTest.kt$com.julien.genpwdpro.data.crypto.VaultCryptoManagerTest.kt</ID>
    <ID>NoUnusedImports:VaultListScreen.kt$com.julien.genpwdpro.presentation.vault.VaultListScreen.kt</ID>
    <ID>NoUnusedImports:VaultMigrationManager.kt$com.julien.genpwdpro.data.vault.VaultMigrationManager.kt</ID>
    <ID>NoUnusedImports:VaultSessionManager.kt$com.julien.genpwdpro.domain.session.VaultSessionManager.kt</ID>
    <ID>NoUnusedImports:VaultSyncManager.kt$com.julien.genpwdpro.data.sync.VaultSyncManager.kt</ID>
    <ID>NoUnusedImports:VaultSyncManagerTest.kt$com.julien.genpwdpro.data.sync.VaultSyncManagerTest.kt</ID>
    <ID>NoUnusedImports:VaultSyncViewModel.kt$com.julien.genpwdpro.presentation.screens.sync.VaultSyncViewModel.kt</ID>
    <ID>NoUnusedImports:WindowSizeUtils.kt$com.julien.genpwdpro.presentation.utils.WindowSizeUtils.kt</ID>
    <ID>NoWildcardImports:AnalyzerScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:AnalyzerScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:AnalyzerScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:AnalyzerScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:AnimatedPasswordCard.kt$import androidx.compose.animation.*</ID>
    <ID>NoWildcardImports:AnimatedPasswordCard.kt$import androidx.compose.animation.core.*</ID>
    <ID>NoWildcardImports:AnimatedPasswordCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:AnimatedPasswordCard.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:AnimatedPasswordCard.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:AppDatabase.kt$import com.julien.genpwdpro.data.local.dao.*</ID>
    <ID>NoWildcardImports:AppDatabase.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>NoWildcardImports:ApplyCasingUseCaseTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:AutoSyncScheduler.kt$import androidx.work.*</ID>
    <ID>NoWildcardImports:AutofillSettingsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:AutofillSettingsScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:AutofillSettingsScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:AutofillSettingsScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:BlocksEditor.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:BlocksEditor.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:CasingSection.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:CasingSection.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:CharactersSection.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:CharactersSection.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:CloudProviderConfigDialog.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:CloudProviderConfigDialog.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:CloudProviderConfigDialog.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:CloudProviderConfigDialog.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:CloudSyncWorker.kt$import androidx.work.*</ID>
    <ID>NoWildcardImports:ConflictResolutionDialog.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:ConflictResolutionDialog.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:ConflictResolutionDialog.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:ConflictResolutionDialog.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:ConflictResolverTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:CreateVaultScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:CreateVaultScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:CreateVaultScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:CreateVaultScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:CustomPhraseScreen.kt$import androidx.compose.animation.*</ID>
    <ID>NoWildcardImports:CustomPhraseScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:CustomPhraseScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:CustomPhraseScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:CustomPhraseScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:DashboardScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:DashboardScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:DashboardScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:DatabaseModule.kt$import com.julien.genpwdpro.data.local.dao.*</ID>
    <ID>NoWildcardImports:EntropyCalculatorTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:EntryEditScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:EntryEditScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:EntryEditScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:EntryEditScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:EntryTypeSelectionScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:EntryTypeSelectionScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:EntryTypeSelectionScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:EntryViewModel.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>NoWildcardImports:EntryViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:ExpandableSection.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:ExpandableSection.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:FileVaultRepository.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>NoWildcardImports:FolderDao.kt$import androidx.room.*</ID>
    <ID>NoWildcardImports:FolderManagementViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:GeneratePasswordUseCaseTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:GeneratorScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:GeneratorScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:GeneratorScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:GeneratorScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:GeneratorScreen.kt$import com.julien.genpwdpro.presentation.components.*</ID>
    <ID>NoWildcardImports:GeneratorViewModel.kt$import com.julien.genpwdpro.data.models.*</ID>
    <ID>NoWildcardImports:GeneratorViewModelTest.kt$import io.mockk.*</ID>
    <ID>NoWildcardImports:GeneratorViewModelTest.kt$import kotlinx.coroutines.test.*</ID>
    <ID>NoWildcardImports:GeneratorViewModelTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:HistoryScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:HistoryScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:HistoryScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:HistoryScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:HistoryViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:LeetSpeakGeneratorTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:MainOptionsSection.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:MainOptionsSection.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:MainOptionsSection.kt$import com.julien.genpwdpro.data.models.*</ID>
    <ID>NoWildcardImports:MainScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:MainScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:MainScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:MainScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:NavGraph.kt$import com.julien.genpwdpro.presentation.vault.*</ID>
    <ID>NoWildcardImports:OnboardingScreen.kt$import androidx.compose.animation.*</ID>
    <ID>NoWildcardImports:OnboardingScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:OnboardingScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:OnboardingScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:OnboardingScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:OnboardingScreen.kt$import com.google.accompanist.pager.*</ID>
    <ID>NoWildcardImports:PCloudProvider.kt$import retrofit2.http.*</ID>
    <ID>NoWildcardImports:PassphraseGeneratorTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:PasswordCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:PasswordCard.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:PasswordCard.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:PasswordHealthScreen.kt$import androidx.compose.animation.core.*</ID>
    <ID>NoWildcardImports:PasswordHealthScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:PasswordHealthScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:PasswordHealthScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:PasswordHealthScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:PasswordHistoryDao.kt$import androidx.room.*</ID>
    <ID>NoWildcardImports:PasswordHistoryRepositoryTest.kt$import io.mockk.*</ID>
    <ID>NoWildcardImports:PasswordHistoryRepositoryTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:PasswordStrengthIndicator.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:PlaceCharactersUseCaseTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:PlacementBottomSheet.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:PlacementBottomSheet.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:PlacementBottomSheet.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:PresetDao.kt$import androidx.room.*</ID>
    <ID>NoWildcardImports:PresetListScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:PresetListScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:PresetListScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:PresetListScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:PresetSelector.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:PresetSelector.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:PresetSelector.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:PresetSelector.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:PresetViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:ProtonDriveProvider.kt$import retrofit2.http.*</ID>
    <ID>NoWildcardImports:QrScannerScreen.kt$import androidx.camera.core.*</ID>
    <ID>NoWildcardImports:QrScannerScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:QrScannerScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:QrScannerScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:SecuritySettingsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:SecuritySettingsScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:SecuritySettingsScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:SecuritySettingsScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:SecuritySettingsScreen.kt$import com.julien.genpwdpro.security.*</ID>
    <ID>NoWildcardImports:SecuritySettingsScreen.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:SettingsDataStore.kt$import androidx.datastore.preferences.core.*</ID>
    <ID>NoWildcardImports:SettingsDataStore.kt$import com.julien.genpwdpro.data.models.*</ID>
    <ID>NoWildcardImports:SettingsSlider.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:SettingsSlider.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:SwipeablePasswordCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:SwipeablePasswordCard.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:SwipeablePasswordCard.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:SyllablesGeneratorTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:SyncConfigDataStore.kt$import androidx.datastore.preferences.core.*</ID>
    <ID>NoWildcardImports:SyncHistoryScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:SyncHistoryScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:SyncHistoryScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:SyncHistoryScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:SyncProgressIndicator.kt$import androidx.compose.animation.*</ID>
    <ID>NoWildcardImports:SyncProgressIndicator.kt$import androidx.compose.animation.core.*</ID>
    <ID>NoWildcardImports:SyncProgressIndicator.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:SyncProgressIndicator.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:SyncProgressIndicator.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:SyncProgressIndicator.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:SyncSettingsScreen.kt$import androidx.compose.animation.*</ID>
    <ID>NoWildcardImports:SyncSettingsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:SyncSettingsScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:SyncSettingsScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:SyncSettingsScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:SyncSettingsScreen.kt$import com.julien.genpwdpro.data.sync.*</ID>
    <ID>NoWildcardImports:TagDao.kt$import androidx.room.*</ID>
    <ID>NoWildcardImports:TagManagementViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:ThemeToggle.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:UnlockVaultScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:UnlockVaultScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:UnlockVaultScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:UnlockVaultScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:VaultCryptoManagerTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:VaultDao.kt$import androidx.room.*</ID>
    <ID>NoWildcardImports:VaultData.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>NoWildcardImports:VaultEntryDao.kt$import androidx.room.*</ID>
    <ID>NoWildcardImports:VaultFileManager.kt$import com.julien.genpwdpro.data.models.vault.*</ID>
    <ID>NoWildcardImports:VaultListScreen.kt$import androidx.compose.animation.*</ID>
    <ID>NoWildcardImports:VaultListScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:VaultListScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:VaultListScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:VaultListScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:VaultListScreen.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>NoWildcardImports:VaultListViewModel.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>NoWildcardImports:VaultListViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:VaultManagerScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:VaultManagerScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:VaultManagerScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:VaultManagerScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:VaultManagerViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:VaultMigrationManager.kt$import com.julien.genpwdpro.data.local.dao.*</ID>
    <ID>NoWildcardImports:VaultMigrationManager.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>NoWildcardImports:VaultMigrationManager.kt$import com.julien.genpwdpro.data.models.vault.*</ID>
    <ID>NoWildcardImports:VaultRegistryDao.kt$import androidx.room.*</ID>
    <ID>NoWildcardImports:VaultRepository.kt$import com.julien.genpwdpro.data.local.dao.*</ID>
    <ID>NoWildcardImports:VaultRepository.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>NoWildcardImports:VaultSelectorScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:VaultSelectorScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:VaultSelectorScreen.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:VaultSelectorScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:VaultSessionManager.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>NoWildcardImports:VaultSessionManager.kt$import kotlinx.coroutines.*</ID>
    <ID>NoWildcardImports:VaultSessionManager.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:VaultSyncManager.kt$import com.julien.genpwdpro.data.sync.models.*</ID>
    <ID>NoWildcardImports:VaultSyncManagerTest.kt$import com.julien.genpwdpro.data.sync.models.*</ID>
    <ID>NoWildcardImports:VaultSyncManagerTest.kt$import io.mockk.*</ID>
    <ID>NoWildcardImports:VaultSyncManagerTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:VaultSyncViewModel.kt$import com.julien.genpwdpro.data.sync.models.*</ID>
    <ID>NoWildcardImports:VaultSyncViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:VaultViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:WebDAVConfigDialog.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:WebDAVConfigDialog.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>NoWildcardImports:WebDAVConfigDialog.kt$import androidx.compose.material3.*</ID>
    <ID>NoWildcardImports:WebDAVConfigDialog.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:WebDAVProvider.kt$import okhttp3.*</ID>
    <ID>ParameterListWrapping:EncryptionManager.kt$EncryptionManager$(iv: ByteArray, salt: ByteArray, iterations: Int = DEFAULT_KDF_ITERATIONS)</ID>
    <ID>ParameterListWrapping:GoogleDriveProvider.kt$GoogleDriveProvider$(activity: Activity, account: GoogleSignInAccount?)</ID>
    <ID>ParameterListWrapping:VaultEntryDao.kt$VaultEntryDao$(vaultId: String, now: Long = System.currentTimeMillis())</ID>
    <ID>PropertyWrapping:GeneratorViewModel.kt$GeneratorViewModel$private val _currentPreset = MutableStateFlow&lt;com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset?&gt;(null)</ID>
    <ID>PropertyWrapping:GeneratorViewModel.kt$GeneratorViewModel$private val _presets = MutableStateFlow&lt;List&lt;com.julien.genpwdpro.data.repository.VaultRepository.DecryptedPreset&gt;&gt;(emptyList())</ID>
    <ID>PropertyWrapping:PasswordAnalyzer.kt$PasswordAnalyzer$val strength = determineStrength(entropy, length, uniqueChars, sequentialPatterns.isNotEmpty(), commonWords.isNotEmpty())</ID>
    <ID>ReturnCount:BiometricVaultManager.kt$BiometricVaultManager$suspend fun unlockWithBiometric( activity: FragmentActivity, vaultId: String ): Result&lt;String&gt;</ID>
    <ID>ReturnCount:ClipboardSanitizer.kt$ClipboardSanitizer$private fun shouldKeep(ch: Char, treatAsLabel: Boolean): Boolean</ID>
    <ID>ReturnCount:ConflictResolver.kt$ConflictResolver$fun hasConflict(local: VaultSyncData, remote: VaultSyncData): Boolean</ID>
    <ID>ReturnCount:ConflictResolver.kt$ConflictResolver$fun suggestStrategy( local: VaultSyncData, remote: VaultSyncData ): ConflictResolutionStrategy</ID>
    <ID>ReturnCount:CustomPhraseGenerator.kt$CustomPhraseGenerator$fun validateWordList(words: List&lt;String&gt;): WordListValidation</ID>
    <ID>ReturnCount:EntryViewModel.kt$EntryViewModel$fun saveEntry()</ID>
    <ID>ReturnCount:GenPwdAutofillService.kt$AutofillParser$private fun isPasswordField( node: AssistStructure.ViewNode, hints: List&lt;String&gt; ): Boolean</ID>
    <ID>ReturnCount:OAuthCallbackManager.kt$OAuthCallbackManager$suspend fun handleCallback(uri: Uri): Boolean</ID>
    <ID>ReturnCount:OtpQrScannerActivity.kt$OtpQrScannerActivity$private fun analyzeImage(imageProxy: ImageProxy)</ID>
    <ID>ReturnCount:OtpQrScannerActivity.kt$OtpQrScannerActivity$private fun handleBarcode(barcode: Barcode): Boolean</ID>
    <ID>ReturnCount:SecureRoutes.kt$SecureRoutes$fun isSensitive(route: String?): Boolean</ID>
    <ID>ReturnCount:VaultSyncManager.kt$VaultSyncManager$suspend fun syncVault(vaultId: String, masterPassword: String): VaultSyncResult</ID>
    <ID>SpacingAroundOperators:GeneratorViewModelTest.kt$-</ID>
    <ID>SpacingAroundOperators:PasswordHistoryRepositoryTest.kt$-</ID>
    <ID>SpacingBetweenDeclarationsWithComments:PCloudProvider.kt$PCloudProvider$/** * Vérifie si une version plus récente existe sur le cloud */</ID>
    <ID>SpacingBetweenDeclarationsWithComments:ProtonDriveProvider.kt$ProtonDriveProvider$/** * Vérifie si une version plus récente existe sur le cloud */</ID>
    <ID>SpreadOperator:ApplyCasingUseCase.kt$ApplyCasingUseCase$(*separators.map { it.toString() }.toTypedArray())</ID>
    <ID>StringTemplate:GoogleDriveProvider.kt$GoogleDriveProvider$${vaultId}</ID>
    <ID>StringTemplate:OneDriveProvider.kt$OneDriveProvider$${vaultId}</ID>
    <ID>StringTemplate:PCloudProvider.kt$PCloudProvider$${vaultId}</ID>
    <ID>StringTemplate:ProtonDriveProvider.kt$ProtonDriveProvider$${vaultId}</ID>
    <ID>StringTemplate:WebDAVProvider.kt$WebDAVProvider$${vaultId}</ID>
    <ID>SwallowedException:CustomPhraseScreen.kt$CustomPhraseViewModel$e: Exception</ID>
    <ID>SwallowedException:DictionaryManager.kt$DictionaryManager$e: Exception</ID>
    <ID>SwallowedException:EncryptionManager.kt$EncryptionManager$e: Exception</ID>
    <ID>SwallowedException:GenPwdAutofillService.kt$GenPwdAutofillService$e: Exception</ID>
    <ID>SwallowedException:GeneratorScreen.kt$e: Exception</ID>
    <ID>SwallowedException:GeneratorScreen.kt$e: IllegalArgumentException</ID>
    <ID>SwallowedException:GeneratorViewModel.kt$GeneratorViewModel$e: Exception</ID>
    <ID>SwallowedException:GoogleDriveProvider.kt$GoogleDriveProvider$e: Exception</ID>
    <ID>SwallowedException:HapticUtils.kt$e: Exception</ID>
    <ID>SwallowedException:ImportExportRepository.kt$ImportExportRepository$e: Exception</ID>
    <ID>SwallowedException:KeystoreManager.kt$KeystoreManager$e: Exception</ID>
    <ID>SwallowedException:NavGraph.kt$e: IllegalArgumentException</ID>
    <ID>SwallowedException:OtpQrScannerActivity.kt$OtpQrScannerActivity$error: Exception</ID>
    <ID>SwallowedException:OtpUriParser.kt$OtpUriParser$error: IllegalArgumentException</ID>
    <ID>SwallowedException:PasswordWidget.kt$PasswordWidget$e: Exception</ID>
    <ID>SwallowedException:PresetViewModel.kt$PresetViewModel$e: Exception</ID>
    <ID>SwallowedException:SettingsDataStore.kt$SettingsDataStore$e: Exception</ID>
    <ID>SwallowedException:SyncConfigDataStore.kt$SyncConfigDataStore$e: Exception</ID>
    <ID>SwallowedException:SyncManager.kt$SyncManager$e: Exception</ID>
    <ID>SwallowedException:SyncPreferencesManager.kt$SyncPreferencesManager$e: IllegalArgumentException</ID>
    <ID>SwallowedException:TotpGenerator.kt$TotpGenerator$e: Exception</ID>
    <ID>SwallowedException:VaultCryptoManager.kt$VaultCryptoManager$e: Exception</ID>
    <ID>SwallowedException:VaultEntryEntity.kt$e: IllegalArgumentException</ID>
    <ID>SwallowedException:VaultFileManager.kt$VaultFileManager$e: Exception</ID>
    <ID>SwallowedException:VaultListViewModel.kt$VaultListViewModel$e: Exception</ID>
    <ID>SwallowedException:VaultSyncViewModel.kt$VaultSyncViewModel$e: Exception</ID>
    <ID>SwallowedException:WebDAVProvider.kt$WebDAVProvider$e: Exception</ID>
    <ID>ThrowsCount:OtpUriParser.kt$OtpUriParser$fun parse(uri: Uri): OtpConfig</ID>
    <ID>ThrowsCount:OtpUriParser.kt$OtpUriParser$private fun validateSecret(secret: String)</ID>
    <ID>ThrowsCount:VaultFileManager.kt$VaultFileManager$suspend fun importVault( sourceUri: Uri, destinationStrategy: StorageStrategy ): Pair&lt;String, File&gt;</ID>
    <ID>ThrowsCount:VaultFileManager.kt$VaultFileManager$suspend fun loadVaultFileFromUri( vaultId: String, masterPassword: String, fileUri: Uri ): VaultData</ID>
    <ID>ThrowsCount:VaultFileManager.kt$VaultFileManager$suspend fun saveVaultFileToUri( vaultId: String, data: VaultData, vaultKey: SecretKey, customFolderUri: Uri ): Uri</ID>
    <ID>TooGenericExceptionCaught:AppLifecycleObserver.kt$AppLifecycleObserver$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BiometricVaultManager.kt$BiometricVaultManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BiometricVaultManager.kt$BiometricVaultManager.&lt;no name provided&gt;$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CloudProviderSyncRepository.kt$CloudProviderSyncRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CloudSyncWorker.kt$CloudSyncWorker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CustomPhraseScreen.kt$CustomPhraseViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DashboardViewModel.kt$DashboardViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DictionaryManager.kt$DictionaryManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EncryptionManager.kt$EncryptionManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EntryViewModel.kt$EntryViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExportImportUtils.kt$ExportImportUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FileVaultRepository.kt$FileVaultRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FolderManagementViewModel.kt$FolderManagementViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GenPwdAutofillService.kt$GenPwdAutofillService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GeneratorScreen.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GeneratorViewModel.kt$GeneratorViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GoogleDriveProvider.kt$GoogleDriveProvider$e: Exception</ID>
    <ID>TooGenericExceptionCaught:HapticUtils.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImportExportRepository.kt$ImportExportRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:KeystoreManager.kt$KeystoreManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MainActivity.kt$MainActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OAuthCallbackManager.kt$OAuthCallbackManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OneDriveProvider.kt$OneDriveProvider$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OtpQrScannerActivity.kt$OtpQrScannerActivity$error: Exception</ID>
    <ID>TooGenericExceptionCaught:PCloudProvider.kt$PCloudProvider$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PasswordHealthViewModel.kt$PasswordHealthViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PasswordWidget.kt$PasswordWidget$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PasswordWidget.kt$PasswordWidget.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PresetViewModel.kt$PresetViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ProtonDriveProvider.kt$ProtonDriveProvider$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ProviderCredentialManager.kt$ProviderCredentialManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:QrScannerScreen.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsDataStore.kt$SettingsDataStore$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncConfigDataStore.kt$SyncConfigDataStore$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncInitializer.kt$SyncInitializer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncManager.kt$SyncManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncSettingsScreen.kt$SyncSettingsViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncWorker.kt$SyncWorker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TagManagementViewModel.kt$TagManagementViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TotpGenerator.kt$TotpGenerator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UnlockVaultViewModel.kt$UnlockVaultViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultCryptoManager.kt$VaultCryptoManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultFileManager.kt$VaultFileManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultListViewModel.kt$VaultListViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultManagerScreen.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultManagerViewModel.kt$VaultManagerViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultManagerViewModel.kt$VaultManagerViewModel$unlockError: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultMigrationManager.kt$VaultMigrationManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultRepository.kt$VaultRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultSessionManager.kt$VaultSessionManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultSyncManager.kt$VaultSyncManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultSyncViewModel.kt$VaultSyncViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VaultViewModel.kt$VaultViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebDAVProvider.kt$WebDAVProvider$e: Exception</ID>
    <ID>TooGenericExceptionThrown:OneDriveProvider.kt$OneDriveProvider$throw Exception("Failed to create folder: $error")</ID>
    <ID>TooGenericExceptionThrown:PCloudProvider.kt$PCloudProvider$throw Exception("Failed to create folder: ${response.error}")</ID>
    <ID>TooGenericExceptionThrown:ProtonDriveProvider.kt$ProtonDriveProvider$throw Exception("Failed to create share")</ID>
    <ID>TooGenericExceptionThrown:ProtonDriveProvider.kt$ProtonDriveProvider$throw Exception("No volumes available")</ID>
    <ID>TooGenericExceptionThrown:VaultManagerViewModel.kt$VaultManagerViewModel$throw Exception("Export failed")</ID>
    <ID>TooManyFunctions:AnalyzerScreen.kt$com.julien.genpwdpro.presentation.screens.analyzer.AnalyzerScreen.kt</ID>
    <ID>TooManyFunctions:CustomPhraseScreen.kt$com.julien.genpwdpro.presentation.screens.customphrase.CustomPhraseScreen.kt</ID>
    <ID>TooManyFunctions:FileVaultRepository.kt$FileVaultRepository</ID>
    <ID>TooManyFunctions:FolderDao.kt$FolderDao</ID>
    <ID>TooManyFunctions:KeystoreManager.kt$KeystoreManager</ID>
    <ID>TooManyFunctions:OtpQrScannerActivity.kt$OtpQrScannerActivity : AppCompatActivity</ID>
    <ID>TooManyFunctions:PasswordHealthScreen.kt$com.julien.genpwdpro.presentation.analysis.PasswordHealthScreen.kt</ID>
    <ID>TooManyFunctions:PasswordHistoryDao.kt$PasswordHistoryDao</ID>
    <ID>TooManyFunctions:PresetDao.kt$PresetDao</ID>
    <ID>TooManyFunctions:SyncPreferencesManager.kt$SyncPreferencesManager</ID>
    <ID>TooManyFunctions:SyncSettingsScreen.kt$com.julien.genpwdpro.presentation.screens.sync.SyncSettingsScreen.kt</ID>
    <ID>TooManyFunctions:TagDao.kt$TagDao</ID>
    <ID>TooManyFunctions:VaultCryptoManager.kt$VaultCryptoManager</ID>
    <ID>TooManyFunctions:VaultDao.kt$VaultDao</ID>
    <ID>TooManyFunctions:VaultEntryDao.kt$VaultEntryDao</ID>
    <ID>TooManyFunctions:VaultFileManager.kt$VaultFileManager</ID>
    <ID>TooManyFunctions:VaultRegistryDao.kt$VaultRegistryDao</ID>
    <ID>TooManyFunctions:VaultRepository.kt$VaultRepository</ID>
    <ID>TooManyFunctions:VaultSessionManager.kt$VaultSessionManager</ID>
    <ID>TooManyFunctions:VaultSyncViewModel.kt$VaultSyncViewModel : ViewModel</ID>
    <ID>UnusedParameter:AnimatedPasswordCard.kt$onExpandToggle: () -&gt; Unit</ID>
    <ID>UnusedParameter:AutofillRepository.kt$AutofillRepository$enabled: Boolean</ID>
    <ID>UnusedParameter:CloudProviderFactory.kt$CloudProviderFactory$config: ProviderConfig? = null</ID>
    <ID>UnusedParameter:ConflictResolutionDialog.kt$strategy: ConflictResolutionStrategy</ID>
    <ID>UnusedParameter:DashboardScreen.kt$onNavigateToPresetManager: (String) -&gt; Unit</ID>
    <ID>UnusedParameter:EntropyCalculator.kt$EntropyCalculator$hasDigits: Boolean = false</ID>
    <ID>UnusedParameter:EntropyCalculator.kt$EntropyCalculator$hasSpecials: Boolean = false</ID>
    <ID>UnusedParameter:EntropyCalculator.kt$EntropyCalculator$mode: GenerationMode</ID>
    <ID>UnusedParameter:EntryTypeSelectionScreen.kt$initialPassword: String? = null</ID>
    <ID>UnusedParameter:EntryTypeSelectionScreen.kt$vaultId: String</ID>
    <ID>UnusedParameter:GenPwdAutofillService.kt$AutofillParser$clientState: android.os.Bundle?</ID>
    <ID>UnusedParameter:ImportExportRepository.kt$ImportExportRepository$vaultKey: SecretKey</ID>
    <ID>UnusedParameter:IntentSanitizer.kt$IntentSanitizer$value: String?</ID>
    <ID>UnusedParameter:NavGraph.kt$sessionManager: com.julien.genpwdpro.domain.session.SessionManager</ID>
    <ID>UnusedParameter:PasswordHealthScreen.kt$statistics: HealthStatistics</ID>
    <ID>UnusedParameter:SafeLog.kt$SafeLog$value: Any?</ID>
    <ID>UnusedParameter:SecuritySettingsScreen.kt$isEnabled: Boolean</ID>
    <ID>UnusedParameter:SyncSettingsScreen.kt$SyncSettingsViewModel$password: String</ID>
    <ID>UnusedParameter:SyncSettingsScreen.kt$SyncSettingsViewModel$serverUrl: String</ID>
    <ID>UnusedParameter:SyncSettingsScreen.kt$SyncSettingsViewModel$username: String</ID>
    <ID>UnusedParameter:SyncSettingsScreen.kt$SyncSettingsViewModel$validateSSL: Boolean</ID>
    <ID>UnusedParameter:VaultFileManager.kt$VaultFileManager$customPath: Uri? = null</ID>
    <ID>UnusedParameter:VaultFileManager.kt$VaultFileManager$vaultId: String</ID>
    <ID>UnusedParameter:VaultListViewModel.kt$VaultListViewModel$vaultId: String</ID>
    <ID>UnusedParameter:VaultManagerScreen.kt$onLoad: () -&gt; Unit</ID>
    <ID>UnusedParameter:VaultManagerScreen.kt$onUnload: () -&gt; Unit</ID>
    <ID>UnusedParameter:VaultMigrationManager.kt$VaultMigrationManager$vaultKey: SecretKey</ID>
    <ID>UnusedParameter:VaultSessionManager.kt$VaultSessionManager$vaultId: String</ID>
    <ID>UnusedPrivateMember:ProtonDriveProvider.kt$ProtonDriveProvider$private fun generatePKCE()</ID>
    <ID>UnusedPrivateMember:SyllablesGenerator.kt$SyllablesGenerator$private fun generateSyllable( consonants: List&lt;Char&gt;, vowels: List&lt;Char&gt; ): String</ID>
    <ID>UnusedPrivateMember:WebDAVProvider.kt$WebDAVProvider$private fun extractAllFileNames(xml: String): List&lt;String&gt;</ID>
    <ID>UnusedPrivateProperty:AutofillSettingsScreen.kt$AutofillSettingsViewModel$private val autofillRepository: AutofillRepository</ID>
    <ID>UnusedPrivateProperty:CloudProviderSyncRepository.kt$CloudProviderSyncRepository$private val credentialManager: ProviderCredentialManager</ID>
    <ID>UnusedPrivateProperty:CloudProviderSyncRepository.kt$CloudProviderSyncRepository$private val providerFactory: CloudProviderFactory</ID>
    <ID>UnusedPrivateProperty:FileVaultRepository.kt$FileVaultRepository$private val vaultRegistryDao: VaultRegistryDao</ID>
    <ID>UnusedPrivateProperty:GoogleDriveProvider.kt$GoogleDriveProvider.Companion$private const val FOLDER_NAME = "GenPwdPro_Vaults"</ID>
    <ID>UnusedPrivateProperty:KeystoreManager.kt$KeystoreManager.Companion$private val APP_LOCK_KEY_ALIAS = KeystoreAlias.APP_LOCK.alias</ID>
    <ID>UnusedPrivateProperty:KeystoreManager.kt$KeystoreManager.Companion$private val SYNC_KEY_ALIAS = KeystoreAlias.SYNC.alias</ID>
    <ID>UnusedPrivateProperty:OneDriveProvider.kt$OneDriveProvider$private val clientId: String</ID>
    <ID>UnusedPrivateProperty:OneDriveProvider.kt$OneDriveProvider$private val context: Context</ID>
    <ID>UnusedPrivateProperty:OneDriveProvider.kt$OneDriveProvider.Companion$// MSAL authority private const val AUTHORITY = "https://login.microsoftonline.com/common"</ID>
    <ID>UnusedPrivateProperty:OneDriveProvider.kt$OneDriveProvider.Companion$// OAuth2 scopes private val SCOPES = arrayOf( "Files.ReadWrite.AppFolder", "User.Read" )</ID>
    <ID>UnusedPrivateProperty:PCloudProvider.kt$PCloudProvider.Companion$private const val REDIRECT_URI = "genpwdpro://oauth/pcloud"</ID>
    <ID>UnusedPrivateProperty:PasswordStrengthIndicator.kt$val scale by animateFloatAsState( targetValue = 1f, animationSpec = tween(durationMillis = 300), label = "scaleAnimation" )</ID>
    <ID>UnusedPrivateProperty:PresetListScreen.kt$val scope = rememberCoroutineScope()</ID>
    <ID>UnusedPrivateProperty:ProtonDriveProvider.kt$ProtonDriveProvider.Companion$// OAuth2 scopes private const val SCOPE = "drive.read drive.write"</ID>
    <ID>UnusedPrivateProperty:ProtonDriveProvider.kt$ProtonDriveProvider.Companion$// Proton API endpoints private const val AUTH_BASE_URL = "https://account.proton.me"</ID>
    <ID>UnusedPrivateProperty:SwipeablePasswordCard.kt$val coroutineScope = rememberCoroutineScope()</ID>
    <ID>UnusedPrivateProperty:UnlockVaultScreen.kt$val state = uiState</ID>
    <ID>UnusedPrivateProperty:WindowSizeUtils.kt$val density = LocalDensity.current</ID>
    <ID>UseCheckOrError:BiometricVaultManager.kt$BiometricVaultManager.&lt;no name provided&gt;$throw IllegalStateException("Cipher not available")</ID>
    <ID>UseCheckOrError:CustomPhraseGenerator.kt$CustomPhraseGenerator$throw IllegalStateException("Aucun mot disponible pour la génération")</ID>
    <ID>UseCheckOrError:GoogleDriveProvider.kt$GoogleDriveProvider$throw IllegalStateException("Drive service not initialized")</ID>
    <ID>UseCheckOrError:KeystoreManager.kt$KeystoreManager$throw IllegalStateException("Keystore alias $alias introuvable pour le déchiffrement")</ID>
    <ID>UseCheckOrError:OneDriveProvider.kt$OneDriveProvider$throw IllegalStateException("Not authenticated")</ID>
    <ID>UseCheckOrError:PCloudProvider.kt$PCloudProvider$throw IllegalStateException("Not authenticated")</ID>
    <ID>UseCheckOrError:PassphraseGenerator.kt$PassphraseGenerator$throw IllegalStateException("Dictionnaire vide pour ${settings.dictionary}")</ID>
    <ID>UseCheckOrError:ProtonDriveProvider.kt$ProtonDriveProvider$throw IllegalStateException("No volume ID")</ID>
    <ID>UseCheckOrError:ProtonDriveProvider.kt$ProtonDriveProvider$throw IllegalStateException("Not authenticated")</ID>
    <ID>UseCheckOrError:SyncManager.kt$SyncManager$throw IllegalStateException("Clé non initialisée")</ID>
    <ID>UseCheckOrError:VaultCryptoManager.kt$VaultCryptoManager$throw IllegalStateException("Argon2id key derivation failed")</ID>
    <ID>UseCheckOrError:VaultCryptoManager.kt$VaultCryptoManager$throw IllegalStateException("Argon2id password hashing failed")</ID>
    <ID>UseCheckOrError:VaultFileManager.kt$VaultFileManager$throw IllegalStateException("Cannot access custom folder")</ID>
    <ID>UseCheckOrError:VaultFileManager.kt$VaultFileManager$throw IllegalStateException("Cannot create vault file in custom folder")</ID>
    <ID>UseCheckOrError:VaultFileManager.kt$VaultFileManager$throw IllegalStateException("Cannot open input stream from URI")</ID>
    <ID>UseCheckOrError:VaultFileManager.kt$VaultFileManager$throw IllegalStateException("Cannot open output stream for URI: $fileUri")</ID>
    <ID>UseCheckOrError:VaultFileManager.kt$VaultFileManager$throw IllegalStateException("Cannot open output stream")</ID>
    <ID>UseCheckOrError:VaultFileManager.kt$VaultFileManager$throw IllegalStateException("Invalid vault file header")</ID>
    <ID>UseCheckOrError:VaultFileManager.kt$VaultFileManager$throw IllegalStateException("Invalid vault file")</ID>
    <ID>UseCheckOrError:VaultFileManager.kt$VaultFileManager$throw IllegalStateException("Vault file not found: $filePath")</ID>
    <ID>UseCheckOrError:VaultManagerViewModel.kt$VaultManagerViewModel$throw IllegalStateException("Custom folder not selected")</ID>
    <ID>UseCheckOrError:VaultManagerViewModel.kt$VaultManagerViewModel$throw IllegalStateException("Vault not found")</ID>
    <ID>UseCheckOrError:VaultMigrationManager.kt$VaultMigrationManager$throw IllegalStateException("Vault not found: $vaultId")</ID>
    <ID>UseCheckOrError:VaultRepository.kt$VaultRepository$throw IllegalStateException("Vault $vaultId n'est pas déverrouillé")</ID>
    <ID>WildcardImport:AnalyzerScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:AnalyzerScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:AnalyzerScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:AnalyzerScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:AnimatedPasswordCard.kt$import androidx.compose.animation.*</ID>
    <ID>WildcardImport:AnimatedPasswordCard.kt$import androidx.compose.animation.core.*</ID>
    <ID>WildcardImport:AnimatedPasswordCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:AnimatedPasswordCard.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:AnimatedPasswordCard.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:AppDatabase.kt$import com.julien.genpwdpro.data.local.dao.*</ID>
    <ID>WildcardImport:AppDatabase.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>WildcardImport:ApplyCasingUseCaseTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:AutoSyncScheduler.kt$import androidx.work.*</ID>
    <ID>WildcardImport:AutofillSettingsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:AutofillSettingsScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:AutofillSettingsScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:AutofillSettingsScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:BlocksEditor.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:BlocksEditor.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:CasingSection.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CasingSection.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:CharactersSection.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CharactersSection.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:CloudProviderConfigDialog.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CloudProviderConfigDialog.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:CloudProviderConfigDialog.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:CloudProviderConfigDialog.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:CloudSyncWorker.kt$import androidx.work.*</ID>
    <ID>WildcardImport:ConflictResolutionDialog.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ConflictResolutionDialog.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:ConflictResolutionDialog.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:ConflictResolutionDialog.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ConflictResolverTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:CreateVaultScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CreateVaultScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:CreateVaultScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:CreateVaultScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:CustomPhraseScreen.kt$import androidx.compose.animation.*</ID>
    <ID>WildcardImport:CustomPhraseScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CustomPhraseScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:CustomPhraseScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:CustomPhraseScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:DashboardScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:DashboardScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:DashboardScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:DatabaseModule.kt$import com.julien.genpwdpro.data.local.dao.*</ID>
    <ID>WildcardImport:EntropyCalculatorTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:EntryEditScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:EntryEditScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:EntryEditScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:EntryEditScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:EntryTypeSelectionScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:EntryTypeSelectionScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:EntryTypeSelectionScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:EntryViewModel.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>WildcardImport:EntryViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:ExpandableSection.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ExpandableSection.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:FileVaultRepository.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>WildcardImport:FolderDao.kt$import androidx.room.*</ID>
    <ID>WildcardImport:FolderManagementViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:GeneratePasswordUseCaseTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:GeneratorScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GeneratorScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:GeneratorScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:GeneratorScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:GeneratorScreen.kt$import com.julien.genpwdpro.presentation.components.*</ID>
    <ID>WildcardImport:GeneratorViewModel.kt$import com.julien.genpwdpro.data.models.*</ID>
    <ID>WildcardImport:GeneratorViewModelTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:GeneratorViewModelTest.kt$import kotlinx.coroutines.test.*</ID>
    <ID>WildcardImport:GeneratorViewModelTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:HistoryScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HistoryScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:HistoryScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:HistoryScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:HistoryViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:LeetSpeakGeneratorTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:MainOptionsSection.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:MainOptionsSection.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:MainOptionsSection.kt$import com.julien.genpwdpro.data.models.*</ID>
    <ID>WildcardImport:MainScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:MainScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:MainScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:MainScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:NavGraph.kt$import com.julien.genpwdpro.presentation.vault.*</ID>
    <ID>WildcardImport:OnboardingScreen.kt$import androidx.compose.animation.*</ID>
    <ID>WildcardImport:OnboardingScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:OnboardingScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:OnboardingScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:OnboardingScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:OnboardingScreen.kt$import com.google.accompanist.pager.*</ID>
    <ID>WildcardImport:PCloudProvider.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:PassphraseGeneratorTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:PasswordCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PasswordCard.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:PasswordCard.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:PasswordHealthScreen.kt$import androidx.compose.animation.core.*</ID>
    <ID>WildcardImport:PasswordHealthScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PasswordHealthScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:PasswordHealthScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:PasswordHealthScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:PasswordHistoryDao.kt$import androidx.room.*</ID>
    <ID>WildcardImport:PasswordHistoryRepositoryTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:PasswordHistoryRepositoryTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:PasswordStrengthIndicator.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PlaceCharactersUseCaseTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:PlacementBottomSheet.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PlacementBottomSheet.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:PlacementBottomSheet.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:PresetDao.kt$import androidx.room.*</ID>
    <ID>WildcardImport:PresetListScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PresetListScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:PresetListScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:PresetListScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:PresetSelector.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PresetSelector.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:PresetSelector.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:PresetSelector.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:PresetViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:ProtonDriveProvider.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:QrScannerScreen.kt$import androidx.camera.core.*</ID>
    <ID>WildcardImport:QrScannerScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:QrScannerScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:QrScannerScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SecuritySettingsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SecuritySettingsScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:SecuritySettingsScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:SecuritySettingsScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SecuritySettingsScreen.kt$import com.julien.genpwdpro.security.*</ID>
    <ID>WildcardImport:SecuritySettingsScreen.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:SettingsDataStore.kt$import androidx.datastore.preferences.core.*</ID>
    <ID>WildcardImport:SettingsDataStore.kt$import com.julien.genpwdpro.data.models.*</ID>
    <ID>WildcardImport:SettingsSlider.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SettingsSlider.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:SwipeablePasswordCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SwipeablePasswordCard.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:SwipeablePasswordCard.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SyllablesGeneratorTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:SyncConfigDataStore.kt$import androidx.datastore.preferences.core.*</ID>
    <ID>WildcardImport:SyncHistoryScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SyncHistoryScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:SyncHistoryScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:SyncHistoryScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SyncProgressIndicator.kt$import androidx.compose.animation.*</ID>
    <ID>WildcardImport:SyncProgressIndicator.kt$import androidx.compose.animation.core.*</ID>
    <ID>WildcardImport:SyncProgressIndicator.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SyncProgressIndicator.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:SyncProgressIndicator.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:SyncProgressIndicator.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SyncSettingsScreen.kt$import androidx.compose.animation.*</ID>
    <ID>WildcardImport:SyncSettingsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SyncSettingsScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:SyncSettingsScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:SyncSettingsScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SyncSettingsScreen.kt$import com.julien.genpwdpro.data.sync.*</ID>
    <ID>WildcardImport:TagDao.kt$import androidx.room.*</ID>
    <ID>WildcardImport:TagManagementViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:ThemeToggle.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:UnlockVaultScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:UnlockVaultScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:UnlockVaultScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:UnlockVaultScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:VaultCryptoManagerTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:VaultDao.kt$import androidx.room.*</ID>
    <ID>WildcardImport:VaultData.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>WildcardImport:VaultEntryDao.kt$import androidx.room.*</ID>
    <ID>WildcardImport:VaultFileManager.kt$import com.julien.genpwdpro.data.models.vault.*</ID>
    <ID>WildcardImport:VaultListScreen.kt$import androidx.compose.animation.*</ID>
    <ID>WildcardImport:VaultListScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:VaultListScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:VaultListScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:VaultListScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:VaultListScreen.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>WildcardImport:VaultListViewModel.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>WildcardImport:VaultListViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:VaultManagerScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:VaultManagerScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:VaultManagerScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:VaultManagerScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:VaultManagerViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:VaultMigrationManager.kt$import com.julien.genpwdpro.data.local.dao.*</ID>
    <ID>WildcardImport:VaultMigrationManager.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>WildcardImport:VaultMigrationManager.kt$import com.julien.genpwdpro.data.models.vault.*</ID>
    <ID>WildcardImport:VaultRegistryDao.kt$import androidx.room.*</ID>
    <ID>WildcardImport:VaultRepository.kt$import com.julien.genpwdpro.data.local.dao.*</ID>
    <ID>WildcardImport:VaultRepository.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>WildcardImport:VaultSelectorScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:VaultSelectorScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:VaultSelectorScreen.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:VaultSelectorScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:VaultSessionManager.kt$import com.julien.genpwdpro.data.local.entity.*</ID>
    <ID>WildcardImport:VaultSessionManager.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:VaultSessionManager.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:VaultSyncManager.kt$import com.julien.genpwdpro.data.sync.models.*</ID>
    <ID>WildcardImport:VaultSyncManagerTest.kt$import com.julien.genpwdpro.data.sync.models.*</ID>
    <ID>WildcardImport:VaultSyncManagerTest.kt$import io.mockk.*</ID>
    <ID>WildcardImport:VaultSyncManagerTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:VaultSyncViewModel.kt$import com.julien.genpwdpro.data.sync.models.*</ID>
    <ID>WildcardImport:VaultSyncViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:VaultViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:WebDAVConfigDialog.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:WebDAVConfigDialog.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:WebDAVConfigDialog.kt$import androidx.compose.material3.*</ID>
    <ID>WildcardImport:WebDAVConfigDialog.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:WebDAVProvider.kt$import okhttp3.*</ID>
    <ID>Wrapping:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$(</ID>
    <ID>Wrapping:ApplyCasingUseCaseTest.kt$ApplyCasingUseCaseTest$(</ID>
    <ID>Wrapping:BiometricHelper.kt$BiometricHelper$(</ID>
    <ID>Wrapping:EntropyCalculator.kt$EntropyCalculator$!it.isLetterOrDigit()</ID>
    <ID>Wrapping:EntropyCalculator.kt$EntropyCalculator$it.isDigit()</ID>
    <ID>Wrapping:EntropyCalculatorTest.kt$EntropyCalculatorTest$(</ID>
    <ID>Wrapping:FolderDao.kt$FolderDao$(</ID>
    <ID>Wrapping:GenPwdAutofillService.kt$AutofillParser$(</ID>
    <ID>Wrapping:HapticUtils.kt${ type -&gt; // Essayer d'abord le feedback système try { view.performSystemHapticFeedback(type) } catch (e: Exception) { // Si le feedback système échoue, utiliser notre implémentation hapticHelper.performHapticFeedback(type) } }</ID>
    <ID>Wrapping:LeetSpeakGeneratorTest.kt$LeetSpeakGeneratorTest$(</ID>
    <ID>Wrapping:NavGraph.kt${ password -&gt; navController.navigate( Screen.SelectEntryType.createRoute( vaultId = unlockedVaultId, password = password ) ) }</ID>
    <ID>Wrapping:PassphraseGeneratorTest.kt$PassphraseGeneratorTest$(</ID>
    <ID>Wrapping:PasswordHistoryDao.kt$PasswordHistoryDao$(</ID>
    <ID>Wrapping:SensitiveActionPreferencesTest.kt$SensitiveActionPreferencesTest$securePrefs.getLong(SensitiveActionPreferences.KEY_CLIPBOARD_TTL_MS, SensitiveActionPreferences.DEFAULT_CLIPBOARD_TTL_MS)</ID>
    <ID>Wrapping:SyllablesGeneratorTest.kt$SyllablesGeneratorTest$(</ID>
    <ID>Wrapping:TagDao.kt$TagDao$(</ID>
    <ID>Wrapping:UnlockVaultViewModel.kt$UnlockVaultViewModel$(</ID>
    <ID>Wrapping:VaultEntryDao.kt$VaultEntryDao$(</ID>
    <ID>Wrapping:WebDAVProvider.kt$WebDAVProvider$(</ID>
  </CurrentIssues>
</SmellBaseline>
